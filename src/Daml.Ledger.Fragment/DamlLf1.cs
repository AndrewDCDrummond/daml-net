// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: da/daml_lf_1.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.DigitalAsset.Daml_lf.DamlLf1 {

  /// <summary>Holder for reflection information generated from da/daml_lf_1.proto</summary>
  public static partial class DamlLf1Reflection {

    #region Descriptor
    /// <summary>File descriptor for da/daml_lf_1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DamlLf1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJkYS9kYW1sX2xmXzEucHJvdG8SCWRhbWxfbGZfMSIGCgRVbml0ImEKClBh",
            "Y2thZ2VSZWYSHwoEc2VsZhgBIAEoCzIPLmRhbWxfbGZfMS5Vbml0SAASFAoK",
            "cGFja2FnZV9pZBgCIAEoCUgAEhUKC2ludGVybmVkX2lkGAMgASgESABCBQoD",
            "U3VtIh4KCkRvdHRlZE5hbWUSEAoIc2VnbWVudHMYASADKAkiYwoJTW9kdWxl",
            "UmVmEioKC3BhY2thZ2VfcmVmGAEgASgLMhUuZGFtbF9sZl8xLlBhY2thZ2VS",
            "ZWYSKgoLbW9kdWxlX25hbWUYAiABKAsyFS5kYW1sX2xmXzEuRG90dGVkTmFt",
            "ZSJYCgtUeXBlQ29uTmFtZRIkCgZtb2R1bGUYASABKAsyFC5kYW1sX2xmXzEu",
            "TW9kdWxlUmVmEiMKBG5hbWUYAiABKAsyFS5kYW1sX2xmXzEuRG90dGVkTmFt",
            "ZSI9CgdWYWxOYW1lEiQKBm1vZHVsZRgBIAEoCzIULmRhbWxfbGZfMS5Nb2R1",
            "bGVSZWYSDAoEbmFtZRgCIAMoCSI9Cg1GaWVsZFdpdGhUeXBlEg0KBWZpZWxk",
            "GAEgASgJEh0KBHR5cGUYAiABKAsyDy5kYW1sX2xmXzEuVHlwZSI5CgtWYXJX",
            "aXRoVHlwZRILCgN2YXIYASABKAkSHQoEdHlwZRgCIAEoCzIPLmRhbWxfbGZf",
            "MS5UeXBlIj0KD1R5cGVWYXJXaXRoS2luZBILCgN2YXIYASABKAkSHQoEa2lu",
            "ZBgCIAEoCzIPLmRhbWxfbGZfMS5LaW5kIj0KDUZpZWxkV2l0aEV4cHISDQoF",
            "ZmllbGQYASABKAkSHQoEZXhwchgCIAEoCzIPLmRhbWxfbGZfMS5FeHByIlEK",
            "B0JpbmRpbmcSJgoGYmluZGVyGAEgASgLMhYuZGFtbF9sZl8xLlZhcldpdGhU",
            "eXBlEh4KBWJvdW5kGAIgASgLMg8uZGFtbF9sZl8xLkV4cHIioQEKBEtpbmQS",
            "HwoEc3RhchgBIAEoCzIPLmRhbWxfbGZfMS5Vbml0SAASJgoFYXJyb3cYAiAB",
            "KAsyFS5kYW1sX2xmXzEuS2luZC5BcnJvd0gAGkkKBUFycm93Eh8KBnBhcmFt",
            "cxgBIAMoCzIPLmRhbWxfbGZfMS5LaW5kEh8KBnJlc3VsdBgCIAEoCzIPLmRh",
            "bWxfbGZfMS5LaW5kQgUKA1N1bSKiBQoEVHlwZRIiCgN2YXIYASABKAsyEy5k",
            "YW1sX2xmXzEuVHlwZS5WYXJIABIiCgNjb24YAiABKAsyEy5kYW1sX2xmXzEu",
            "VHlwZS5Db25IABIkCgRwcmltGAMgASgLMhQuZGFtbF9sZl8xLlR5cGUuUHJp",
            "bUgAEiIKA2Z1bhgEIAEoCzITLmRhbWxfbGZfMS5UeXBlLkZ1bkgAEigKBmZv",
            "cmFsbBgFIAEoCzIWLmRhbWxfbGZfMS5UeXBlLkZvcmFsbEgAEiYKBXR1cGxl",
            "GAcgASgLMhUuZGFtbF9sZl8xLlR5cGUuVHVwbGVIABoxCgNWYXISCwoDdmFy",
            "GAEgASgJEh0KBGFyZ3MYAiADKAsyDy5kYW1sX2xmXzEuVHlwZRpLCgNDb24S",
            "JQoFdHljb24YASABKAsyFi5kYW1sX2xmXzEuVHlwZUNvbk5hbWUSHQoEYXJn",
            "cxgCIAMoCzIPLmRhbWxfbGZfMS5UeXBlGkgKBFByaW0SIQoEcHJpbRgBIAEo",
            "DjITLmRhbWxfbGZfMS5QcmltVHlwZRIdCgRhcmdzGAIgAygLMg8uZGFtbF9s",
            "Zl8xLlR5cGUaRwoDRnVuEh8KBnBhcmFtcxgBIAMoCzIPLmRhbWxfbGZfMS5U",
            "eXBlEh8KBnJlc3VsdBgCIAEoCzIPLmRhbWxfbGZfMS5UeXBlGlEKBkZvcmFs",
            "bBIoCgR2YXJzGAEgAygLMhouZGFtbF9sZl8xLlR5cGVWYXJXaXRoS2luZBId",
            "CgRib2R5GAIgASgLMg8uZGFtbF9sZl8xLlR5cGUaMQoFVHVwbGUSKAoGZmll",
            "bGRzGAEgAygLMhguZGFtbF9sZl8xLkZpZWxkV2l0aFR5cGVCBQoDU3VtSgQI",
            "BhAHSgQICBAJSgQICRAKSgQIChALIoYBCgdQcmltTGl0Eg8KBWludDY0GAEg",
            "ASgSSAASEQoHZGVjaW1hbBgCIAEoCUgAEg4KBHRleHQYBCABKAlIABITCgl0",
            "aW1lc3RhbXAYBSABKBBIABIPCgVwYXJ0eRgHIAEoCUgAEg4KBGRhdGUYCCAB",
            "KAVIAEIFCgNTdW1KBAgDEARKBAgGEAcirQEKCExvY2F0aW9uEiQKBm1vZHVs",
            "ZRgBIAEoCzIULmRhbWxfbGZfMS5Nb2R1bGVSZWYSKAoFcmFuZ2UYAiABKAsy",
            "GS5kYW1sX2xmXzEuTG9jYXRpb24uUmFuZ2UaUQoFUmFuZ2USEgoKc3RhcnRf",
            "bGluZRgBIAEoBRIRCglzdGFydF9jb2wYAiABKAUSEAoIZW5kX2xpbmUYAyAB",
            "KAUSDwoHZW5kX2NvbBgEIAEoBSKvEgoERXhwchIlCghsb2NhdGlvbhgZIAEo",
            "CzITLmRhbWxfbGZfMS5Mb2NhdGlvbhINCgN2YXIYASABKAlIABIhCgN2YWwY",
            "AiABKAsyEi5kYW1sX2xmXzEuVmFsTmFtZUgAEi0KB2J1aWx0aW4YAyABKA4y",
            "Gi5kYW1sX2xmXzEuQnVpbHRpbkZ1bmN0aW9uSAASJgoIcHJpbV9jb24YBCAB",
            "KA4yEi5kYW1sX2xmXzEuUHJpbUNvbkgAEiYKCHByaW1fbGl0GAUgASgLMhIu",
            "ZGFtbF9sZl8xLlByaW1MaXRIABIpCgdyZWNfY29uGAYgASgLMhYuZGFtbF9s",
            "Zl8xLkV4cHIuUmVjQ29uSAASKwoIcmVjX3Byb2oYByABKAsyFy5kYW1sX2xm",
            "XzEuRXhwci5SZWNQcm9qSAASKQoHcmVjX3VwZBgWIAEoCzIWLmRhbWxfbGZf",
            "MS5FeHByLlJlY1VwZEgAEjEKC3ZhcmlhbnRfY29uGAggASgLMhouZGFtbF9s",
            "Zl8xLkV4cHIuVmFyaWFudENvbkgAEisKCGVudW1fY29uGBwgASgLMhcuZGFt",
            "bF9sZl8xLkV4cHIuRW51bUNvbkgAEi0KCXR1cGxlX2NvbhgJIAEoCzIYLmRh",
            "bWxfbGZfMS5FeHByLlR1cGxlQ29uSAASLwoKdHVwbGVfcHJvahgKIAEoCzIZ",
            "LmRhbWxfbGZfMS5FeHByLlR1cGxlUHJvakgAEi0KCXR1cGxlX3VwZBgXIAEo",
            "CzIYLmRhbWxfbGZfMS5FeHByLlR1cGxlVXBkSAASIgoDYXBwGAsgASgLMhMu",
            "ZGFtbF9sZl8xLkV4cHIuQXBwSAASJwoGdHlfYXBwGAwgASgLMhUuZGFtbF9s",
            "Zl8xLkV4cHIuVHlBcHBIABIiCgNhYnMYDSABKAsyEy5kYW1sX2xmXzEuRXhw",
            "ci5BYnNIABInCgZ0eV9hYnMYDiABKAsyFS5kYW1sX2xmXzEuRXhwci5UeUFi",
            "c0gAEh8KBGNhc2UYDyABKAsyDy5kYW1sX2xmXzEuQ2FzZUgAEh8KA2xldBgQ",
            "IAEoCzIQLmRhbWxfbGZfMS5CbG9ja0gAEiIKA25pbBgRIAEoCzITLmRhbWxf",
            "bGZfMS5FeHByLk5pbEgAEiQKBGNvbnMYEiABKAsyFC5kYW1sX2xmXzEuRXhw",
            "ci5Db25zSAASIwoGdXBkYXRlGBQgASgLMhEuZGFtbF9sZl8xLlVwZGF0ZUgA",
            "EicKCHNjZW5hcmlvGBUgASgLMhMuZGFtbF9sZl8xLlNjZW5hcmlvSAASNQoN",
            "b3B0aW9uYWxfbm9uZRgaIAEoCzIcLmRhbWxfbGZfMS5FeHByLk9wdGlvbmFs",
            "Tm9uZUgAEjUKDW9wdGlvbmFsX3NvbWUYGyABKAsyHC5kYW1sX2xmXzEuRXhw",
            "ci5PcHRpb25hbFNvbWVIABpWCgZSZWNDb24SIgoFdHljb24YASABKAsyEy5k",
            "YW1sX2xmXzEuVHlwZS5Db24SKAoGZmllbGRzGAIgAygLMhguZGFtbF9sZl8x",
            "LkZpZWxkV2l0aEV4cHIaXQoHUmVjUHJvahIiCgV0eWNvbhgBIAEoCzITLmRh",
            "bWxfbGZfMS5UeXBlLkNvbhINCgVmaWVsZBgCIAEoCRIfCgZyZWNvcmQYAyAB",
            "KAsyDy5kYW1sX2xmXzEuRXhwchp9CgZSZWNVcGQSIgoFdHljb24YASABKAsy",
            "Ey5kYW1sX2xmXzEuVHlwZS5Db24SDQoFZmllbGQYAiABKAkSHwoGcmVjb3Jk",
            "GAMgASgLMg8uZGFtbF9sZl8xLkV4cHISHwoGdXBkYXRlGAQgASgLMg8uZGFt",
            "bF9sZl8xLkV4cHIaawoKVmFyaWFudENvbhIiCgV0eWNvbhgBIAEoCzITLmRh",
            "bWxfbGZfMS5UeXBlLkNvbhITCgt2YXJpYW50X2NvbhgCIAEoCRIkCgt2YXJp",
            "YW50X2FyZxgDIAEoCzIPLmRhbWxfbGZfMS5FeHByGkIKB0VudW1Db24SJQoF",
            "dHljb24YASABKAsyFi5kYW1sX2xmXzEuVHlwZUNvbk5hbWUSEAoIZW51bV9j",
            "b24YAiABKAkaNAoIVHVwbGVDb24SKAoGZmllbGRzGAEgAygLMhguZGFtbF9s",
            "Zl8xLkZpZWxkV2l0aEV4cHIaOgoJVHVwbGVQcm9qEg0KBWZpZWxkGAEgASgJ",
            "Eh4KBXR1cGxlGAIgASgLMg8uZGFtbF9sZl8xLkV4cHIaWgoIVHVwbGVVcGQS",
            "DQoFZmllbGQYASABKAkSHgoFdHVwbGUYAiABKAsyDy5kYW1sX2xmXzEuRXhw",
            "chIfCgZ1cGRhdGUYAyABKAsyDy5kYW1sX2xmXzEuRXhwchpCCgNBcHASHAoD",
            "ZnVuGAEgASgLMg8uZGFtbF9sZl8xLkV4cHISHQoEYXJncxgCIAMoCzIPLmRh",
            "bWxfbGZfMS5FeHByGkYKBVR5QXBwEh0KBGV4cHIYASABKAsyDy5kYW1sX2xm",
            "XzEuRXhwchIeCgV0eXBlcxgCIAMoCzIPLmRhbWxfbGZfMS5UeXBlGksKA0Fi",
            "cxIlCgVwYXJhbRgBIAMoCzIWLmRhbWxfbGZfMS5WYXJXaXRoVHlwZRIdCgRi",
            "b2R5GAIgASgLMg8uZGFtbF9sZl8xLkV4cHIaUQoFVHlBYnMSKQoFcGFyYW0Y",
            "ASADKAsyGi5kYW1sX2xmXzEuVHlwZVZhcldpdGhLaW5kEh0KBGJvZHkYAiAB",
            "KAsyDy5kYW1sX2xmXzEuRXhwchokCgNOaWwSHQoEdHlwZRgBIAEoCzIPLmRh",
            "bWxfbGZfMS5UeXBlGmQKBENvbnMSHQoEdHlwZRgBIAEoCzIPLmRhbWxfbGZf",
            "MS5UeXBlEh4KBWZyb250GAIgAygLMg8uZGFtbF9sZl8xLkV4cHISHQoEdGFp",
            "bBgDIAEoCzIPLmRhbWxfbGZfMS5FeHByGi0KDE9wdGlvbmFsTm9uZRIdCgR0",
            "eXBlGAEgASgLMg8uZGFtbF9sZl8xLlR5cGUaTAoMT3B0aW9uYWxTb21lEh0K",
            "BHR5cGUYASABKAsyDy5kYW1sX2xmXzEuVHlwZRIdCgRib2R5GAIgASgLMg8u",
            "ZGFtbF9sZl8xLkV4cHJCBQoDU3VtSgQIExAUSgQIGBAZIuEECgdDYXNlQWx0",
            "EiIKB2RlZmF1bHQYASABKAsyDy5kYW1sX2xmXzEuVW5pdEgAEi0KB3Zhcmlh",
            "bnQYAiABKAsyGi5kYW1sX2xmXzEuQ2FzZUFsdC5WYXJpYW50SAASJgoIcHJp",
            "bV9jb24YAyABKA4yEi5kYW1sX2xmXzEuUHJpbUNvbkgAEh4KA25pbBgEIAEo",
            "CzIPLmRhbWxfbGZfMS5Vbml0SAASJwoEY29ucxgFIAEoCzIXLmRhbWxfbGZf",
            "MS5DYXNlQWx0LkNvbnNIABIoCg1vcHRpb25hbF9ub25lGAcgASgLMg8uZGFt",
            "bF9sZl8xLlVuaXRIABI4Cg1vcHRpb25hbF9zb21lGAggASgLMh8uZGFtbF9s",
            "Zl8xLkNhc2VBbHQuT3B0aW9uYWxTb21lSAASJwoEZW51bRgJIAEoCzIXLmRh",
            "bWxfbGZfMS5DYXNlQWx0LkVudW1IABIdCgRib2R5GAYgASgLMg8uZGFtbF9s",
            "Zl8xLkV4cHIaTwoHVmFyaWFudBIjCgNjb24YASABKAsyFi5kYW1sX2xmXzEu",
            "VHlwZUNvbk5hbWUSDwoHdmFyaWFudBgCIAEoCRIOCgZiaW5kZXIYAyABKAka",
            "QAoERW51bRIjCgNjb24YASABKAsyFi5kYW1sX2xmXzEuVHlwZUNvbk5hbWUS",
            "EwoLY29uc3RydWN0b3IYAiABKAkaKgoEQ29ucxIQCgh2YXJfaGVhZBgBIAEo",
            "CRIQCgh2YXJfdGFpbBgCIAEoCRogCgxPcHRpb25hbFNvbWUSEAoIdmFyX2Jv",
            "ZHkYASABKAlCBQoDU3VtIkgKBENhc2USHgoFc2NydXQYASABKAsyDy5kYW1s",
            "X2xmXzEuRXhwchIgCgRhbHRzGAIgAygLMhIuZGFtbF9sZl8xLkNhc2VBbHQi",
            "TAoFQmxvY2sSJAoIYmluZGluZ3MYASADKAsyEi5kYW1sX2xmXzEuQmluZGlu",
            "ZxIdCgRib2R5GAIgASgLMg8uZGFtbF9sZl8xLkV4cHIiRAoEUHVyZRIdCgR0",
            "eXBlGAEgASgLMg8uZGFtbF9sZl8xLlR5cGUSHQoEZXhwchgCIAEoCzIPLmRh",
            "bWxfbGZfMS5FeHByIpUHCgZVcGRhdGUSHwoEcHVyZRgBIAEoCzIPLmRhbWxf",
            "bGZfMS5QdXJlSAASIQoFYmxvY2sYAiABKAsyEC5kYW1sX2xmXzEuQmxvY2tI",
            "ABIqCgZjcmVhdGUYAyABKAsyGC5kYW1sX2xmXzEuVXBkYXRlLkNyZWF0ZUgA",
            "Ei4KCGV4ZXJjaXNlGAQgASgLMhouZGFtbF9sZl8xLlVwZGF0ZS5FeGVyY2lz",
            "ZUgAEigKBWZldGNoGAUgASgLMhcuZGFtbF9sZl8xLlVwZGF0ZS5GZXRjaEgA",
            "EiMKCGdldF90aW1lGAYgASgLMg8uZGFtbF9sZl8xLlVuaXRIABI4Cg1sb29r",
            "dXBfYnlfa2V5GAggASgLMh8uZGFtbF9sZl8xLlVwZGF0ZS5SZXRyaWV2ZUJ5",
            "S2V5SAASNwoMZmV0Y2hfYnlfa2V5GAkgASgLMh8uZGFtbF9sZl8xLlVwZGF0",
            "ZS5SZXRyaWV2ZUJ5S2V5SAASMQoKZW1iZWRfZXhwchgHIAEoCzIbLmRhbWxf",
            "bGZfMS5VcGRhdGUuRW1iZWRFeHBySAAaUQoGQ3JlYXRlEigKCHRlbXBsYXRl",
            "GAEgASgLMhYuZGFtbF9sZl8xLlR5cGVDb25OYW1lEh0KBGV4cHIYAiABKAsy",
            "Dy5kYW1sX2xmXzEuRXhwchqgAQoIRXhlcmNpc2USKAoIdGVtcGxhdGUYASAB",
            "KAsyFi5kYW1sX2xmXzEuVHlwZUNvbk5hbWUSDgoGY2hvaWNlGAIgASgJEhwK",
            "A2NpZBgDIAEoCzIPLmRhbWxfbGZfMS5FeHByEh4KBWFjdG9yGAQgASgLMg8u",
            "ZGFtbF9sZl8xLkV4cHISHAoDYXJnGAUgASgLMg8uZGFtbF9sZl8xLkV4cHIa",
            "VQoFRmV0Y2gSKAoIdGVtcGxhdGUYASABKAsyFi5kYW1sX2xmXzEuVHlwZUNv",
            "bk5hbWUSHAoDY2lkGAIgASgLMg8uZGFtbF9sZl8xLkV4cHJKBAgDEAQaSQoJ",
            "RW1iZWRFeHByEh0KBHR5cGUYASABKAsyDy5kYW1sX2xmXzEuVHlwZRIdCgRi",
            "b2R5GAIgASgLMg8uZGFtbF9sZl8xLkV4cHIaVwoNUmV0cmlldmVCeUtleRIo",
            "Cgh0ZW1wbGF0ZRgBIAEoCzIWLmRhbWxfbGZfMS5UeXBlQ29uTmFtZRIcCgNr",
            "ZXkYAiABKAsyDy5kYW1sX2xmXzEuRXhwckIFCgNTdW0ijQQKCFNjZW5hcmlv",
            "Eh8KBHB1cmUYASABKAsyDy5kYW1sX2xmXzEuUHVyZUgAEiEKBWJsb2NrGAIg",
            "ASgLMhAuZGFtbF9sZl8xLkJsb2NrSAASLAoGY29tbWl0GAMgASgLMhouZGFt",
            "bF9sZl8xLlNjZW5hcmlvLkNvbW1pdEgAEjAKCm11c3RGYWlsQXQYBCABKAsy",
            "Gi5kYW1sX2xmXzEuU2NlbmFyaW8uQ29tbWl0SAASHwoEcGFzcxgFIAEoCzIP",
            "LmRhbWxfbGZfMS5FeHBySAASIwoIZ2V0X3RpbWUYBiABKAsyDy5kYW1sX2xm",
            "XzEuVW5pdEgAEiQKCWdldF9wYXJ0eRgHIAEoCzIPLmRhbWxfbGZfMS5FeHBy",
            "SAASMwoKZW1iZWRfZXhwchgIIAEoCzIdLmRhbWxfbGZfMS5TY2VuYXJpby5F",
            "bWJlZEV4cHJIABpqCgZDb21taXQSHgoFcGFydHkYASABKAsyDy5kYW1sX2xm",
            "XzEuRXhwchIdCgRleHByGAIgASgLMg8uZGFtbF9sZl8xLkV4cHISIQoIcmV0",
            "X3R5cGUYAyABKAsyDy5kYW1sX2xmXzEuVHlwZRpJCglFbWJlZEV4cHISHQoE",
            "dHlwZRgBIAEoCzIPLmRhbWxfbGZfMS5UeXBlEh0KBGJvZHkYAiABKAsyDy5k",
            "YW1sX2xmXzEuRXhwckIFCgNTdW0igwIKDlRlbXBsYXRlQ2hvaWNlEgwKBG5h",
            "bWUYASABKAkSEQoJY29uc3VtaW5nGAIgASgIEiQKC2NvbnRyb2xsZXJzGAMg",
            "ASgLMg8uZGFtbF9sZl8xLkV4cHISKgoKYXJnX2JpbmRlchgEIAEoCzIWLmRh",
            "bWxfbGZfMS5WYXJXaXRoVHlwZRIhCghyZXRfdHlwZRgFIAEoCzIPLmRhbWxf",
            "bGZfMS5UeXBlEh8KBnVwZGF0ZRgGIAEoCzIPLmRhbWxfbGZfMS5FeHByEhMK",
            "C3NlbGZfYmluZGVyGAcgASgJEiUKCGxvY2F0aW9uGAggASgLMhMuZGFtbF9s",
            "Zl8xLkxvY2F0aW9uIpYDCgdLZXlFeHByEjUKC3Byb2plY3Rpb25zGAEgASgL",
            "Mh4uZGFtbF9sZl8xLktleUV4cHIuUHJvamVjdGlvbnNIABIrCgZyZWNvcmQY",
            "AiABKAsyGS5kYW1sX2xmXzEuS2V5RXhwci5SZWNvcmRIABo/CgpQcm9qZWN0",
            "aW9uEiIKBXR5Y29uGAEgASgLMhMuZGFtbF9sZl8xLlR5cGUuQ29uEg0KBWZp",
            "ZWxkGAIgASgJGkEKC1Byb2plY3Rpb25zEjIKC3Byb2plY3Rpb25zGAIgAygL",
            "Mh0uZGFtbF9sZl8xLktleUV4cHIuUHJvamVjdGlvbho+CgtSZWNvcmRGaWVs",
            "ZBINCgVmaWVsZBgBIAEoCRIgCgRleHByGAIgASgLMhIuZGFtbF9sZl8xLktl",
            "eUV4cHIaXAoGUmVjb3JkEiIKBXR5Y29uGAEgASgLMhMuZGFtbF9sZl8xLlR5",
            "cGUuQ29uEi4KBmZpZWxkcxgCIAMoCzIeLmRhbWxfbGZfMS5LZXlFeHByLlJl",
            "Y29yZEZpZWxkQgUKA1N1bSL+AwoLRGVmVGVtcGxhdGUSJAoFdHljb24YASAB",
            "KAsyFS5kYW1sX2xmXzEuRG90dGVkTmFtZRINCgVwYXJhbRgCIAEoCRIgCgdw",
            "cmVjb25kGAQgASgLMg8uZGFtbF9sZl8xLkV4cHISJAoLc2lnbmF0b3JpZXMY",
            "BSABKAsyDy5kYW1sX2xmXzEuRXhwchIiCglhZ3JlZW1lbnQYBiABKAsyDy5k",
            "YW1sX2xmXzEuRXhwchIqCgdjaG9pY2VzGAcgAygLMhkuZGFtbF9sZl8xLlRl",
            "bXBsYXRlQ2hvaWNlEiIKCW9ic2VydmVycxgIIAEoCzIPLmRhbWxfbGZfMS5F",
            "eHByEiUKCGxvY2F0aW9uGAkgASgLMhMuZGFtbF9sZl8xLkxvY2F0aW9uEioK",
            "A2tleRgKIAEoCzIdLmRhbWxfbGZfMS5EZWZUZW1wbGF0ZS5EZWZLZXkapAEK",
            "BkRlZktleRIdCgR0eXBlGAEgASgLMg8uZGFtbF9sZl8xLlR5cGUSIQoDa2V5",
            "GAIgASgLMhIuZGFtbF9sZl8xLktleUV4cHJIABImCgtjb21wbGV4X2tleRgE",
            "IAEoCzIPLmRhbWxfbGZfMS5FeHBySAASJAoLbWFpbnRhaW5lcnMYAyABKAsy",
            "Dy5kYW1sX2xmXzEuRXhwckIKCghrZXlfZXhwckoECAMQBCKhAwoLRGVmRGF0",
            "YVR5cGUSIwoEbmFtZRgBIAEoCzIVLmRhbWxfbGZfMS5Eb3R0ZWROYW1lEioK",
            "BnBhcmFtcxgCIAMoCzIaLmRhbWxfbGZfMS5UeXBlVmFyV2l0aEtpbmQSLwoG",
            "cmVjb3JkGAMgASgLMh0uZGFtbF9sZl8xLkRlZkRhdGFUeXBlLkZpZWxkc0gA",
            "EjAKB3ZhcmlhbnQYBCABKAsyHS5kYW1sX2xmXzEuRGVmRGF0YVR5cGUuRmll",
            "bGRzSAASNwoEZW51bRgHIAEoCzInLmRhbWxfbGZfMS5EZWZEYXRhVHlwZS5F",
            "bnVtQ29uc3RydWN0b3JzSAASFAoMc2VyaWFsaXphYmxlGAUgASgIEiUKCGxv",
            "Y2F0aW9uGAYgASgLMhMuZGFtbF9sZl8xLkxvY2F0aW9uGjIKBkZpZWxkcxIo",
            "CgZmaWVsZHMYASADKAsyGC5kYW1sX2xmXzEuRmllbGRXaXRoVHlwZRooChBF",
            "bnVtQ29uc3RydWN0b3JzEhQKDGNvbnN0cnVjdG9ycxgBIAMoCUIKCghEYXRh",
            "Q29ucyLzAQoIRGVmVmFsdWUSOAoObmFtZV93aXRoX3R5cGUYASABKAsyIC5k",
            "YW1sX2xmXzEuRGVmVmFsdWUuTmFtZVdpdGhUeXBlEh0KBGV4cHIYAiABKAsy",
            "Dy5kYW1sX2xmXzEuRXhwchIZChFub19wYXJ0eV9saXRlcmFscxgDIAEoCBIP",
            "Cgdpc190ZXN0GAQgASgIEiUKCGxvY2F0aW9uGAUgASgLMhMuZGFtbF9sZl8x",
            "LkxvY2F0aW9uGjsKDE5hbWVXaXRoVHlwZRIMCgRuYW1lGAEgAygJEh0KBHR5",
            "cGUYAiABKAsyDy5kYW1sX2xmXzEuVHlwZSKQAQoMRmVhdHVyZUZsYWdzEhsK",
            "E2ZvcmJpZFBhcnR5TGl0ZXJhbHMYASABKAgSLwonZG9udERpdnVsZ2VDb250",
            "cmFjdElkc0luQ3JlYXRlQXJndW1lbnRzGAIgASgIEjIKKmRvbnREaXNjbG9z",
            "ZU5vbkNvbnN1bWluZ0Nob2ljZXNUb09ic2VydmVycxgDIAEoCCLdAQoGTW9k",
            "dWxlEiMKBG5hbWUYASABKAsyFS5kYW1sX2xmXzEuRG90dGVkTmFtZRImCgVm",
            "bGFncxgEIAEoCzIXLmRhbWxfbGZfMS5GZWF0dXJlRmxhZ3MSKgoKZGF0YV90",
            "eXBlcxgFIAMoCzIWLmRhbWxfbGZfMS5EZWZEYXRhVHlwZRIjCgZ2YWx1ZXMY",
            "BiADKAsyEy5kYW1sX2xmXzEuRGVmVmFsdWUSKQoJdGVtcGxhdGVzGAcgAygL",
            "MhYuZGFtbF9sZl8xLkRlZlRlbXBsYXRlSgQIAhADSgQIAxAEIksKB1BhY2th",
            "Z2USIgoHbW9kdWxlcxgBIAMoCzIRLmRhbWxfbGZfMS5Nb2R1bGUSHAoUaW50",
            "ZXJuZWRfcGFja2FnZV9pZHMYAiADKAkquwEKCFByaW1UeXBlEggKBFVOSVQQ",
            "ABIICgRCT09MEAESCQoFSU5UNjQQAhILCgdERUNJTUFMEAMSCAoEVEVYVBAF",
            "Eg0KCVRJTUVTVEFNUBAGEgkKBVBBUlRZEAgSCAoETElTVBAJEgoKBlVQREFU",
            "RRAKEgwKCFNDRU5BUklPEAsSCAoEREFURRAMEg8KC0NPTlRSQUNUX0lEEA0S",
            "DAoIT1BUSU9OQUwQDhIJCgVBUlJPVxAPEgcKA01BUBAQKjQKB1ByaW1Db24S",
            "DAoIQ09OX1VOSVQQABINCglDT05fRkFMU0UQARIMCghDT05fVFJVRRACKogL",
            "Cg9CdWlsdGluRnVuY3Rpb24SDwoLQUREX0RFQ0lNQUwQABIPCgtTVUJfREVD",
            "SU1BTBABEg8KC01VTF9ERUNJTUFMEAISDwoLRElWX0RFQ0lNQUwQAxIRCg1S",
            "T1VORF9ERUNJTUFMEAYSDQoJQUREX0lOVDY0EAcSDQoJU1VCX0lOVDY0EAgS",
            "DQoJTVVMX0lOVDY0EAkSDQoJRElWX0lOVDY0EAoSDQoJTU9EX0lOVDY0EAsS",
            "DQoJRVhQX0lOVDY0EAwSCQoFRk9MREwQFBIJCgVGT0xEUhAVEg0KCU1BUF9F",
            "TVBUWRBgEg4KCk1BUF9JTlNFUlQQYRIOCgpNQVBfTE9PS1VQEGISDgoKTUFQ",
            "X0RFTEVURRBjEg8KC01BUF9UT19MSVNUEGQSDAoITUFQX1NJWkUQZRIQCgxF",
            "WFBMT0RFX1RFWFQQFxIPCgtBUFBFTkRfVEVYVBAYEgkKBUVSUk9SEBkSDQoJ",
            "TEVRX0lOVDY0ECESDwoLTEVRX0RFQ0lNQUwQIhIMCghMRVFfVEVYVBAkEhEK",
            "DUxFUV9USU1FU1RBTVAQJRIMCghMRVFfREFURRBDEg0KCUxFUV9QQVJUWRBZ",
            "Eg4KCkxFU1NfSU5UNjQQJxIQCgxMRVNTX0RFQ0lNQUwQKBINCglMRVNTX1RF",
            "WFQQKhISCg5MRVNTX1RJTUVTVEFNUBArEg0KCUxFU1NfREFURRBEEg4KCkxF",
            "U1NfUEFSVFkQWhINCglHRVFfSU5UNjQQLRIPCgtHRVFfREVDSU1BTBAuEgwK",
            "CEdFUV9URVhUEDASEQoNR0VRX1RJTUVTVEFNUBAxEgwKCEdFUV9EQVRFEEUS",
            "DQoJR0VRX1BBUlRZEFsSEQoNR1JFQVRFUl9JTlQ2NBAzEhMKD0dSRUFURVJf",
            "REVDSU1BTBA0EhAKDEdSRUFURVJfVEVYVBA2EhUKEUdSRUFURVJfVElNRVNU",
            "QU1QEDcSEAoMR1JFQVRFUl9EQVRFEEYSEQoNR1JFQVRFUl9QQVJUWRBcEhEK",
            "DVRPX1RFWFRfSU5UNjQQORITCg9UT19URVhUX0RFQ0lNQUwQOhIQCgxUT19U",
            "RVhUX1RFWFQQPBIVChFUT19URVhUX1RJTUVTVEFNUBA9EhAKDFRPX1RFWFRf",
            "REFURRBHEhgKFFRPX1FVT1RFRF9URVhUX1BBUlRZED8SEQoNVE9fVEVYVF9Q",
            "QVJUWRBeEhMKD0ZST01fVEVYVF9QQVJUWRBfEhMKD0ZST01fVEVYVF9JTlQ2",
            "NBBnEhUKEUZST01fVEVYVF9ERUNJTUFMEGgSDwoLU0hBMjU2X1RFWFQQXRIV",
            "ChFEQVRFX1RPX1VOSVhfREFZUxBIEhUKEVVOSVhfREFZU19UT19EQVRFEEkS",
            "IgoeVElNRVNUQU1QX1RPX1VOSVhfTUlDUk9TRUNPTkRTEEoSIgoeVU5JWF9N",
            "SUNST1NFQ09ORFNfVE9fVElNRVNUQU1QEEsSFAoQSU5UNjRfVE9fREVDSU1B",
            "TBBMEhQKEERFQ0lNQUxfVE9fSU5UNjQQTRIQCgxJTVBMT0RFX1RFWFQQThIP",
            "CgtFUVVBTF9JTlQ2NBBPEhEKDUVRVUFMX0RFQ0lNQUwQUBIOCgpFUVVBTF9U",
            "RVhUEFESEwoPRVFVQUxfVElNRVNUQU1QEFISDgoKRVFVQUxfREFURRBTEg8K",
            "C0VRVUFMX1BBUlRZEFQSDgoKRVFVQUxfQk9PTBBVEhUKEUVRVUFMX0NPTlRS",
            "QUNUX0lEEFYSDgoKRVFVQUxfTElTVBBXEgkKBVRSQUNFEFgSFgoSQ09FUkNF",
            "X0NPTlRSQUNUX0lEEGYSGQoVVEVYVF9GUk9NX0NPREVfUE9JTlRTEGkSFwoT",
            "VEVYVF9UT19DT0RFX1BPSU5UUxBqQj0KGGNvbS5kaWdpdGFsYXNzZXQuZGFt",
            "bF9sZqoCIENvbS5EaWdpdGFsQXNzZXQuRGFtbF9sZi5EYW1sTGYxYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimType), typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimCon), typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.BuiltinFunction), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit), global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.PackageRef), global::Com.DigitalAsset.Daml_lf.DamlLf1.PackageRef.Parser, new[]{ "Self", "PackageId", "InternedId" }, new[]{ "Sum" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName), global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName.Parser, new[]{ "Segments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef), global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef.Parser, new[]{ "PackageRef", "ModuleName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName), global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName.Parser, new[]{ "Module", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.ValName), global::Com.DigitalAsset.Daml_lf.DamlLf1.ValName.Parser, new[]{ "Module", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType), global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType.Parser, new[]{ "Field", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType), global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType.Parser, new[]{ "Var", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind), global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind.Parser, new[]{ "Var", "Kind" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr), global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr.Parser, new[]{ "Field", "Expr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Binding), global::Com.DigitalAsset.Daml_lf.DamlLf1.Binding.Parser, new[]{ "Binder", "Bound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind), global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind.Parser, new[]{ "Star", "Arrow" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind.Types.Arrow), global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind.Types.Arrow.Parser, new[]{ "Params", "Result" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Type), global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Parser, new[]{ "Var", "Con", "Prim", "Fun", "Forall", "Tuple" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Var), global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Var.Parser, new[]{ "Var_", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con), global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con.Parser, new[]{ "Tycon", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Prim), global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Prim.Parser, new[]{ "Prim_", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Fun), global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Fun.Parser, new[]{ "Params", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Forall), global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Forall.Parser, new[]{ "Vars", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Tuple), global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Tuple.Parser, new[]{ "Fields" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimLit), global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimLit.Parser, new[]{ "Int64", "Decimal", "Text", "Timestamp", "Party", "Date" }, new[]{ "Sum" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Location), global::Com.DigitalAsset.Daml_lf.DamlLf1.Location.Parser, new[]{ "Module", "Range" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Location.Types.Range), global::Com.DigitalAsset.Daml_lf.DamlLf1.Location.Types.Range.Parser, new[]{ "StartLine", "StartCol", "EndLine", "EndCol" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Parser, new[]{ "Location", "Var", "Val", "Builtin", "PrimCon", "PrimLit", "RecCon", "RecProj", "RecUpd", "VariantCon", "EnumCon", "TupleCon", "TupleProj", "TupleUpd", "App", "TyApp", "Abs", "TyAbs", "Case", "Let", "Nil", "Cons", "Update", "Scenario", "OptionalNone", "OptionalSome" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecCon), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecCon.Parser, new[]{ "Tycon", "Fields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecProj), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecProj.Parser, new[]{ "Tycon", "Field", "Record" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecUpd), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecUpd.Parser, new[]{ "Tycon", "Field", "Record", "Update" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.VariantCon), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.VariantCon.Parser, new[]{ "Tycon", "VariantCon_", "VariantArg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.EnumCon), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.EnumCon.Parser, new[]{ "Tycon", "EnumCon_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleCon), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleCon.Parser, new[]{ "Fields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleProj), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleProj.Parser, new[]{ "Field", "Tuple" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleUpd), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleUpd.Parser, new[]{ "Field", "Tuple", "Update" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.App), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.App.Parser, new[]{ "Fun", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyApp), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyApp.Parser, new[]{ "Expr", "Types_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Abs), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Abs.Parser, new[]{ "Param", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyAbs), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyAbs.Parser, new[]{ "Param", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Nil), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Nil.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Cons), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Cons.Parser, new[]{ "Type", "Front", "Tail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalNone), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalNone.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalSome), global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalSome.Parser, new[]{ "Type", "Body" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt), global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Parser, new[]{ "Default", "Variant", "PrimCon", "Nil", "Cons", "OptionalNone", "OptionalSome", "Enum", "Body" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Variant), global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Variant.Parser, new[]{ "Con", "Variant_", "Binder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Enum), global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Enum.Parser, new[]{ "Con", "Constructor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Cons), global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Cons.Parser, new[]{ "VarHead", "VarTail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.OptionalSome), global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.OptionalSome.Parser, new[]{ "VarBody" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Case), global::Com.DigitalAsset.Daml_lf.DamlLf1.Case.Parser, new[]{ "Scrut", "Alts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Block), global::Com.DigitalAsset.Daml_lf.DamlLf1.Block.Parser, new[]{ "Bindings", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure), global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure.Parser, new[]{ "Type", "Expr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Update), global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Parser, new[]{ "Pure", "Block", "Create", "Exercise", "Fetch", "GetTime", "LookupByKey", "FetchByKey", "EmbedExpr" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Create), global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Create.Parser, new[]{ "Template", "Expr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Exercise), global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Exercise.Parser, new[]{ "Template", "Choice", "Cid", "Actor", "Arg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Fetch), global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Fetch.Parser, new[]{ "Template", "Cid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.EmbedExpr), global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.EmbedExpr.Parser, new[]{ "Type", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey), global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey.Parser, new[]{ "Template", "Key" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario), global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Parser, new[]{ "Pure", "Block", "Commit", "MustFailAt", "Pass", "GetTime", "GetParty", "EmbedExpr" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit), global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit.Parser, new[]{ "Party", "Expr", "RetType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.EmbedExpr), global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.EmbedExpr.Parser, new[]{ "Type", "Body" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.TemplateChoice), global::Com.DigitalAsset.Daml_lf.DamlLf1.TemplateChoice.Parser, new[]{ "Name", "Consuming", "Controllers", "ArgBinder", "RetType", "Update", "SelfBinder", "Location" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr), global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Parser, new[]{ "Projections", "Record" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projection), global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projection.Parser, new[]{ "Tycon", "Field" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projections), global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projections.Parser, new[]{ "Projections_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.RecordField), global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.RecordField.Parser, new[]{ "Field", "Expr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Record), global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Record.Parser, new[]{ "Tycon", "Fields" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate), global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate.Parser, new[]{ "Tycon", "Param", "Precond", "Signatories", "Agreement", "Choices", "Observers", "Location", "Key" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate.Types.DefKey), global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate.Types.DefKey.Parser, new[]{ "Type", "Key", "ComplexKey", "Maintainers" }, new[]{ "KeyExpr" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType), global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Parser, new[]{ "Name", "Params", "Record", "Variant", "Enum", "Serializable", "Location" }, new[]{ "DataCons" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields), global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields.Parser, new[]{ "Fields_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.EnumConstructors), global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.EnumConstructors.Parser, new[]{ "Constructors" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue), global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue.Parser, new[]{ "NameWithType", "Expr", "NoPartyLiterals", "IsTest", "Location" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue.Types.NameWithType), global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue.Types.NameWithType.Parser, new[]{ "Name", "Type" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.FeatureFlags), global::Com.DigitalAsset.Daml_lf.DamlLf1.FeatureFlags.Parser, new[]{ "ForbidPartyLiterals", "DontDivulgeContractIdsInCreateArguments", "DontDiscloseNonConsumingChoicesToObservers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Module), global::Com.DigitalAsset.Daml_lf.DamlLf1.Module.Parser, new[]{ "Name", "Flags", "DataTypes", "Values", "Templates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_lf.DamlLf1.Package), global::Com.DigitalAsset.Daml_lf.DamlLf1.Package.Parser, new[]{ "Modules", "InternedPackageIds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Builtin primitive types
  /// </summary>
  public enum PrimType {
    /// <summary>
    /// Builtin type 'Unit'
    /// </summary>
    [pbr::OriginalName("UNIT")] Unit = 0,
    /// <summary>
    /// Builtin type 'Bool'
    /// </summary>
    [pbr::OriginalName("BOOL")] Bool = 1,
    /// <summary>
    /// Builtin type 'Int64'
    /// </summary>
    [pbr::OriginalName("INT64")] Int64 = 2,
    /// <summary>
    /// Builtin type 'Int64'
    /// </summary>
    [pbr::OriginalName("DECIMAL")] Decimal = 3,
    /// <summary>
    /// Builtin type 'Text'
    /// </summary>
    [pbr::OriginalName("TEXT")] Text = 5,
    /// <summary>
    /// Builtin type 'Timestamp'
    /// </summary>
    [pbr::OriginalName("TIMESTAMP")] Timestamp = 6,
    /// <summary>
    /// Builtin tpe 'Party'
    /// </summary>
    [pbr::OriginalName("PARTY")] Party = 8,
    /// <summary>
    /// Builtin type 'List'
    /// </summary>
    [pbr::OriginalName("LIST")] List = 9,
    /// <summary>
    /// Builtin type 'Update'
    /// </summary>
    [pbr::OriginalName("UPDATE")] Update = 10,
    /// <summary>
    /// Builtin type 'Scenatrio'
    /// </summary>
    [pbr::OriginalName("SCENARIO")] Scenario = 11,
    /// <summary>
    /// Builtin type 'Date'
    /// </summary>
    [pbr::OriginalName("DATE")] Date = 12,
    /// <summary>
    /// Builtin type 'ContractId'
    /// </summary>
    [pbr::OriginalName("CONTRACT_ID")] ContractId = 13,
    /// <summary>
    /// Builtin type 'Optional'
    /// *Available since version 1.1*
    /// </summary>
    [pbr::OriginalName("OPTIONAL")] Optional = 14,
    /// <summary>
    /// Builtin type `TArrow`
    /// *Available since version 1.1*
    /// </summary>
    [pbr::OriginalName("ARROW")] Arrow = 15,
    /// <summary>
    /// Builtin type 'TMap`
    /// *Available since version 1.3*
    /// </summary>
    [pbr::OriginalName("MAP")] Map = 16,
  }

  /// <summary>
  /// Primitive constructors
  /// </summary>
  public enum PrimCon {
    /// <summary>
    /// Unit value '()'
    /// </summary>
    [pbr::OriginalName("CON_UNIT")] ConUnit = 0,
    /// <summary>
    /// 'False' boolean value
    /// </summary>
    [pbr::OriginalName("CON_FALSE")] ConFalse = 1,
    /// <summary>
    /// 'True' boolean value
    /// </summary>
    [pbr::OriginalName("CON_TRUE")] ConTrue = 2,
  }

  /// <summary>
  /// Builtin functions
  /// Refer to DAML-LF major version 1 specification for types and behavior of those.
  /// </summary>
  public enum BuiltinFunction {
    [pbr::OriginalName("ADD_DECIMAL")] AddDecimal = 0,
    [pbr::OriginalName("SUB_DECIMAL")] SubDecimal = 1,
    [pbr::OriginalName("MUL_DECIMAL")] MulDecimal = 2,
    [pbr::OriginalName("DIV_DECIMAL")] DivDecimal = 3,
    [pbr::OriginalName("ROUND_DECIMAL")] RoundDecimal = 6,
    [pbr::OriginalName("ADD_INT64")] AddInt64 = 7,
    [pbr::OriginalName("SUB_INT64")] SubInt64 = 8,
    [pbr::OriginalName("MUL_INT64")] MulInt64 = 9,
    [pbr::OriginalName("DIV_INT64")] DivInt64 = 10,
    [pbr::OriginalName("MOD_INT64")] ModInt64 = 11,
    [pbr::OriginalName("EXP_INT64")] ExpInt64 = 12,
    [pbr::OriginalName("FOLDL")] Foldl = 20,
    [pbr::OriginalName("FOLDR")] Foldr = 21,
    [pbr::OriginalName("MAP_EMPTY")] MapEmpty = 96,
    [pbr::OriginalName("MAP_INSERT")] MapInsert = 97,
    [pbr::OriginalName("MAP_LOOKUP")] MapLookup = 98,
    [pbr::OriginalName("MAP_DELETE")] MapDelete = 99,
    [pbr::OriginalName("MAP_TO_LIST")] MapToList = 100,
    [pbr::OriginalName("MAP_SIZE")] MapSize = 101,
    [pbr::OriginalName("EXPLODE_TEXT")] ExplodeText = 23,
    [pbr::OriginalName("APPEND_TEXT")] AppendText = 24,
    [pbr::OriginalName("ERROR")] Error = 25,
    [pbr::OriginalName("LEQ_INT64")] LeqInt64 = 33,
    [pbr::OriginalName("LEQ_DECIMAL")] LeqDecimal = 34,
    [pbr::OriginalName("LEQ_TEXT")] LeqText = 36,
    [pbr::OriginalName("LEQ_TIMESTAMP")] LeqTimestamp = 37,
    [pbr::OriginalName("LEQ_DATE")] LeqDate = 67,
    /// <summary>
    /// *Available Since version 1.1*
    /// </summary>
    [pbr::OriginalName("LEQ_PARTY")] LeqParty = 89,
    [pbr::OriginalName("LESS_INT64")] LessInt64 = 39,
    [pbr::OriginalName("LESS_DECIMAL")] LessDecimal = 40,
    [pbr::OriginalName("LESS_TEXT")] LessText = 42,
    [pbr::OriginalName("LESS_TIMESTAMP")] LessTimestamp = 43,
    [pbr::OriginalName("LESS_DATE")] LessDate = 68,
    /// <summary>
    /// *Available Since version 1.1*
    /// </summary>
    [pbr::OriginalName("LESS_PARTY")] LessParty = 90,
    [pbr::OriginalName("GEQ_INT64")] GeqInt64 = 45,
    [pbr::OriginalName("GEQ_DECIMAL")] GeqDecimal = 46,
    [pbr::OriginalName("GEQ_TEXT")] GeqText = 48,
    [pbr::OriginalName("GEQ_TIMESTAMP")] GeqTimestamp = 49,
    [pbr::OriginalName("GEQ_DATE")] GeqDate = 69,
    /// <summary>
    /// *Available Since version 1.1*
    /// </summary>
    [pbr::OriginalName("GEQ_PARTY")] GeqParty = 91,
    [pbr::OriginalName("GREATER_INT64")] GreaterInt64 = 51,
    [pbr::OriginalName("GREATER_DECIMAL")] GreaterDecimal = 52,
    [pbr::OriginalName("GREATER_TEXT")] GreaterText = 54,
    [pbr::OriginalName("GREATER_TIMESTAMP")] GreaterTimestamp = 55,
    [pbr::OriginalName("GREATER_DATE")] GreaterDate = 70,
    /// <summary>
    /// *Available Since version 1.1*
    /// </summary>
    [pbr::OriginalName("GREATER_PARTY")] GreaterParty = 92,
    [pbr::OriginalName("TO_TEXT_INT64")] ToTextInt64 = 57,
    [pbr::OriginalName("TO_TEXT_DECIMAL")] ToTextDecimal = 58,
    [pbr::OriginalName("TO_TEXT_TEXT")] ToTextText = 60,
    [pbr::OriginalName("TO_TEXT_TIMESTAMP")] ToTextTimestamp = 61,
    [pbr::OriginalName("TO_TEXT_DATE")] ToTextDate = 71,
    /// <summary>
    /// legacy, remove in next major version
    /// </summary>
    [pbr::OriginalName("TO_QUOTED_TEXT_PARTY")] ToQuotedTextParty = 63,
    /// <summary>
    /// *Available Since version 1.2*
    /// </summary>
    [pbr::OriginalName("TO_TEXT_PARTY")] ToTextParty = 94,
    /// <summary>
    /// *Available Since version 1.2*, was named FROM_TEXT_PARTY in 1.2, 1.3 and 1.4
    /// </summary>
    [pbr::OriginalName("FROM_TEXT_PARTY")] FromTextParty = 95,
    /// <summary>
    /// *Available Since version 1.5*
    /// </summary>
    [pbr::OriginalName("FROM_TEXT_INT64")] FromTextInt64 = 103,
    /// <summary>
    /// *Available Since version 1.5*
    /// </summary>
    [pbr::OriginalName("FROM_TEXT_DECIMAL")] FromTextDecimal = 104,
    /// <summary>
    /// *Available Since version 1.2*
    /// </summary>
    [pbr::OriginalName("SHA256_TEXT")] Sha256Text = 93,
    /// <summary>
    /// Date -> Int64
    /// </summary>
    [pbr::OriginalName("DATE_TO_UNIX_DAYS")] DateToUnixDays = 72,
    /// <summary>
    /// Int64 -> Date
    /// </summary>
    [pbr::OriginalName("UNIX_DAYS_TO_DATE")] UnixDaysToDate = 73,
    /// <summary>
    /// Timestamp -> Int64
    /// </summary>
    [pbr::OriginalName("TIMESTAMP_TO_UNIX_MICROSECONDS")] TimestampToUnixMicroseconds = 74,
    /// <summary>
    /// Int64 -> Timestamp
    /// </summary>
    [pbr::OriginalName("UNIX_MICROSECONDS_TO_TIMESTAMP")] UnixMicrosecondsToTimestamp = 75,
    [pbr::OriginalName("INT64_TO_DECIMAL")] Int64ToDecimal = 76,
    [pbr::OriginalName("DECIMAL_TO_INT64")] DecimalToInt64 = 77,
    [pbr::OriginalName("IMPLODE_TEXT")] ImplodeText = 78,
    [pbr::OriginalName("EQUAL_INT64")] EqualInt64 = 79,
    [pbr::OriginalName("EQUAL_DECIMAL")] EqualDecimal = 80,
    [pbr::OriginalName("EQUAL_TEXT")] EqualText = 81,
    [pbr::OriginalName("EQUAL_TIMESTAMP")] EqualTimestamp = 82,
    [pbr::OriginalName("EQUAL_DATE")] EqualDate = 83,
    [pbr::OriginalName("EQUAL_PARTY")] EqualParty = 84,
    [pbr::OriginalName("EQUAL_BOOL")] EqualBool = 85,
    [pbr::OriginalName("EQUAL_CONTRACT_ID")] EqualContractId = 86,
    [pbr::OriginalName("EQUAL_LIST")] EqualList = 87,
    [pbr::OriginalName("TRACE")] Trace = 88,
    [pbr::OriginalName("COERCE_CONTRACT_ID")] CoerceContractId = 102,
    /// <summary>
    /// : List Int64 -> Text   *Available since version 1.dev*
    /// </summary>
    [pbr::OriginalName("TEXT_FROM_CODE_POINTS")] TextFromCodePoints = 105,
    /// <summary>
    ///: Text -> List Int64    *Available since version 1.dev*
    /// </summary>
    [pbr::OriginalName("TEXT_TO_CODE_POINTS")] TextToCodePoints = 106,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Canonical encoding in one-ofs for cases that carry no meaningful
  /// values.
  /// </summary>
  public sealed partial class Unit : pb::IMessage<Unit> {
    private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Unit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit(Unit other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit Clone() {
      return new Unit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Unit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Unit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Unit other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Package reference
  /// </summary>
  public sealed partial class PackageRef : pb::IMessage<PackageRef> {
    private static readonly pb::MessageParser<PackageRef> _parser = new pb::MessageParser<PackageRef>(() => new PackageRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageRef(PackageRef other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Self:
          Self = other.Self.Clone();
          break;
        case SumOneofCase.PackageId:
          PackageId = other.PackageId;
          break;
        case SumOneofCase.InternedId:
          InternedId = other.InternedId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageRef Clone() {
      return new PackageRef(this);
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 1;
    /// <summary>
    /// Reference to the package of which the package this reference
    /// belongs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit Self {
      get { return sumCase_ == SumOneofCase.Self ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Self;
      }
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 2;
    /// <summary>
    /// A `Package identifier` for an imported Package.
    /// A ascii7 lowercase hex-encoded package identifier. This refers
    /// to the DAML LF Archive Hash.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageId {
      get { return sumCase_ == SumOneofCase.PackageId ? (string) sum_ : ""; }
      set {
        sum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sumCase_ = SumOneofCase.PackageId;
      }
    }

    /// <summary>Field number for the "interned_id" field.</summary>
    public const int InternedIdFieldNumber = 3;
    /// <summary>
    /// An index into `interned_package_ids` of the Package containing
    /// this reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InternedId {
      get { return sumCase_ == SumOneofCase.InternedId ? (ulong) sum_ : 0UL; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.InternedId;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Self = 1,
      PackageId = 2,
      InternedId = 3,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Self, other.Self)) return false;
      if (PackageId != other.PackageId) return false;
      if (InternedId != other.InternedId) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Self) hash ^= Self.GetHashCode();
      if (sumCase_ == SumOneofCase.PackageId) hash ^= PackageId.GetHashCode();
      if (sumCase_ == SumOneofCase.InternedId) hash ^= InternedId.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Self) {
        output.WriteRawTag(10);
        output.WriteMessage(Self);
      }
      if (sumCase_ == SumOneofCase.PackageId) {
        output.WriteRawTag(18);
        output.WriteString(PackageId);
      }
      if (sumCase_ == SumOneofCase.InternedId) {
        output.WriteRawTag(24);
        output.WriteUInt64(InternedId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Self) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      if (sumCase_ == SumOneofCase.PackageId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageId);
      }
      if (sumCase_ == SumOneofCase.InternedId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InternedId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageRef other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Self:
          if (Self == null) {
            Self = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
          }
          Self.MergeFrom(other.Self);
          break;
        case SumOneofCase.PackageId:
          PackageId = other.PackageId;
          break;
        case SumOneofCase.InternedId:
          InternedId = other.InternedId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.Self) {
              subBuilder.MergeFrom(Self);
            }
            input.ReadMessage(subBuilder);
            Self = subBuilder;
            break;
          }
          case 18: {
            PackageId = input.ReadString();
            break;
          }
          case 24: {
            InternedId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A `name`, e.g. Util.Either.isLeft
  /// </summary>
  public sealed partial class DottedName : pb::IMessage<DottedName> {
    private static readonly pb::MessageParser<DottedName> _parser = new pb::MessageParser<DottedName>(() => new DottedName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DottedName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DottedName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DottedName(DottedName other) : this() {
      segments_ = other.segments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DottedName Clone() {
      return new DottedName(this);
    }

    /// <summary>Field number for the "segments" field.</summary>
    public const int SegmentsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_segments_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> segments_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// *Must be a non-empty list of a valid identifiers*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Segments {
      get { return segments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DottedName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DottedName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!segments_.Equals(other.segments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= segments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      segments_.WriteTo(output, _repeated_segments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += segments_.CalculateSize(_repeated_segments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DottedName other) {
      if (other == null) {
        return;
      }
      segments_.Add(other.segments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            segments_.AddEntriesFrom(input, _repeated_segments_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A fully qualified module reference
  /// </summary>
  public sealed partial class ModuleRef : pb::IMessage<ModuleRef> {
    private static readonly pb::MessageParser<ModuleRef> _parser = new pb::MessageParser<ModuleRef>(() => new ModuleRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleRef(ModuleRef other) : this() {
      packageRef_ = other.packageRef_ != null ? other.packageRef_.Clone() : null;
      moduleName_ = other.moduleName_ != null ? other.moduleName_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleRef Clone() {
      return new ModuleRef(this);
    }

    /// <summary>Field number for the "package_ref" field.</summary>
    public const int PackageRefFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.PackageRef packageRef_;
    /// <summary>
    /// package where the module is defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.PackageRef PackageRef {
      get { return packageRef_; }
      set {
        packageRef_ = value;
      }
    }

    /// <summary>Field number for the "module_name" field.</summary>
    public const int ModuleNameFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName moduleName_;
    /// <summary>
    /// module name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName ModuleName {
      get { return moduleName_; }
      set {
        moduleName_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModuleRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModuleRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PackageRef, other.PackageRef)) return false;
      if (!object.Equals(ModuleName, other.ModuleName)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (packageRef_ != null) hash ^= PackageRef.GetHashCode();
      if (moduleName_ != null) hash ^= ModuleName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (packageRef_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PackageRef);
      }
      if (moduleName_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ModuleName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (packageRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PackageRef);
      }
      if (moduleName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModuleName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModuleRef other) {
      if (other == null) {
        return;
      }
      if (other.packageRef_ != null) {
        if (packageRef_ == null) {
          PackageRef = new global::Com.DigitalAsset.Daml_lf.DamlLf1.PackageRef();
        }
        PackageRef.MergeFrom(other.PackageRef);
      }
      if (other.moduleName_ != null) {
        if (moduleName_ == null) {
          ModuleName = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName();
        }
        ModuleName.MergeFrom(other.ModuleName);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (packageRef_ == null) {
              PackageRef = new global::Com.DigitalAsset.Daml_lf.DamlLf1.PackageRef();
            }
            input.ReadMessage(PackageRef);
            break;
          }
          case 18: {
            if (moduleName_ == null) {
              ModuleName = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName();
            }
            input.ReadMessage(ModuleName);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A fully qualified reference to a type constructor name.
  /// </summary>
  public sealed partial class TypeConName : pb::IMessage<TypeConName> {
    private static readonly pb::MessageParser<TypeConName> _parser = new pb::MessageParser<TypeConName>(() => new TypeConName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeConName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeConName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeConName(TypeConName other) : this() {
      module_ = other.module_ != null ? other.module_.Clone() : null;
      name_ = other.name_ != null ? other.name_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeConName Clone() {
      return new TypeConName(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef module_;
    /// <summary>
    /// Module where the type is defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef Module {
      get { return module_; }
      set {
        module_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName name_;
    /// <summary>
    /// type constructor name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeConName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeConName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Module, other.Module)) return false;
      if (!object.Equals(Name, other.Name)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (module_ != null) hash ^= Module.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (module_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Module);
      }
      if (name_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (module_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Module);
      }
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeConName other) {
      if (other == null) {
        return;
      }
      if (other.module_ != null) {
        if (module_ == null) {
          Module = new global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef();
        }
        Module.MergeFrom(other.Module);
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName();
        }
        Name.MergeFrom(other.Name);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (module_ == null) {
              Module = new global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef();
            }
            input.ReadMessage(Module);
            break;
          }
          case 18: {
            if (name_ == null) {
              Name = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName();
            }
            input.ReadMessage(Name);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A fully qualified reference to a value definition.
  /// </summary>
  public sealed partial class ValName : pb::IMessage<ValName> {
    private static readonly pb::MessageParser<ValName> _parser = new pb::MessageParser<ValName>(() => new ValName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValName(ValName other) : this() {
      module_ = other.module_ != null ? other.module_.Clone() : null;
      name_ = other.name_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValName Clone() {
      return new ValName(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef module_;
    /// <summary>
    /// Module where the value is defined
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef Module {
      get { return module_; }
      set {
        module_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_name_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> name_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// value name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Name {
      get { return name_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Module, other.Module)) return false;
      if(!name_.Equals(other.name_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (module_ != null) hash ^= Module.GetHashCode();
      hash ^= name_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (module_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Module);
      }
      name_.WriteTo(output, _repeated_name_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (module_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Module);
      }
      size += name_.CalculateSize(_repeated_name_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValName other) {
      if (other == null) {
        return;
      }
      if (other.module_ != null) {
        if (module_ == null) {
          Module = new global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef();
        }
        Module.MergeFrom(other.Module);
      }
      name_.Add(other.name_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (module_ == null) {
              Module = new global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef();
            }
            input.ReadMessage(Module);
            break;
          }
          case 18: {
            name_.AddEntriesFrom(input, _repeated_name_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A field name definition in a record or a variant associated with a type.
  /// </summary>
  public sealed partial class FieldWithType : pb::IMessage<FieldWithType> {
    private static readonly pb::MessageParser<FieldWithType> _parser = new pb::MessageParser<FieldWithType>(() => new FieldWithType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldWithType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithType(FieldWithType other) : this() {
      field_ = other.field_;
      type_ = other.type_ != null ? other.type_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithType Clone() {
      return new FieldWithType(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 1;
    private string field_ = "";
    /// <summary>
    /// Name of the field .
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Field {
      get { return field_; }
      set {
        field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
    /// <summary>
    /// Type associated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldWithType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldWithType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Field != other.Field) return false;
      if (!object.Equals(Type, other.Type)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Field.Length != 0) hash ^= Field.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Field.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Field);
      }
      if (type_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Field.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldWithType other) {
      if (other == null) {
        return;
      }
      if (other.Field.Length != 0) {
        Field = other.Field;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
        }
        Type.MergeFrom(other.Type);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Field = input.ReadString();
            break;
          }
          case 18: {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            input.ReadMessage(Type);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Binder associated with a type.
  /// </summary>
  public sealed partial class VarWithType : pb::IMessage<VarWithType> {
    private static readonly pb::MessageParser<VarWithType> _parser = new pb::MessageParser<VarWithType>(() => new VarWithType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VarWithType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarWithType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarWithType(VarWithType other) : this() {
      var_ = other.var_;
      type_ = other.type_ != null ? other.type_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarWithType Clone() {
      return new VarWithType(this);
    }

    /// <summary>Field number for the "var" field.</summary>
    public const int VarFieldNumber = 1;
    private string var_ = "";
    /// <summary>
    /// Name of the bound expression variable.
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Var {
      get { return var_; }
      set {
        var_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
    /// <summary>
    /// Type of the bound variable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VarWithType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VarWithType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Var != other.Var) return false;
      if (!object.Equals(Type, other.Type)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Var.Length != 0) hash ^= Var.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Var.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Var);
      }
      if (type_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Var.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Var);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VarWithType other) {
      if (other == null) {
        return;
      }
      if (other.Var.Length != 0) {
        Var = other.Var;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
        }
        Type.MergeFrom(other.Type);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Var = input.ReadString();
            break;
          }
          case 18: {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            input.ReadMessage(Type);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Type binder associated with a kind.
  /// </summary>
  public sealed partial class TypeVarWithKind : pb::IMessage<TypeVarWithKind> {
    private static readonly pb::MessageParser<TypeVarWithKind> _parser = new pb::MessageParser<TypeVarWithKind>(() => new TypeVarWithKind());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeVarWithKind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeVarWithKind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeVarWithKind(TypeVarWithKind other) : this() {
      var_ = other.var_;
      kind_ = other.kind_ != null ? other.kind_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeVarWithKind Clone() {
      return new TypeVarWithKind(this);
    }

    /// <summary>Field number for the "var" field.</summary>
    public const int VarFieldNumber = 1;
    private string var_ = "";
    /// <summary>
    /// Name of the bound expression variable
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Var {
      get { return var_; }
      set {
        var_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind kind_;
    /// <summary>
    /// Kind of the bound variable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeVarWithKind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeVarWithKind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Var != other.Var) return false;
      if (!object.Equals(Kind, other.Kind)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Var.Length != 0) hash ^= Var.GetHashCode();
      if (kind_ != null) hash ^= Kind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Var.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Var);
      }
      if (kind_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Var.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Var);
      }
      if (kind_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeVarWithKind other) {
      if (other == null) {
        return;
      }
      if (other.Var.Length != 0) {
        Var = other.Var;
      }
      if (other.kind_ != null) {
        if (kind_ == null) {
          Kind = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind();
        }
        Kind.MergeFrom(other.Kind);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Var = input.ReadString();
            break;
          }
          case 18: {
            if (kind_ == null) {
              Kind = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind();
            }
            input.ReadMessage(Kind);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A field in a record with its value.
  /// </summary>
  public sealed partial class FieldWithExpr : pb::IMessage<FieldWithExpr> {
    private static readonly pb::MessageParser<FieldWithExpr> _parser = new pb::MessageParser<FieldWithExpr>(() => new FieldWithExpr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldWithExpr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithExpr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithExpr(FieldWithExpr other) : this() {
      field_ = other.field_;
      expr_ = other.expr_ != null ? other.expr_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithExpr Clone() {
      return new FieldWithExpr(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 1;
    private string field_ = "";
    /// <summary>
    /// Name of the field
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Field {
      get { return field_; }
      set {
        field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expr" field.</summary>
    public const int ExprFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr expr_;
    /// <summary>
    /// Value of the field
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Expr {
      get { return expr_; }
      set {
        expr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldWithExpr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldWithExpr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Field != other.Field) return false;
      if (!object.Equals(Expr, other.Expr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Field.Length != 0) hash ^= Field.GetHashCode();
      if (expr_ != null) hash ^= Expr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Field.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Field);
      }
      if (expr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Field.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
      }
      if (expr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldWithExpr other) {
      if (other == null) {
        return;
      }
      if (other.Field.Length != 0) {
        Field = other.Field;
      }
      if (other.expr_ != null) {
        if (expr_ == null) {
          Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Expr.MergeFrom(other.Expr);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Field = input.ReadString();
            break;
          }
          case 18: {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Expr);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A binding of a typed binder to an expression
  /// </summary>
  public sealed partial class Binding : pb::IMessage<Binding> {
    private static readonly pb::MessageParser<Binding> _parser = new pb::MessageParser<Binding>(() => new Binding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Binding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Binding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Binding(Binding other) : this() {
      binder_ = other.binder_ != null ? other.binder_.Clone() : null;
      bound_ = other.bound_ != null ? other.bound_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Binding Clone() {
      return new Binding(this);
    }

    /// <summary>Field number for the "binder" field.</summary>
    public const int BinderFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType binder_;
    /// <summary>
    /// The binder (expression variable and type)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType Binder {
      get { return binder_; }
      set {
        binder_ = value;
      }
    }

    /// <summary>Field number for the "bound" field.</summary>
    public const int BoundFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr bound_;
    /// <summary>
    /// The value to which the variable is bound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Bound {
      get { return bound_; }
      set {
        bound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Binding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Binding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Binder, other.Binder)) return false;
      if (!object.Equals(Bound, other.Bound)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (binder_ != null) hash ^= Binder.GetHashCode();
      if (bound_ != null) hash ^= Bound.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (binder_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Binder);
      }
      if (bound_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (binder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Binder);
      }
      if (bound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bound);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Binding other) {
      if (other == null) {
        return;
      }
      if (other.binder_ != null) {
        if (binder_ == null) {
          Binder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType();
        }
        Binder.MergeFrom(other.Binder);
      }
      if (other.bound_ != null) {
        if (bound_ == null) {
          Bound = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Bound.MergeFrom(other.Bound);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (binder_ == null) {
              Binder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType();
            }
            input.ReadMessage(Binder);
            break;
          }
          case 18: {
            if (bound_ == null) {
              Bound = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Bound);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Kinds
  /// </summary>
  public sealed partial class Kind : pb::IMessage<Kind> {
    private static readonly pb::MessageParser<Kind> _parser = new pb::MessageParser<Kind>(() => new Kind());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kind(Kind other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Star:
          Star = other.Star.Clone();
          break;
        case SumOneofCase.Arrow:
          Arrow = other.Arrow.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kind Clone() {
      return new Kind(this);
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 1;
    /// <summary>
    /// Kind of monomorphic type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit Star {
      get { return sumCase_ == SumOneofCase.Star ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Star;
      }
    }

    /// <summary>Field number for the "arrow" field.</summary>
    public const int ArrowFieldNumber = 2;
    /// <summary>
    /// King of polymorphic type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind.Types.Arrow Arrow {
      get { return sumCase_ == SumOneofCase.Arrow ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind.Types.Arrow) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Arrow;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Star = 1,
      Arrow = 2,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Star, other.Star)) return false;
      if (!object.Equals(Arrow, other.Arrow)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Star) hash ^= Star.GetHashCode();
      if (sumCase_ == SumOneofCase.Arrow) hash ^= Arrow.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Star) {
        output.WriteRawTag(10);
        output.WriteMessage(Star);
      }
      if (sumCase_ == SumOneofCase.Arrow) {
        output.WriteRawTag(18);
        output.WriteMessage(Arrow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Star) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Star);
      }
      if (sumCase_ == SumOneofCase.Arrow) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arrow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kind other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Star:
          if (Star == null) {
            Star = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
          }
          Star.MergeFrom(other.Star);
          break;
        case SumOneofCase.Arrow:
          if (Arrow == null) {
            Arrow = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind.Types.Arrow();
          }
          Arrow.MergeFrom(other.Arrow);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.Star) {
              subBuilder.MergeFrom(Star);
            }
            input.ReadMessage(subBuilder);
            Star = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind.Types.Arrow subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind.Types.Arrow();
            if (sumCase_ == SumOneofCase.Arrow) {
              subBuilder.MergeFrom(Arrow);
            }
            input.ReadMessage(subBuilder);
            Arrow = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Kind message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The kind of polimorphic type.
      /// </summary>
      public sealed partial class Arrow : pb::IMessage<Arrow> {
        private static readonly pb::MessageParser<Arrow> _parser = new pb::MessageParser<Arrow>(() => new Arrow());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Arrow> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Arrow() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Arrow(Arrow other) : this() {
          params_ = other.params_.Clone();
          result_ = other.result_ != null ? other.result_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Arrow Clone() {
          return new Arrow(this);
        }

        /// <summary>Field number for the "params" field.</summary>
        public const int ParamsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind> _repeated_params_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind> params_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind>();
        /// <summary>
        /// parameter of the kind
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind> Params {
          get { return params_; }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind result_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind Result {
          get { return result_; }
          set {
            result_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Arrow);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Arrow other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!params_.Equals(other.params_)) return false;
          if (!object.Equals(Result, other.Result)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= params_.GetHashCode();
          if (result_ != null) hash ^= Result.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          params_.WriteTo(output, _repeated_params_codec);
          if (result_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Result);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += params_.CalculateSize(_repeated_params_codec);
          if (result_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Arrow other) {
          if (other == null) {
            return;
          }
          params_.Add(other.params_);
          if (other.result_ != null) {
            if (result_ == null) {
              Result = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind();
            }
            Result.MergeFrom(other.Result);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                params_.AddEntriesFrom(input, _repeated_params_codec);
                break;
              }
              case 18: {
                if (result_ == null) {
                  Result = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Kind();
                }
                input.ReadMessage(Result);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Types
  /// </summary>
  public sealed partial class Type : pb::IMessage<Type> {
    private static readonly pb::MessageParser<Type> _parser = new pb::MessageParser<Type>(() => new Type());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Type> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type(Type other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Var:
          Var = other.Var.Clone();
          break;
        case SumOneofCase.Con:
          Con = other.Con.Clone();
          break;
        case SumOneofCase.Prim:
          Prim = other.Prim.Clone();
          break;
        case SumOneofCase.Fun:
          Fun = other.Fun.Clone();
          break;
        case SumOneofCase.Forall:
          Forall = other.Forall.Clone();
          break;
        case SumOneofCase.Tuple:
          Tuple = other.Tuple.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type Clone() {
      return new Type(this);
    }

    /// <summary>Field number for the "var" field.</summary>
    public const int VarFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Var Var {
      get { return sumCase_ == SumOneofCase.Var ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Var) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Var;
      }
    }

    /// <summary>Field number for the "con" field.</summary>
    public const int ConFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con Con {
      get { return sumCase_ == SumOneofCase.Con ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Con;
      }
    }

    /// <summary>Field number for the "prim" field.</summary>
    public const int PrimFieldNumber = 3;
    /// <summary>
    /// FixMe: renamed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Prim Prim {
      get { return sumCase_ == SumOneofCase.Prim ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Prim) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Prim;
      }
    }

    /// <summary>Field number for the "fun" field.</summary>
    public const int FunFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Fun Fun {
      get { return sumCase_ == SumOneofCase.Fun ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Fun) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Fun;
      }
    }

    /// <summary>Field number for the "forall" field.</summary>
    public const int ForallFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Forall Forall {
      get { return sumCase_ == SumOneofCase.Forall ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Forall) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Forall;
      }
    }

    /// <summary>Field number for the "tuple" field.</summary>
    public const int TupleFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Tuple Tuple {
      get { return sumCase_ == SumOneofCase.Tuple ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Tuple) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Tuple;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Var = 1,
      Con = 2,
      Prim = 3,
      Fun = 4,
      Forall = 5,
      Tuple = 7,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Type);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Type other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Var, other.Var)) return false;
      if (!object.Equals(Con, other.Con)) return false;
      if (!object.Equals(Prim, other.Prim)) return false;
      if (!object.Equals(Fun, other.Fun)) return false;
      if (!object.Equals(Forall, other.Forall)) return false;
      if (!object.Equals(Tuple, other.Tuple)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Var) hash ^= Var.GetHashCode();
      if (sumCase_ == SumOneofCase.Con) hash ^= Con.GetHashCode();
      if (sumCase_ == SumOneofCase.Prim) hash ^= Prim.GetHashCode();
      if (sumCase_ == SumOneofCase.Fun) hash ^= Fun.GetHashCode();
      if (sumCase_ == SumOneofCase.Forall) hash ^= Forall.GetHashCode();
      if (sumCase_ == SumOneofCase.Tuple) hash ^= Tuple.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Var) {
        output.WriteRawTag(10);
        output.WriteMessage(Var);
      }
      if (sumCase_ == SumOneofCase.Con) {
        output.WriteRawTag(18);
        output.WriteMessage(Con);
      }
      if (sumCase_ == SumOneofCase.Prim) {
        output.WriteRawTag(26);
        output.WriteMessage(Prim);
      }
      if (sumCase_ == SumOneofCase.Fun) {
        output.WriteRawTag(34);
        output.WriteMessage(Fun);
      }
      if (sumCase_ == SumOneofCase.Forall) {
        output.WriteRawTag(42);
        output.WriteMessage(Forall);
      }
      if (sumCase_ == SumOneofCase.Tuple) {
        output.WriteRawTag(58);
        output.WriteMessage(Tuple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Var) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Var);
      }
      if (sumCase_ == SumOneofCase.Con) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Con);
      }
      if (sumCase_ == SumOneofCase.Prim) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prim);
      }
      if (sumCase_ == SumOneofCase.Fun) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fun);
      }
      if (sumCase_ == SumOneofCase.Forall) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forall);
      }
      if (sumCase_ == SumOneofCase.Tuple) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tuple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Type other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Var:
          if (Var == null) {
            Var = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Var();
          }
          Var.MergeFrom(other.Var);
          break;
        case SumOneofCase.Con:
          if (Con == null) {
            Con = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
          }
          Con.MergeFrom(other.Con);
          break;
        case SumOneofCase.Prim:
          if (Prim == null) {
            Prim = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Prim();
          }
          Prim.MergeFrom(other.Prim);
          break;
        case SumOneofCase.Fun:
          if (Fun == null) {
            Fun = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Fun();
          }
          Fun.MergeFrom(other.Fun);
          break;
        case SumOneofCase.Forall:
          if (Forall == null) {
            Forall = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Forall();
          }
          Forall.MergeFrom(other.Forall);
          break;
        case SumOneofCase.Tuple:
          if (Tuple == null) {
            Tuple = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Tuple();
          }
          Tuple.MergeFrom(other.Tuple);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Var subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Var();
            if (sumCase_ == SumOneofCase.Var) {
              subBuilder.MergeFrom(Var);
            }
            input.ReadMessage(subBuilder);
            Var = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
            if (sumCase_ == SumOneofCase.Con) {
              subBuilder.MergeFrom(Con);
            }
            input.ReadMessage(subBuilder);
            Con = subBuilder;
            break;
          }
          case 26: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Prim subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Prim();
            if (sumCase_ == SumOneofCase.Prim) {
              subBuilder.MergeFrom(Prim);
            }
            input.ReadMessage(subBuilder);
            Prim = subBuilder;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Fun subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Fun();
            if (sumCase_ == SumOneofCase.Fun) {
              subBuilder.MergeFrom(Fun);
            }
            input.ReadMessage(subBuilder);
            Fun = subBuilder;
            break;
          }
          case 42: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Forall subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Forall();
            if (sumCase_ == SumOneofCase.Forall) {
              subBuilder.MergeFrom(Forall);
            }
            input.ReadMessage(subBuilder);
            Forall = subBuilder;
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Tuple subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Tuple();
            if (sumCase_ == SumOneofCase.Tuple) {
              subBuilder.MergeFrom(Tuple);
            }
            input.ReadMessage(subBuilder);
            Tuple = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Type message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Possibly applied type variable 'TyVar'
      /// </summary>
      public sealed partial class Var : pb::IMessage<Var> {
        private static readonly pb::MessageParser<Var> _parser = new pb::MessageParser<Var>(() => new Var());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Var> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var(Var other) : this() {
          var_ = other.var_;
          args_ = other.args_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var Clone() {
          return new Var(this);
        }

        /// <summary>Field number for the "var" field.</summary>
        public const int Var_FieldNumber = 1;
        private string var_ = "";
        /// <summary>
        /// Name of the variable.
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Var_ {
          get { return var_; }
          set {
            var_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> _repeated_args_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> args_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type>();
        /// <summary>
        /// Types to which the variable is applied
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> Args {
          get { return args_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Var);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Var other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Var_ != other.Var_) return false;
          if(!args_.Equals(other.args_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Var_.Length != 0) hash ^= Var_.GetHashCode();
          hash ^= args_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Var_.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Var_);
          }
          args_.WriteTo(output, _repeated_args_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Var_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Var_);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Var other) {
          if (other == null) {
            return;
          }
          if (other.Var_.Length != 0) {
            Var_ = other.Var_;
          }
          args_.Add(other.args_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Var_ = input.ReadString();
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Possibly applied type constructor 'TyCon'
      /// </summary>
      public sealed partial class Con : pb::IMessage<Con> {
        private static readonly pb::MessageParser<Con> _parser = new pb::MessageParser<Con>(() => new Con());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Con> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Con() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Con(Con other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          args_ = other.args_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Con Clone() {
          return new Con(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName tycon_;
        /// <summary>
        /// Name of the type constructor name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> _repeated_args_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> args_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type>();
        /// <summary>
        /// Type to which the constructor name is applied.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> Args {
          get { return args_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Con);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Con other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if(!args_.Equals(other.args_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          hash ^= args_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          args_.WriteTo(output, _repeated_args_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Con other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          args_.Add(other.args_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Possibly applied builtin types
      /// </summary>
      public sealed partial class Prim : pb::IMessage<Prim> {
        private static readonly pb::MessageParser<Prim> _parser = new pb::MessageParser<Prim>(() => new Prim());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Prim> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prim() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prim(Prim other) : this() {
          prim_ = other.prim_;
          args_ = other.args_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prim Clone() {
          return new Prim(this);
        }

        /// <summary>Field number for the "prim" field.</summary>
        public const int Prim_FieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimType prim_ = 0;
        /// <summary>
        /// Builtin type
        /// FixMe: Rename
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimType Prim_ {
          get { return prim_; }
          set {
            prim_ = value;
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> _repeated_args_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> args_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type>();
        /// <summary>
        /// Types to which the builtin type is applied.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> Args {
          get { return args_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Prim);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Prim other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Prim_ != other.Prim_) return false;
          if(!args_.Equals(other.args_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Prim_ != 0) hash ^= Prim_.GetHashCode();
          hash ^= args_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Prim_ != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Prim_);
          }
          args_.WriteTo(output, _repeated_args_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Prim_ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Prim_);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Prim other) {
          if (other == null) {
            return;
          }
          if (other.Prim_ != 0) {
            Prim_ = other.Prim_;
          }
          args_.Add(other.args_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Prim_ = (global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimType) input.ReadEnum();
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// n-ary function type
      /// *Available until version 1.2*
      /// </summary>
      public sealed partial class Fun : pb::IMessage<Fun> {
        private static readonly pb::MessageParser<Fun> _parser = new pb::MessageParser<Fun>(() => new Fun());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Fun> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fun() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fun(Fun other) : this() {
          params_ = other.params_.Clone();
          result_ = other.result_ != null ? other.result_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fun Clone() {
          return new Fun(this);
        }

        /// <summary>Field number for the "params" field.</summary>
        public const int ParamsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> _repeated_params_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> params_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type>();
        /// <summary>
        /// type of the arguments
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> Params {
          get { return params_; }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type result_;
        /// <summary>
        /// type of the result
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Result {
          get { return result_; }
          set {
            result_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Fun);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Fun other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!params_.Equals(other.params_)) return false;
          if (!object.Equals(Result, other.Result)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= params_.GetHashCode();
          if (result_ != null) hash ^= Result.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          params_.WriteTo(output, _repeated_params_codec);
          if (result_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Result);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += params_.CalculateSize(_repeated_params_codec);
          if (result_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Fun other) {
          if (other == null) {
            return;
          }
          params_.Add(other.params_);
          if (other.result_ != null) {
            if (result_ == null) {
              Result = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            Result.MergeFrom(other.Result);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                params_.AddEntriesFrom(input, _repeated_params_codec);
                break;
              }
              case 18: {
                if (result_ == null) {
                  Result = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(Result);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Universal quantification 'TyForAll'
      /// </summary>
      public sealed partial class Forall : pb::IMessage<Forall> {
        private static readonly pb::MessageParser<Forall> _parser = new pb::MessageParser<Forall>(() => new Forall());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Forall> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Forall() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Forall(Forall other) : this() {
          vars_ = other.vars_.Clone();
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Forall Clone() {
          return new Forall(this);
        }

        /// <summary>Field number for the "vars" field.</summary>
        public const int VarsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind> _repeated_vars_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind> vars_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind>();
        /// <summary>
        /// binders of the quantification
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind> Vars {
          get { return vars_; }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type body_;
        /// <summary>
        /// Body of the quantification
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Forall);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Forall other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!vars_.Equals(other.vars_)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= vars_.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          vars_.WriteTo(output, _repeated_vars_codec);
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += vars_.CalculateSize(_repeated_vars_codec);
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Forall other) {
          if (other == null) {
            return;
          }
          vars_.Add(other.vars_);
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                vars_.AddEntriesFrom(input, _repeated_vars_codec);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Tuple type
      /// </summary>
      public sealed partial class Tuple : pb::IMessage<Tuple> {
        private static readonly pb::MessageParser<Tuple> _parser = new pb::MessageParser<Tuple>(() => new Tuple());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tuple> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple(Tuple other) : this() {
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple Clone() {
          return new Tuple(this);
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType> fields_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType>();
        /// <summary>
        /// name of the field with their types.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tuple);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tuple other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tuple other) {
          if (other == null) {
            return;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Builtin literals
  /// FixMe: Renamed
  /// </summary>
  public sealed partial class PrimLit : pb::IMessage<PrimLit> {
    private static readonly pb::MessageParser<PrimLit> _parser = new pb::MessageParser<PrimLit>(() => new PrimLit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimLit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimLit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimLit(PrimLit other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Int64:
          Int64 = other.Int64;
          break;
        case SumOneofCase.Decimal:
          Decimal = other.Decimal;
          break;
        case SumOneofCase.Text:
          Text = other.Text;
          break;
        case SumOneofCase.Timestamp:
          Timestamp = other.Timestamp;
          break;
        case SumOneofCase.Party:
          Party = other.Party;
          break;
        case SumOneofCase.Date:
          Date = other.Date;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimLit Clone() {
      return new PrimLit(this);
    }

    /// <summary>Field number for the "int64" field.</summary>
    public const int Int64FieldNumber = 1;
    /// <summary>
    ///  64-bit integer literal ('LitInt64')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64 {
      get { return sumCase_ == SumOneofCase.Int64 ? (long) sum_ : 0L; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.Int64;
      }
    }

    /// <summary>Field number for the "decimal" field.</summary>
    public const int DecimalFieldNumber = 2;
    /// <summary>
    /// Decimal literal ('LitDecimal')
    ///
    /// Serialization of number in ``[-1E28, 1E28]``
    /// with at most 10 digits of decimal precision.
    ///
    /// *Must be a string that matched
    ///        `[+-]*[0-9]{0,28}(\.[0-9]{0,10})*`*
    ///
    /// It would fit in an int128, but sadly protobuf does not have
    /// one. so, string it is. note that we can't store the whole and
    /// decimal part in two numbers either, because 10^28 > 2^63.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Decimal {
      get { return sumCase_ == SumOneofCase.Decimal ? (string) sum_ : ""; }
      set {
        sum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sumCase_ = SumOneofCase.Decimal;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    /// <summary>
    /// Unicode string literal ('LitText')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return sumCase_ == SumOneofCase.Text ? (string) sum_ : ""; }
      set {
        sum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sumCase_ = SumOneofCase.Text;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    /// <summary>
    /// sfixed since the vast majority of values will be greater than
    /// 2^28, since currently the number of microseconds since the
    /// epoch is greater than that.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return sumCase_ == SumOneofCase.Timestamp ? (long) sum_ : 0L; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.Timestamp;
      }
    }

    /// <summary>Field number for the "party" field.</summary>
    public const int PartyFieldNumber = 7;
    /// <summary>
    /// Party literal ('LitParty')
    /// *Must be a PartyId string*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Party {
      get { return sumCase_ == SumOneofCase.Party ? (string) sum_ : ""; }
      set {
        sum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sumCase_ = SumOneofCase.Party;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 8;
    /// <summary>
    /// Date literal ('Date')
    /// Serialization of the number of days since the unix epoch. can go backwards.
    ///
    /// *Must be in range '0001-01-01' to '9999-12-31'*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Date {
      get { return sumCase_ == SumOneofCase.Date ? (int) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.Date;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Int64 = 1,
      Decimal = 2,
      Text = 4,
      Timestamp = 5,
      Party = 7,
      Date = 8,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimLit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimLit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Int64 != other.Int64) return false;
      if (Decimal != other.Decimal) return false;
      if (Text != other.Text) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Party != other.Party) return false;
      if (Date != other.Date) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Int64) hash ^= Int64.GetHashCode();
      if (sumCase_ == SumOneofCase.Decimal) hash ^= Decimal.GetHashCode();
      if (sumCase_ == SumOneofCase.Text) hash ^= Text.GetHashCode();
      if (sumCase_ == SumOneofCase.Timestamp) hash ^= Timestamp.GetHashCode();
      if (sumCase_ == SumOneofCase.Party) hash ^= Party.GetHashCode();
      if (sumCase_ == SumOneofCase.Date) hash ^= Date.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Int64) {
        output.WriteRawTag(8);
        output.WriteSInt64(Int64);
      }
      if (sumCase_ == SumOneofCase.Decimal) {
        output.WriteRawTag(18);
        output.WriteString(Decimal);
      }
      if (sumCase_ == SumOneofCase.Text) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      if (sumCase_ == SumOneofCase.Timestamp) {
        output.WriteRawTag(41);
        output.WriteSFixed64(Timestamp);
      }
      if (sumCase_ == SumOneofCase.Party) {
        output.WriteRawTag(58);
        output.WriteString(Party);
      }
      if (sumCase_ == SumOneofCase.Date) {
        output.WriteRawTag(64);
        output.WriteInt32(Date);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Int64) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Int64);
      }
      if (sumCase_ == SumOneofCase.Decimal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Decimal);
      }
      if (sumCase_ == SumOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (sumCase_ == SumOneofCase.Timestamp) {
        size += 1 + 8;
      }
      if (sumCase_ == SumOneofCase.Party) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Party);
      }
      if (sumCase_ == SumOneofCase.Date) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Date);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimLit other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Int64:
          Int64 = other.Int64;
          break;
        case SumOneofCase.Decimal:
          Decimal = other.Decimal;
          break;
        case SumOneofCase.Text:
          Text = other.Text;
          break;
        case SumOneofCase.Timestamp:
          Timestamp = other.Timestamp;
          break;
        case SumOneofCase.Party:
          Party = other.Party;
          break;
        case SumOneofCase.Date:
          Date = other.Date;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Int64 = input.ReadSInt64();
            break;
          }
          case 18: {
            Decimal = input.ReadString();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
          case 41: {
            Timestamp = input.ReadSFixed64();
            break;
          }
          case 58: {
            Party = input.ReadString();
            break;
          }
          case 64: {
            Date = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Source code locations
  /// </summary>
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      module_ = other.module_ != null ? other.module_.Clone() : null;
      range_ = other.range_ != null ? other.range_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef module_;
    /// <summary>
    /// (*optional*), if missing the line is within the current module.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef Module {
      get { return module_; }
      set {
        module_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Location.Types.Range range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Location.Types.Range Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Module, other.Module)) return false;
      if (!object.Equals(Range, other.Range)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (module_ != null) hash ^= Module.GetHashCode();
      if (range_ != null) hash ^= Range.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (module_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Module);
      }
      if (range_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Range);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (module_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Module);
      }
      if (range_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.module_ != null) {
        if (module_ == null) {
          Module = new global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef();
        }
        Module.MergeFrom(other.Module);
      }
      if (other.range_ != null) {
        if (range_ == null) {
          Range = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location.Types.Range();
        }
        Range.MergeFrom(other.Range);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (module_ == null) {
              Module = new global::Com.DigitalAsset.Daml_lf.DamlLf1.ModuleRef();
            }
            input.ReadMessage(Module);
            break;
          }
          case 18: {
            if (range_ == null) {
              Range = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location.Types.Range();
            }
            input.ReadMessage(Range);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Location message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 0-indexed start and end line and column numbers.
      /// </summary>
      public sealed partial class Range : pb::IMessage<Range> {
        private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Range> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Location.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range(Range other) : this() {
          startLine_ = other.startLine_;
          startCol_ = other.startCol_;
          endLine_ = other.endLine_;
          endCol_ = other.endCol_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range Clone() {
          return new Range(this);
        }

        /// <summary>Field number for the "start_line" field.</summary>
        public const int StartLineFieldNumber = 1;
        private int startLine_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int StartLine {
          get { return startLine_; }
          set {
            startLine_ = value;
          }
        }

        /// <summary>Field number for the "start_col" field.</summary>
        public const int StartColFieldNumber = 2;
        private int startCol_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int StartCol {
          get { return startCol_; }
          set {
            startCol_ = value;
          }
        }

        /// <summary>Field number for the "end_line" field.</summary>
        public const int EndLineFieldNumber = 3;
        private int endLine_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EndLine {
          get { return endLine_; }
          set {
            endLine_ = value;
          }
        }

        /// <summary>Field number for the "end_col" field.</summary>
        public const int EndColFieldNumber = 4;
        private int endCol_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EndCol {
          get { return endCol_; }
          set {
            endCol_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Range);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Range other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StartLine != other.StartLine) return false;
          if (StartCol != other.StartCol) return false;
          if (EndLine != other.EndLine) return false;
          if (EndCol != other.EndCol) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StartLine != 0) hash ^= StartLine.GetHashCode();
          if (StartCol != 0) hash ^= StartCol.GetHashCode();
          if (EndLine != 0) hash ^= EndLine.GetHashCode();
          if (EndCol != 0) hash ^= EndCol.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StartLine != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(StartLine);
          }
          if (StartCol != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(StartCol);
          }
          if (EndLine != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(EndLine);
          }
          if (EndCol != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(EndCol);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StartLine != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartLine);
          }
          if (StartCol != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartCol);
          }
          if (EndLine != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndLine);
          }
          if (EndCol != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndCol);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Range other) {
          if (other == null) {
            return;
          }
          if (other.StartLine != 0) {
            StartLine = other.StartLine;
          }
          if (other.StartCol != 0) {
            StartCol = other.StartCol;
          }
          if (other.EndLine != 0) {
            EndLine = other.EndLine;
          }
          if (other.EndCol != 0) {
            EndCol = other.EndCol;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                StartLine = input.ReadInt32();
                break;
              }
              case 16: {
                StartCol = input.ReadInt32();
                break;
              }
              case 24: {
                EndLine = input.ReadInt32();
                break;
              }
              case 32: {
                EndCol = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Expressions
  /// </summary>
  public sealed partial class Expr : pb::IMessage<Expr> {
    private static readonly pb::MessageParser<Expr> _parser = new pb::MessageParser<Expr>(() => new Expr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Expr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expr(Expr other) : this() {
      location_ = other.location_ != null ? other.location_.Clone() : null;
      switch (other.SumCase) {
        case SumOneofCase.Var:
          Var = other.Var;
          break;
        case SumOneofCase.Val:
          Val = other.Val.Clone();
          break;
        case SumOneofCase.Builtin:
          Builtin = other.Builtin;
          break;
        case SumOneofCase.PrimCon:
          PrimCon = other.PrimCon;
          break;
        case SumOneofCase.PrimLit:
          PrimLit = other.PrimLit.Clone();
          break;
        case SumOneofCase.RecCon:
          RecCon = other.RecCon.Clone();
          break;
        case SumOneofCase.RecProj:
          RecProj = other.RecProj.Clone();
          break;
        case SumOneofCase.RecUpd:
          RecUpd = other.RecUpd.Clone();
          break;
        case SumOneofCase.VariantCon:
          VariantCon = other.VariantCon.Clone();
          break;
        case SumOneofCase.EnumCon:
          EnumCon = other.EnumCon.Clone();
          break;
        case SumOneofCase.TupleCon:
          TupleCon = other.TupleCon.Clone();
          break;
        case SumOneofCase.TupleProj:
          TupleProj = other.TupleProj.Clone();
          break;
        case SumOneofCase.TupleUpd:
          TupleUpd = other.TupleUpd.Clone();
          break;
        case SumOneofCase.App:
          App = other.App.Clone();
          break;
        case SumOneofCase.TyApp:
          TyApp = other.TyApp.Clone();
          break;
        case SumOneofCase.Abs:
          Abs = other.Abs.Clone();
          break;
        case SumOneofCase.TyAbs:
          TyAbs = other.TyAbs.Clone();
          break;
        case SumOneofCase.Case:
          Case = other.Case.Clone();
          break;
        case SumOneofCase.Let:
          Let = other.Let.Clone();
          break;
        case SumOneofCase.Nil:
          Nil = other.Nil.Clone();
          break;
        case SumOneofCase.Cons:
          Cons = other.Cons.Clone();
          break;
        case SumOneofCase.Update:
          Update = other.Update.Clone();
          break;
        case SumOneofCase.Scenario:
          Scenario = other.Scenario.Clone();
          break;
        case SumOneofCase.OptionalNone:
          OptionalNone = other.OptionalNone.Clone();
          break;
        case SumOneofCase.OptionalSome:
          OptionalSome = other.OptionalSome.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expr Clone() {
      return new Expr(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 25;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Location location_;
    /// <summary>
    /// Location of the expression in the DAML code source.
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "var" field.</summary>
    public const int VarFieldNumber = 1;
    /// <summary>
    /// Expression variable ('ExpVar')
    /// *must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Var {
      get { return sumCase_ == SumOneofCase.Var ? (string) sum_ : ""; }
      set {
        sum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sumCase_ = SumOneofCase.Var;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 2;
    /// <summary>
    /// Defined value ('ExpVal')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.ValName Val {
      get { return sumCase_ == SumOneofCase.Val ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.ValName) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Val;
      }
    }

    /// <summary>Field number for the "builtin" field.</summary>
    public const int BuiltinFieldNumber = 3;
    /// <summary>
    /// Builtin function ('ExpBuiltin')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.BuiltinFunction Builtin {
      get { return sumCase_ == SumOneofCase.Builtin ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.BuiltinFunction) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.Builtin;
      }
    }

    /// <summary>Field number for the "prim_con" field.</summary>
    public const int PrimConFieldNumber = 4;
    /// <summary>
    /// Primitive constructor ('()', 'False' or 'True')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimCon PrimCon {
      get { return sumCase_ == SumOneofCase.PrimCon ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimCon) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.PrimCon;
      }
    }

    /// <summary>Field number for the "prim_lit" field.</summary>
    public const int PrimLitFieldNumber = 5;
    /// <summary>
    /// Builtin literal ('ExpBuiltin')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimLit PrimLit {
      get { return sumCase_ == SumOneofCase.PrimLit ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimLit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.PrimLit;
      }
    }

    /// <summary>Field number for the "rec_con" field.</summary>
    public const int RecConFieldNumber = 6;
    /// <summary>
    /// Record construction ('ExpRecCon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecCon RecCon {
      get { return sumCase_ == SumOneofCase.RecCon ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecCon) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.RecCon;
      }
    }

    /// <summary>Field number for the "rec_proj" field.</summary>
    public const int RecProjFieldNumber = 7;
    /// <summary>
    /// Record projection ('ExpRecProj')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecProj RecProj {
      get { return sumCase_ == SumOneofCase.RecProj ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecProj) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.RecProj;
      }
    }

    /// <summary>Field number for the "rec_upd" field.</summary>
    public const int RecUpdFieldNumber = 22;
    /// <summary>
    /// Record udpate ('ExpRecUpdate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecUpd RecUpd {
      get { return sumCase_ == SumOneofCase.RecUpd ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecUpd) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.RecUpd;
      }
    }

    /// <summary>Field number for the "variant_con" field.</summary>
    public const int VariantConFieldNumber = 8;
    /// <summary>
    /// Variant construction ('ExpVariantCon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.VariantCon VariantCon {
      get { return sumCase_ == SumOneofCase.VariantCon ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.VariantCon) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.VariantCon;
      }
    }

    /// <summary>Field number for the "enum_con" field.</summary>
    public const int EnumConFieldNumber = 28;
    /// <summary>
    /// Enum construction ('ExpEnumCon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.EnumCon EnumCon {
      get { return sumCase_ == SumOneofCase.EnumCon ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.EnumCon) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.EnumCon;
      }
    }

    /// <summary>Field number for the "tuple_con" field.</summary>
    public const int TupleConFieldNumber = 9;
    /// <summary>
    /// Tuple construction ('ExpTupleCon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleCon TupleCon {
      get { return sumCase_ == SumOneofCase.TupleCon ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleCon) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TupleCon;
      }
    }

    /// <summary>Field number for the "tuple_proj" field.</summary>
    public const int TupleProjFieldNumber = 10;
    /// <summary>
    /// Tuple project ('ExpTupleProj')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleProj TupleProj {
      get { return sumCase_ == SumOneofCase.TupleProj ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleProj) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TupleProj;
      }
    }

    /// <summary>Field number for the "tuple_upd" field.</summary>
    public const int TupleUpdFieldNumber = 23;
    /// <summary>
    /// Tuple update ('ExpTupleUpdate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleUpd TupleUpd {
      get { return sumCase_ == SumOneofCase.TupleUpd ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleUpd) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TupleUpd;
      }
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 11;
    /// <summary>
    /// Application ('ExpApp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.App App {
      get { return sumCase_ == SumOneofCase.App ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.App) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.App;
      }
    }

    /// <summary>Field number for the "ty_app" field.</summary>
    public const int TyAppFieldNumber = 12;
    /// <summary>
    /// Type Application ('ExpTyApp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyApp TyApp {
      get { return sumCase_ == SumOneofCase.TyApp ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyApp) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TyApp;
      }
    }

    /// <summary>Field number for the "abs" field.</summary>
    public const int AbsFieldNumber = 13;
    /// <summary>
    /// Abstraction ('ExpAbs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Abs Abs {
      get { return sumCase_ == SumOneofCase.Abs ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Abs) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Abs;
      }
    }

    /// <summary>Field number for the "ty_abs" field.</summary>
    public const int TyAbsFieldNumber = 14;
    /// <summary>
    /// Type Abstraction ('ExpTyAbs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyAbs TyAbs {
      get { return sumCase_ == SumOneofCase.TyAbs ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyAbs) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TyAbs;
      }
    }

    /// <summary>Field number for the "case" field.</summary>
    public const int CaseFieldNumber = 15;
    /// <summary>
    /// Pattern Matching ('ExpCase')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Case Case {
      get { return sumCase_ == SumOneofCase.Case ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Case) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Case;
      }
    }

    /// <summary>Field number for the "let" field.</summary>
    public const int LetFieldNumber = 16;
    /// <summary>
    /// Let block ('ExpLet')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Block Let {
      get { return sumCase_ == SumOneofCase.Let ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Block) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Let;
      }
    }

    /// <summary>Field number for the "nil" field.</summary>
    public const int NilFieldNumber = 17;
    /// <summary>
    /// Empty List ('ExpNil')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Nil Nil {
      get { return sumCase_ == SumOneofCase.Nil ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Nil) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Nil;
      }
    }

    /// <summary>Field number for the "cons" field.</summary>
    public const int ConsFieldNumber = 18;
    /// <summary>
    /// Non Empty list ('ExpCons')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Cons Cons {
      get { return sumCase_ == SumOneofCase.Cons ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Cons) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Cons;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 20;
    /// <summary>
    /// Update expression ('ExpUpdate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Update Update {
      get { return sumCase_ == SumOneofCase.Update ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Update) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Update;
      }
    }

    /// <summary>Field number for the "scenario" field.</summary>
    public const int ScenarioFieldNumber = 21;
    /// <summary>
    /// Scenario Expression ('ExpScenario')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario Scenario {
      get { return sumCase_ == SumOneofCase.Scenario ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Scenario;
      }
    }

    /// <summary>Field number for the "optional_none" field.</summary>
    public const int OptionalNoneFieldNumber = 26;
    /// <summary>
    /// empty optional value ('ExpNone')
    /// *Available since version 1.1*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalNone OptionalNone {
      get { return sumCase_ == SumOneofCase.OptionalNone ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalNone) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.OptionalNone;
      }
    }

    /// <summary>Field number for the "optional_some" field.</summary>
    public const int OptionalSomeFieldNumber = 27;
    /// <summary>
    /// non empty optional value ('ExpSome')
    /// *Available since version 1.1*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalSome OptionalSome {
      get { return sumCase_ == SumOneofCase.OptionalSome ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalSome) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.OptionalSome;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Var = 1,
      Val = 2,
      Builtin = 3,
      PrimCon = 4,
      PrimLit = 5,
      RecCon = 6,
      RecProj = 7,
      RecUpd = 22,
      VariantCon = 8,
      EnumCon = 28,
      TupleCon = 9,
      TupleProj = 10,
      TupleUpd = 23,
      App = 11,
      TyApp = 12,
      Abs = 13,
      TyAbs = 14,
      Case = 15,
      Let = 16,
      Nil = 17,
      Cons = 18,
      Update = 20,
      Scenario = 21,
      OptionalNone = 26,
      OptionalSome = 27,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Expr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Expr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (Var != other.Var) return false;
      if (!object.Equals(Val, other.Val)) return false;
      if (Builtin != other.Builtin) return false;
      if (PrimCon != other.PrimCon) return false;
      if (!object.Equals(PrimLit, other.PrimLit)) return false;
      if (!object.Equals(RecCon, other.RecCon)) return false;
      if (!object.Equals(RecProj, other.RecProj)) return false;
      if (!object.Equals(RecUpd, other.RecUpd)) return false;
      if (!object.Equals(VariantCon, other.VariantCon)) return false;
      if (!object.Equals(EnumCon, other.EnumCon)) return false;
      if (!object.Equals(TupleCon, other.TupleCon)) return false;
      if (!object.Equals(TupleProj, other.TupleProj)) return false;
      if (!object.Equals(TupleUpd, other.TupleUpd)) return false;
      if (!object.Equals(App, other.App)) return false;
      if (!object.Equals(TyApp, other.TyApp)) return false;
      if (!object.Equals(Abs, other.Abs)) return false;
      if (!object.Equals(TyAbs, other.TyAbs)) return false;
      if (!object.Equals(Case, other.Case)) return false;
      if (!object.Equals(Let, other.Let)) return false;
      if (!object.Equals(Nil, other.Nil)) return false;
      if (!object.Equals(Cons, other.Cons)) return false;
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(Scenario, other.Scenario)) return false;
      if (!object.Equals(OptionalNone, other.OptionalNone)) return false;
      if (!object.Equals(OptionalSome, other.OptionalSome)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (sumCase_ == SumOneofCase.Var) hash ^= Var.GetHashCode();
      if (sumCase_ == SumOneofCase.Val) hash ^= Val.GetHashCode();
      if (sumCase_ == SumOneofCase.Builtin) hash ^= Builtin.GetHashCode();
      if (sumCase_ == SumOneofCase.PrimCon) hash ^= PrimCon.GetHashCode();
      if (sumCase_ == SumOneofCase.PrimLit) hash ^= PrimLit.GetHashCode();
      if (sumCase_ == SumOneofCase.RecCon) hash ^= RecCon.GetHashCode();
      if (sumCase_ == SumOneofCase.RecProj) hash ^= RecProj.GetHashCode();
      if (sumCase_ == SumOneofCase.RecUpd) hash ^= RecUpd.GetHashCode();
      if (sumCase_ == SumOneofCase.VariantCon) hash ^= VariantCon.GetHashCode();
      if (sumCase_ == SumOneofCase.EnumCon) hash ^= EnumCon.GetHashCode();
      if (sumCase_ == SumOneofCase.TupleCon) hash ^= TupleCon.GetHashCode();
      if (sumCase_ == SumOneofCase.TupleProj) hash ^= TupleProj.GetHashCode();
      if (sumCase_ == SumOneofCase.TupleUpd) hash ^= TupleUpd.GetHashCode();
      if (sumCase_ == SumOneofCase.App) hash ^= App.GetHashCode();
      if (sumCase_ == SumOneofCase.TyApp) hash ^= TyApp.GetHashCode();
      if (sumCase_ == SumOneofCase.Abs) hash ^= Abs.GetHashCode();
      if (sumCase_ == SumOneofCase.TyAbs) hash ^= TyAbs.GetHashCode();
      if (sumCase_ == SumOneofCase.Case) hash ^= Case.GetHashCode();
      if (sumCase_ == SumOneofCase.Let) hash ^= Let.GetHashCode();
      if (sumCase_ == SumOneofCase.Nil) hash ^= Nil.GetHashCode();
      if (sumCase_ == SumOneofCase.Cons) hash ^= Cons.GetHashCode();
      if (sumCase_ == SumOneofCase.Update) hash ^= Update.GetHashCode();
      if (sumCase_ == SumOneofCase.Scenario) hash ^= Scenario.GetHashCode();
      if (sumCase_ == SumOneofCase.OptionalNone) hash ^= OptionalNone.GetHashCode();
      if (sumCase_ == SumOneofCase.OptionalSome) hash ^= OptionalSome.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Var) {
        output.WriteRawTag(10);
        output.WriteString(Var);
      }
      if (sumCase_ == SumOneofCase.Val) {
        output.WriteRawTag(18);
        output.WriteMessage(Val);
      }
      if (sumCase_ == SumOneofCase.Builtin) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Builtin);
      }
      if (sumCase_ == SumOneofCase.PrimCon) {
        output.WriteRawTag(32);
        output.WriteEnum((int) PrimCon);
      }
      if (sumCase_ == SumOneofCase.PrimLit) {
        output.WriteRawTag(42);
        output.WriteMessage(PrimLit);
      }
      if (sumCase_ == SumOneofCase.RecCon) {
        output.WriteRawTag(50);
        output.WriteMessage(RecCon);
      }
      if (sumCase_ == SumOneofCase.RecProj) {
        output.WriteRawTag(58);
        output.WriteMessage(RecProj);
      }
      if (sumCase_ == SumOneofCase.VariantCon) {
        output.WriteRawTag(66);
        output.WriteMessage(VariantCon);
      }
      if (sumCase_ == SumOneofCase.TupleCon) {
        output.WriteRawTag(74);
        output.WriteMessage(TupleCon);
      }
      if (sumCase_ == SumOneofCase.TupleProj) {
        output.WriteRawTag(82);
        output.WriteMessage(TupleProj);
      }
      if (sumCase_ == SumOneofCase.App) {
        output.WriteRawTag(90);
        output.WriteMessage(App);
      }
      if (sumCase_ == SumOneofCase.TyApp) {
        output.WriteRawTag(98);
        output.WriteMessage(TyApp);
      }
      if (sumCase_ == SumOneofCase.Abs) {
        output.WriteRawTag(106);
        output.WriteMessage(Abs);
      }
      if (sumCase_ == SumOneofCase.TyAbs) {
        output.WriteRawTag(114);
        output.WriteMessage(TyAbs);
      }
      if (sumCase_ == SumOneofCase.Case) {
        output.WriteRawTag(122);
        output.WriteMessage(Case);
      }
      if (sumCase_ == SumOneofCase.Let) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Let);
      }
      if (sumCase_ == SumOneofCase.Nil) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Nil);
      }
      if (sumCase_ == SumOneofCase.Cons) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Cons);
      }
      if (sumCase_ == SumOneofCase.Update) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Update);
      }
      if (sumCase_ == SumOneofCase.Scenario) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Scenario);
      }
      if (sumCase_ == SumOneofCase.RecUpd) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RecUpd);
      }
      if (sumCase_ == SumOneofCase.TupleUpd) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(TupleUpd);
      }
      if (location_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Location);
      }
      if (sumCase_ == SumOneofCase.OptionalNone) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(OptionalNone);
      }
      if (sumCase_ == SumOneofCase.OptionalSome) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(OptionalSome);
      }
      if (sumCase_ == SumOneofCase.EnumCon) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(EnumCon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (sumCase_ == SumOneofCase.Var) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Var);
      }
      if (sumCase_ == SumOneofCase.Val) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Val);
      }
      if (sumCase_ == SumOneofCase.Builtin) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Builtin);
      }
      if (sumCase_ == SumOneofCase.PrimCon) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrimCon);
      }
      if (sumCase_ == SumOneofCase.PrimLit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimLit);
      }
      if (sumCase_ == SumOneofCase.RecCon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecCon);
      }
      if (sumCase_ == SumOneofCase.RecProj) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecProj);
      }
      if (sumCase_ == SumOneofCase.RecUpd) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RecUpd);
      }
      if (sumCase_ == SumOneofCase.VariantCon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VariantCon);
      }
      if (sumCase_ == SumOneofCase.EnumCon) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnumCon);
      }
      if (sumCase_ == SumOneofCase.TupleCon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TupleCon);
      }
      if (sumCase_ == SumOneofCase.TupleProj) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TupleProj);
      }
      if (sumCase_ == SumOneofCase.TupleUpd) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TupleUpd);
      }
      if (sumCase_ == SumOneofCase.App) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(App);
      }
      if (sumCase_ == SumOneofCase.TyApp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TyApp);
      }
      if (sumCase_ == SumOneofCase.Abs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abs);
      }
      if (sumCase_ == SumOneofCase.TyAbs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TyAbs);
      }
      if (sumCase_ == SumOneofCase.Case) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Case);
      }
      if (sumCase_ == SumOneofCase.Let) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Let);
      }
      if (sumCase_ == SumOneofCase.Nil) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nil);
      }
      if (sumCase_ == SumOneofCase.Cons) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cons);
      }
      if (sumCase_ == SumOneofCase.Update) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (sumCase_ == SumOneofCase.Scenario) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Scenario);
      }
      if (sumCase_ == SumOneofCase.OptionalNone) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OptionalNone);
      }
      if (sumCase_ == SumOneofCase.OptionalSome) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OptionalSome);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Expr other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      switch (other.SumCase) {
        case SumOneofCase.Var:
          Var = other.Var;
          break;
        case SumOneofCase.Val:
          if (Val == null) {
            Val = new global::Com.DigitalAsset.Daml_lf.DamlLf1.ValName();
          }
          Val.MergeFrom(other.Val);
          break;
        case SumOneofCase.Builtin:
          Builtin = other.Builtin;
          break;
        case SumOneofCase.PrimCon:
          PrimCon = other.PrimCon;
          break;
        case SumOneofCase.PrimLit:
          if (PrimLit == null) {
            PrimLit = new global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimLit();
          }
          PrimLit.MergeFrom(other.PrimLit);
          break;
        case SumOneofCase.RecCon:
          if (RecCon == null) {
            RecCon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecCon();
          }
          RecCon.MergeFrom(other.RecCon);
          break;
        case SumOneofCase.RecProj:
          if (RecProj == null) {
            RecProj = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecProj();
          }
          RecProj.MergeFrom(other.RecProj);
          break;
        case SumOneofCase.RecUpd:
          if (RecUpd == null) {
            RecUpd = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecUpd();
          }
          RecUpd.MergeFrom(other.RecUpd);
          break;
        case SumOneofCase.VariantCon:
          if (VariantCon == null) {
            VariantCon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.VariantCon();
          }
          VariantCon.MergeFrom(other.VariantCon);
          break;
        case SumOneofCase.EnumCon:
          if (EnumCon == null) {
            EnumCon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.EnumCon();
          }
          EnumCon.MergeFrom(other.EnumCon);
          break;
        case SumOneofCase.TupleCon:
          if (TupleCon == null) {
            TupleCon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleCon();
          }
          TupleCon.MergeFrom(other.TupleCon);
          break;
        case SumOneofCase.TupleProj:
          if (TupleProj == null) {
            TupleProj = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleProj();
          }
          TupleProj.MergeFrom(other.TupleProj);
          break;
        case SumOneofCase.TupleUpd:
          if (TupleUpd == null) {
            TupleUpd = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleUpd();
          }
          TupleUpd.MergeFrom(other.TupleUpd);
          break;
        case SumOneofCase.App:
          if (App == null) {
            App = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.App();
          }
          App.MergeFrom(other.App);
          break;
        case SumOneofCase.TyApp:
          if (TyApp == null) {
            TyApp = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyApp();
          }
          TyApp.MergeFrom(other.TyApp);
          break;
        case SumOneofCase.Abs:
          if (Abs == null) {
            Abs = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Abs();
          }
          Abs.MergeFrom(other.Abs);
          break;
        case SumOneofCase.TyAbs:
          if (TyAbs == null) {
            TyAbs = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyAbs();
          }
          TyAbs.MergeFrom(other.TyAbs);
          break;
        case SumOneofCase.Case:
          if (Case == null) {
            Case = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Case();
          }
          Case.MergeFrom(other.Case);
          break;
        case SumOneofCase.Let:
          if (Let == null) {
            Let = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Block();
          }
          Let.MergeFrom(other.Let);
          break;
        case SumOneofCase.Nil:
          if (Nil == null) {
            Nil = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Nil();
          }
          Nil.MergeFrom(other.Nil);
          break;
        case SumOneofCase.Cons:
          if (Cons == null) {
            Cons = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Cons();
          }
          Cons.MergeFrom(other.Cons);
          break;
        case SumOneofCase.Update:
          if (Update == null) {
            Update = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update();
          }
          Update.MergeFrom(other.Update);
          break;
        case SumOneofCase.Scenario:
          if (Scenario == null) {
            Scenario = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario();
          }
          Scenario.MergeFrom(other.Scenario);
          break;
        case SumOneofCase.OptionalNone:
          if (OptionalNone == null) {
            OptionalNone = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalNone();
          }
          OptionalNone.MergeFrom(other.OptionalNone);
          break;
        case SumOneofCase.OptionalSome:
          if (OptionalSome == null) {
            OptionalSome = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalSome();
          }
          OptionalSome.MergeFrom(other.OptionalSome);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Var = input.ReadString();
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.ValName subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.ValName();
            if (sumCase_ == SumOneofCase.Val) {
              subBuilder.MergeFrom(Val);
            }
            input.ReadMessage(subBuilder);
            Val = subBuilder;
            break;
          }
          case 24: {
            sum_ = input.ReadEnum();
            sumCase_ = SumOneofCase.Builtin;
            break;
          }
          case 32: {
            sum_ = input.ReadEnum();
            sumCase_ = SumOneofCase.PrimCon;
            break;
          }
          case 42: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimLit subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimLit();
            if (sumCase_ == SumOneofCase.PrimLit) {
              subBuilder.MergeFrom(PrimLit);
            }
            input.ReadMessage(subBuilder);
            PrimLit = subBuilder;
            break;
          }
          case 50: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecCon subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecCon();
            if (sumCase_ == SumOneofCase.RecCon) {
              subBuilder.MergeFrom(RecCon);
            }
            input.ReadMessage(subBuilder);
            RecCon = subBuilder;
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecProj subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecProj();
            if (sumCase_ == SumOneofCase.RecProj) {
              subBuilder.MergeFrom(RecProj);
            }
            input.ReadMessage(subBuilder);
            RecProj = subBuilder;
            break;
          }
          case 66: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.VariantCon subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.VariantCon();
            if (sumCase_ == SumOneofCase.VariantCon) {
              subBuilder.MergeFrom(VariantCon);
            }
            input.ReadMessage(subBuilder);
            VariantCon = subBuilder;
            break;
          }
          case 74: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleCon subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleCon();
            if (sumCase_ == SumOneofCase.TupleCon) {
              subBuilder.MergeFrom(TupleCon);
            }
            input.ReadMessage(subBuilder);
            TupleCon = subBuilder;
            break;
          }
          case 82: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleProj subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleProj();
            if (sumCase_ == SumOneofCase.TupleProj) {
              subBuilder.MergeFrom(TupleProj);
            }
            input.ReadMessage(subBuilder);
            TupleProj = subBuilder;
            break;
          }
          case 90: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.App subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.App();
            if (sumCase_ == SumOneofCase.App) {
              subBuilder.MergeFrom(App);
            }
            input.ReadMessage(subBuilder);
            App = subBuilder;
            break;
          }
          case 98: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyApp subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyApp();
            if (sumCase_ == SumOneofCase.TyApp) {
              subBuilder.MergeFrom(TyApp);
            }
            input.ReadMessage(subBuilder);
            TyApp = subBuilder;
            break;
          }
          case 106: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Abs subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Abs();
            if (sumCase_ == SumOneofCase.Abs) {
              subBuilder.MergeFrom(Abs);
            }
            input.ReadMessage(subBuilder);
            Abs = subBuilder;
            break;
          }
          case 114: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyAbs subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TyAbs();
            if (sumCase_ == SumOneofCase.TyAbs) {
              subBuilder.MergeFrom(TyAbs);
            }
            input.ReadMessage(subBuilder);
            TyAbs = subBuilder;
            break;
          }
          case 122: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Case subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Case();
            if (sumCase_ == SumOneofCase.Case) {
              subBuilder.MergeFrom(Case);
            }
            input.ReadMessage(subBuilder);
            Case = subBuilder;
            break;
          }
          case 130: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Block subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Block();
            if (sumCase_ == SumOneofCase.Let) {
              subBuilder.MergeFrom(Let);
            }
            input.ReadMessage(subBuilder);
            Let = subBuilder;
            break;
          }
          case 138: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Nil subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Nil();
            if (sumCase_ == SumOneofCase.Nil) {
              subBuilder.MergeFrom(Nil);
            }
            input.ReadMessage(subBuilder);
            Nil = subBuilder;
            break;
          }
          case 146: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Cons subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.Cons();
            if (sumCase_ == SumOneofCase.Cons) {
              subBuilder.MergeFrom(Cons);
            }
            input.ReadMessage(subBuilder);
            Cons = subBuilder;
            break;
          }
          case 162: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Update subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update();
            if (sumCase_ == SumOneofCase.Update) {
              subBuilder.MergeFrom(Update);
            }
            input.ReadMessage(subBuilder);
            Update = subBuilder;
            break;
          }
          case 170: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario();
            if (sumCase_ == SumOneofCase.Scenario) {
              subBuilder.MergeFrom(Scenario);
            }
            input.ReadMessage(subBuilder);
            Scenario = subBuilder;
            break;
          }
          case 178: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecUpd subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.RecUpd();
            if (sumCase_ == SumOneofCase.RecUpd) {
              subBuilder.MergeFrom(RecUpd);
            }
            input.ReadMessage(subBuilder);
            RecUpd = subBuilder;
            break;
          }
          case 186: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleUpd subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.TupleUpd();
            if (sumCase_ == SumOneofCase.TupleUpd) {
              subBuilder.MergeFrom(TupleUpd);
            }
            input.ReadMessage(subBuilder);
            TupleUpd = subBuilder;
            break;
          }
          case 202: {
            if (location_ == null) {
              Location = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 210: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalNone subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalNone();
            if (sumCase_ == SumOneofCase.OptionalNone) {
              subBuilder.MergeFrom(OptionalNone);
            }
            input.ReadMessage(subBuilder);
            OptionalNone = subBuilder;
            break;
          }
          case 218: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalSome subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.OptionalSome();
            if (sumCase_ == SumOneofCase.OptionalSome) {
              subBuilder.MergeFrom(OptionalSome);
            }
            input.ReadMessage(subBuilder);
            OptionalSome = subBuilder;
            break;
          }
          case 226: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.EnumCon subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Types.EnumCon();
            if (sumCase_ == SumOneofCase.EnumCon) {
              subBuilder.MergeFrom(EnumCon);
            }
            input.ReadMessage(subBuilder);
            EnumCon = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Expr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Record construction ('ExpRecCon')
      /// </summary>
      public sealed partial class RecCon : pb::IMessage<RecCon> {
        private static readonly pb::MessageParser<RecCon> _parser = new pb::MessageParser<RecCon>(() => new RecCon());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecCon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecCon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecCon(RecCon other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecCon Clone() {
          return new RecCon(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// type of the record being constructed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr> fields_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr>();
        /// <summary>
        /// Field names and the associated values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecCon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecCon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecCon other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Record projection (ExpRecProj)
      /// </summary>
      public sealed partial class RecProj : pb::IMessage<RecProj> {
        private static readonly pb::MessageParser<RecProj> _parser = new pb::MessageParser<RecProj>(() => new RecProj());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecProj> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecProj() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecProj(RecProj other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          field_ = other.field_;
          record_ = other.record_ != null ? other.record_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecProj Clone() {
          return new RecProj(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// type of the record being projected.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 2;
        private string field_ = "";
        /// <summary>
        /// Name of the record field to be projected on.
        /// *must be a valid Identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr record_;
        /// <summary>
        /// projected expression
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Record {
          get { return record_; }
          set {
            record_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecProj);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecProj other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if (Field != other.Field) return false;
          if (!object.Equals(Record, other.Record)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (record_ != null) hash ^= Record.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          if (Field.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Field);
          }
          if (record_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Record);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (record_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecProj other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          if (other.record_ != null) {
            if (record_ == null) {
              Record = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Record.MergeFrom(other.Record);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                Field = input.ReadString();
                break;
              }
              case 26: {
                if (record_ == null) {
                  Record = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Record);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Record update ('ExpRecUp')
      /// </summary>
      public sealed partial class RecUpd : pb::IMessage<RecUpd> {
        private static readonly pb::MessageParser<RecUpd> _parser = new pb::MessageParser<RecUpd>(() => new RecUpd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecUpd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecUpd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecUpd(RecUpd other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          field_ = other.field_;
          record_ = other.record_ != null ? other.record_.Clone() : null;
          update_ = other.update_ != null ? other.update_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecUpd Clone() {
          return new RecUpd(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// type of the record being updated
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 2;
        private string field_ = "";
        /// <summary>
        /// Name of the updated field.
        /// *must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr record_;
        /// <summary>
        /// Actual record being updated
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Record {
          get { return record_; }
          set {
            record_ = value;
          }
        }

        /// <summary>Field number for the "update" field.</summary>
        public const int UpdateFieldNumber = 4;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr update_;
        /// <summary>
        /// Value to wich the record is udpated
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Update {
          get { return update_; }
          set {
            update_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecUpd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecUpd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if (Field != other.Field) return false;
          if (!object.Equals(Record, other.Record)) return false;
          if (!object.Equals(Update, other.Update)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (record_ != null) hash ^= Record.GetHashCode();
          if (update_ != null) hash ^= Update.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          if (Field.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Field);
          }
          if (record_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Record);
          }
          if (update_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Update);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (record_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
          }
          if (update_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecUpd other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          if (other.record_ != null) {
            if (record_ == null) {
              Record = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Record.MergeFrom(other.Record);
          }
          if (other.update_ != null) {
            if (update_ == null) {
              Update = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Update.MergeFrom(other.Update);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                Field = input.ReadString();
                break;
              }
              case 26: {
                if (record_ == null) {
                  Record = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Record);
                break;
              }
              case 34: {
                if (update_ == null) {
                  Update = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Update);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Variant construction ('ExpVariantCon')
      /// </summary>
      public sealed partial class VariantCon : pb::IMessage<VariantCon> {
        private static readonly pb::MessageParser<VariantCon> _parser = new pb::MessageParser<VariantCon>(() => new VariantCon());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VariantCon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantCon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantCon(VariantCon other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          variantCon_ = other.variantCon_;
          variantArg_ = other.variantArg_ != null ? other.variantArg_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantCon Clone() {
          return new VariantCon(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// type of the variant being constructed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "variant_con" field.</summary>
        public const int VariantCon_FieldNumber = 2;
        private string variantCon_ = "";
        /// <summary>
        /// name of the variant constructor
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VariantCon_ {
          get { return variantCon_; }
          set {
            variantCon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "variant_arg" field.</summary>
        public const int VariantArgFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr variantArg_;
        /// <summary>
        /// Argument of the variant.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr VariantArg {
          get { return variantArg_; }
          set {
            variantArg_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VariantCon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VariantCon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if (VariantCon_ != other.VariantCon_) return false;
          if (!object.Equals(VariantArg, other.VariantArg)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          if (VariantCon_.Length != 0) hash ^= VariantCon_.GetHashCode();
          if (variantArg_ != null) hash ^= VariantArg.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          if (VariantCon_.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(VariantCon_);
          }
          if (variantArg_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(VariantArg);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          if (VariantCon_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantCon_);
          }
          if (variantArg_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(VariantArg);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VariantCon other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          if (other.VariantCon_.Length != 0) {
            VariantCon_ = other.VariantCon_;
          }
          if (other.variantArg_ != null) {
            if (variantArg_ == null) {
              VariantArg = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            VariantArg.MergeFrom(other.VariantArg);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                VariantCon_ = input.ReadString();
                break;
              }
              case 26: {
                if (variantArg_ == null) {
                  VariantArg = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(VariantArg);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Enum construction ('ExpEnumCon')
      /// *Available since version 1.dev*
      /// </summary>
      public sealed partial class EnumCon : pb::IMessage<EnumCon> {
        private static readonly pb::MessageParser<EnumCon> _parser = new pb::MessageParser<EnumCon>(() => new EnumCon());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EnumCon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumCon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumCon(EnumCon other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          enumCon_ = other.enumCon_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumCon Clone() {
          return new EnumCon(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName tycon_;
        /// <summary>
        /// Name of the type constructor name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "enum_con" field.</summary>
        public const int EnumCon_FieldNumber = 2;
        private string enumCon_ = "";
        /// <summary>
        /// name of the enum constructor
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EnumCon_ {
          get { return enumCon_; }
          set {
            enumCon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EnumCon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EnumCon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if (EnumCon_ != other.EnumCon_) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          if (EnumCon_.Length != 0) hash ^= EnumCon_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          if (EnumCon_.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(EnumCon_);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          if (EnumCon_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EnumCon_);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EnumCon other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          if (other.EnumCon_.Length != 0) {
            EnumCon_ = other.EnumCon_;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                EnumCon_ = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Tuple Construction ('ExpTupleCon')
      /// </summary>
      public sealed partial class TupleCon : pb::IMessage<TupleCon> {
        private static readonly pb::MessageParser<TupleCon> _parser = new pb::MessageParser<TupleCon>(() => new TupleCon());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TupleCon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleCon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleCon(TupleCon other) : this() {
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleCon Clone() {
          return new TupleCon(this);
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr> fields_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr>();
        /// <summary>
        /// Field names and their associated values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithExpr> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TupleCon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TupleCon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TupleCon other) {
          if (other == null) {
            return;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Tuple Projection ('ExpTupleProj')
      /// </summary>
      public sealed partial class TupleProj : pb::IMessage<TupleProj> {
        private static readonly pb::MessageParser<TupleProj> _parser = new pb::MessageParser<TupleProj>(() => new TupleProj());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TupleProj> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleProj() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleProj(TupleProj other) : this() {
          field_ = other.field_;
          tuple_ = other.tuple_ != null ? other.tuple_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleProj Clone() {
          return new TupleProj(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private string field_ = "";
        /// <summary>
        /// Name of the field to be projected on.
        /// *Must be a valid Identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "tuple" field.</summary>
        public const int TupleFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr tuple_;
        /// <summary>
        /// tuple to be projected.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Tuple {
          get { return tuple_; }
          set {
            tuple_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TupleProj);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TupleProj other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field != other.Field) return false;
          if (!object.Equals(Tuple, other.Tuple)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (tuple_ != null) hash ^= Tuple.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Field.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field);
          }
          if (tuple_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Tuple);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (tuple_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tuple);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TupleProj other) {
          if (other == null) {
            return;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          if (other.tuple_ != null) {
            if (tuple_ == null) {
              Tuple = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Tuple.MergeFrom(other.Tuple);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Field = input.ReadString();
                break;
              }
              case 18: {
                if (tuple_ == null) {
                  Tuple = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Tuple);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Tuple update ('ExpTuplUpdate')
      /// </summary>
      public sealed partial class TupleUpd : pb::IMessage<TupleUpd> {
        private static readonly pb::MessageParser<TupleUpd> _parser = new pb::MessageParser<TupleUpd>(() => new TupleUpd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TupleUpd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleUpd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleUpd(TupleUpd other) : this() {
          field_ = other.field_;
          tuple_ = other.tuple_ != null ? other.tuple_.Clone() : null;
          update_ = other.update_ != null ? other.update_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleUpd Clone() {
          return new TupleUpd(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private string field_ = "";
        /// <summary>
        /// Name of the updated field.
        /// *must be a valid identifier*.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "tuple" field.</summary>
        public const int TupleFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr tuple_;
        /// <summary>
        /// Actual tuple being updated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Tuple {
          get { return tuple_; }
          set {
            tuple_ = value;
          }
        }

        /// <summary>Field number for the "update" field.</summary>
        public const int UpdateFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr update_;
        /// <summary>
        /// Value to which the record is udpated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Update {
          get { return update_; }
          set {
            update_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TupleUpd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TupleUpd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field != other.Field) return false;
          if (!object.Equals(Tuple, other.Tuple)) return false;
          if (!object.Equals(Update, other.Update)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (tuple_ != null) hash ^= Tuple.GetHashCode();
          if (update_ != null) hash ^= Update.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Field.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field);
          }
          if (tuple_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Tuple);
          }
          if (update_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Update);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (tuple_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tuple);
          }
          if (update_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TupleUpd other) {
          if (other == null) {
            return;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          if (other.tuple_ != null) {
            if (tuple_ == null) {
              Tuple = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Tuple.MergeFrom(other.Tuple);
          }
          if (other.update_ != null) {
            if (update_ == null) {
              Update = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Update.MergeFrom(other.Update);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Field = input.ReadString();
                break;
              }
              case 18: {
                if (tuple_ == null) {
                  Tuple = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Tuple);
                break;
              }
              case 26: {
                if (update_ == null) {
                  Update = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Update);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Application ('ExpApp')
      /// </summary>
      public sealed partial class App : pb::IMessage<App> {
        private static readonly pb::MessageParser<App> _parser = new pb::MessageParser<App>(() => new App());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<App> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public App() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public App(App other) : this() {
          fun_ = other.fun_ != null ? other.fun_.Clone() : null;
          args_ = other.args_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public App Clone() {
          return new App(this);
        }

        /// <summary>Field number for the "fun" field.</summary>
        public const int FunFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr fun_;
        /// <summary>
        /// Function
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Fun {
          get { return fun_; }
          set {
            fun_ = value;
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr> _repeated_args_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr> args_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr>();
        /// <summary>
        /// Arguments of the function.
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr> Args {
          get { return args_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as App);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(App other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Fun, other.Fun)) return false;
          if(!args_.Equals(other.args_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (fun_ != null) hash ^= Fun.GetHashCode();
          hash ^= args_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (fun_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Fun);
          }
          args_.WriteTo(output, _repeated_args_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (fun_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fun);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(App other) {
          if (other == null) {
            return;
          }
          if (other.fun_ != null) {
            if (fun_ == null) {
              Fun = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Fun.MergeFrom(other.Fun);
          }
          args_.Add(other.args_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (fun_ == null) {
                  Fun = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Fun);
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Type application ('ExpTyApp')
      /// </summary>
      public sealed partial class TyApp : pb::IMessage<TyApp> {
        private static readonly pb::MessageParser<TyApp> _parser = new pb::MessageParser<TyApp>(() => new TyApp());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TyApp> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyApp() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyApp(TyApp other) : this() {
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          types_ = other.types_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyApp Clone() {
          return new TyApp(this);
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr expr_;
        /// <summary>
        /// Polymorphic expression
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        /// <summary>Field number for the "types" field.</summary>
        public const int Types_FieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> _repeated_types_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> types_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type>();
        /// <summary>
        /// Arguments of the function.
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Type> Types_ {
          get { return types_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TyApp);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TyApp other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Expr, other.Expr)) return false;
          if(!types_.Equals(other.types_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (expr_ != null) hash ^= Expr.GetHashCode();
          hash ^= types_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (expr_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Expr);
          }
          types_.WriteTo(output, _repeated_types_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          size += types_.CalculateSize(_repeated_types_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TyApp other) {
          if (other == null) {
            return;
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Expr.MergeFrom(other.Expr);
          }
          types_.Add(other.types_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (expr_ == null) {
                  Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 18: {
                types_.AddEntriesFrom(input, _repeated_types_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Abstraction ('ExpAbs')
      /// </summary>
      public sealed partial class Abs : pb::IMessage<Abs> {
        private static readonly pb::MessageParser<Abs> _parser = new pb::MessageParser<Abs>(() => new Abs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Abs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Abs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Abs(Abs other) : this() {
          param_ = other.param_.Clone();
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Abs Clone() {
          return new Abs(this);
        }

        /// <summary>Field number for the "param" field.</summary>
        public const int ParamFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType> _repeated_param_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType> param_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType>();
        /// <summary>
        /// Abstracted Variables with their kind
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType> Param {
          get { return param_; }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr body_;
        /// <summary>
        /// Abstracted value
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Abs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Abs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!param_.Equals(other.param_)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= param_.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          param_.WriteTo(output, _repeated_param_codec);
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += param_.CalculateSize(_repeated_param_codec);
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Abs other) {
          if (other == null) {
            return;
          }
          param_.Add(other.param_);
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                param_.AddEntriesFrom(input, _repeated_param_codec);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

      public sealed partial class TyAbs : pb::IMessage<TyAbs> {
        private static readonly pb::MessageParser<TyAbs> _parser = new pb::MessageParser<TyAbs>(() => new TyAbs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TyAbs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyAbs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyAbs(TyAbs other) : this() {
          param_ = other.param_.Clone();
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyAbs Clone() {
          return new TyAbs(this);
        }

        /// <summary>Field number for the "param" field.</summary>
        public const int ParamFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind> _repeated_param_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind> param_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind>();
        /// <summary>
        /// Abstracted Variables with their type
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind> Param {
          get { return param_; }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr body_;
        /// <summary>
        /// Abstracted value
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TyAbs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TyAbs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!param_.Equals(other.param_)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= param_.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          param_.WriteTo(output, _repeated_param_codec);
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += param_.CalculateSize(_repeated_param_codec);
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TyAbs other) {
          if (other == null) {
            return;
          }
          param_.Add(other.param_);
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                param_.AddEntriesFrom(input, _repeated_param_codec);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Empty list ('ExpNil')
      /// </summary>
      public sealed partial class Nil : pb::IMessage<Nil> {
        private static readonly pb::MessageParser<Nil> _parser = new pb::MessageParser<Nil>(() => new Nil());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Nil> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Nil() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Nil(Nil other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Nil Clone() {
          return new Nil(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
        /// <summary>
        /// type of the list elements.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Nil);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Nil other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Nil other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Non empty list
      /// </summary>
      public sealed partial class Cons : pb::IMessage<Cons> {
        private static readonly pb::MessageParser<Cons> _parser = new pb::MessageParser<Cons>(() => new Cons());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Cons> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons(Cons other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          front_ = other.front_.Clone();
          tail_ = other.tail_ != null ? other.tail_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons Clone() {
          return new Cons(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
        /// <summary>
        /// type of the list elements.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "front" field.</summary>
        public const int FrontFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr> _repeated_front_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr> front_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr>();
        /// <summary>
        /// Front element of the list.
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr> Front {
          get { return front_; }
        }

        /// <summary>Field number for the "tail" field.</summary>
        public const int TailFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr tail_;
        /// <summary>
        /// tail of the list
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Tail {
          get { return tail_; }
          set {
            tail_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Cons);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Cons other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if(!front_.Equals(other.front_)) return false;
          if (!object.Equals(Tail, other.Tail)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          hash ^= front_.GetHashCode();
          if (tail_ != null) hash ^= Tail.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          front_.WriteTo(output, _repeated_front_codec);
          if (tail_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Tail);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          size += front_.CalculateSize(_repeated_front_codec);
          if (tail_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tail);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Cons other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          front_.Add(other.front_);
          if (other.tail_ != null) {
            if (tail_ == null) {
              Tail = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Tail.MergeFrom(other.Tail);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                front_.AddEntriesFrom(input, _repeated_front_codec);
                break;
              }
              case 26: {
                if (tail_ == null) {
                  Tail = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Tail);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// (*Since version 1*)
      /// Empty optional value
      /// </summary>
      public sealed partial class OptionalNone : pb::IMessage<OptionalNone> {
        private static readonly pb::MessageParser<OptionalNone> _parser = new pb::MessageParser<OptionalNone>(() => new OptionalNone());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OptionalNone> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalNone() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalNone(OptionalNone other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalNone Clone() {
          return new OptionalNone(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
        /// <summary>
        /// type of the element
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OptionalNone);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OptionalNone other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OptionalNone other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// (*Since version 1*)
      /// Non empty optional value
      /// </summary>
      public sealed partial class OptionalSome : pb::IMessage<OptionalSome> {
        private static readonly pb::MessageParser<OptionalSome> _parser = new pb::MessageParser<OptionalSome>(() => new OptionalSome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OptionalSome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome(OptionalSome other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome Clone() {
          return new OptionalSome(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
        /// <summary>
        /// type of the element
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr body_;
        /// <summary>
        /// contained value
        /// FixMe: renamed to 'value'
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OptionalSome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OptionalSome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OptionalSome other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Case alternative
  /// </summary>
  public sealed partial class CaseAlt : pb::IMessage<CaseAlt> {
    private static readonly pb::MessageParser<CaseAlt> _parser = new pb::MessageParser<CaseAlt>(() => new CaseAlt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CaseAlt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaseAlt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaseAlt(CaseAlt other) : this() {
      body_ = other.body_ != null ? other.body_.Clone() : null;
      switch (other.SumCase) {
        case SumOneofCase.Default:
          Default = other.Default.Clone();
          break;
        case SumOneofCase.Variant:
          Variant = other.Variant.Clone();
          break;
        case SumOneofCase.PrimCon:
          PrimCon = other.PrimCon;
          break;
        case SumOneofCase.Nil:
          Nil = other.Nil.Clone();
          break;
        case SumOneofCase.Cons:
          Cons = other.Cons.Clone();
          break;
        case SumOneofCase.OptionalNone:
          OptionalNone = other.OptionalNone.Clone();
          break;
        case SumOneofCase.OptionalSome:
          OptionalSome = other.OptionalSome.Clone();
          break;
        case SumOneofCase.Enum:
          Enum = other.Enum.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaseAlt Clone() {
      return new CaseAlt(this);
    }

    /// <summary>Field number for the "default" field.</summary>
    public const int DefaultFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit Default {
      get { return sumCase_ == SumOneofCase.Default ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Default;
      }
    }

    /// <summary>Field number for the "variant" field.</summary>
    public const int VariantFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Variant Variant {
      get { return sumCase_ == SumOneofCase.Variant ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Variant) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Variant;
      }
    }

    /// <summary>Field number for the "prim_con" field.</summary>
    public const int PrimConFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimCon PrimCon {
      get { return sumCase_ == SumOneofCase.PrimCon ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.PrimCon) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.PrimCon;
      }
    }

    /// <summary>Field number for the "nil" field.</summary>
    public const int NilFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit Nil {
      get { return sumCase_ == SumOneofCase.Nil ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Nil;
      }
    }

    /// <summary>Field number for the "cons" field.</summary>
    public const int ConsFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Cons Cons {
      get { return sumCase_ == SumOneofCase.Cons ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Cons) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Cons;
      }
    }

    /// <summary>Field number for the "optional_none" field.</summary>
    public const int OptionalNoneFieldNumber = 7;
    /// <summary>
    /// * Available since version 1.1*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit OptionalNone {
      get { return sumCase_ == SumOneofCase.OptionalNone ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.OptionalNone;
      }
    }

    /// <summary>Field number for the "optional_some" field.</summary>
    public const int OptionalSomeFieldNumber = 8;
    /// <summary>
    /// * Available since version 1.1*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.OptionalSome OptionalSome {
      get { return sumCase_ == SumOneofCase.OptionalSome ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.OptionalSome) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.OptionalSome;
      }
    }

    /// <summary>Field number for the "enum" field.</summary>
    public const int EnumFieldNumber = 9;
    /// <summary>
    /// * Available since version 1.dev*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Enum Enum {
      get { return sumCase_ == SumOneofCase.Enum ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Enum) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Enum;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 6;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Default = 1,
      Variant = 2,
      PrimCon = 3,
      Nil = 4,
      Cons = 5,
      OptionalNone = 7,
      OptionalSome = 8,
      Enum = 9,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CaseAlt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CaseAlt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Default, other.Default)) return false;
      if (!object.Equals(Variant, other.Variant)) return false;
      if (PrimCon != other.PrimCon) return false;
      if (!object.Equals(Nil, other.Nil)) return false;
      if (!object.Equals(Cons, other.Cons)) return false;
      if (!object.Equals(OptionalNone, other.OptionalNone)) return false;
      if (!object.Equals(OptionalSome, other.OptionalSome)) return false;
      if (!object.Equals(Enum, other.Enum)) return false;
      if (!object.Equals(Body, other.Body)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Default) hash ^= Default.GetHashCode();
      if (sumCase_ == SumOneofCase.Variant) hash ^= Variant.GetHashCode();
      if (sumCase_ == SumOneofCase.PrimCon) hash ^= PrimCon.GetHashCode();
      if (sumCase_ == SumOneofCase.Nil) hash ^= Nil.GetHashCode();
      if (sumCase_ == SumOneofCase.Cons) hash ^= Cons.GetHashCode();
      if (sumCase_ == SumOneofCase.OptionalNone) hash ^= OptionalNone.GetHashCode();
      if (sumCase_ == SumOneofCase.OptionalSome) hash ^= OptionalSome.GetHashCode();
      if (sumCase_ == SumOneofCase.Enum) hash ^= Enum.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Default) {
        output.WriteRawTag(10);
        output.WriteMessage(Default);
      }
      if (sumCase_ == SumOneofCase.Variant) {
        output.WriteRawTag(18);
        output.WriteMessage(Variant);
      }
      if (sumCase_ == SumOneofCase.PrimCon) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PrimCon);
      }
      if (sumCase_ == SumOneofCase.Nil) {
        output.WriteRawTag(34);
        output.WriteMessage(Nil);
      }
      if (sumCase_ == SumOneofCase.Cons) {
        output.WriteRawTag(42);
        output.WriteMessage(Cons);
      }
      if (body_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Body);
      }
      if (sumCase_ == SumOneofCase.OptionalNone) {
        output.WriteRawTag(58);
        output.WriteMessage(OptionalNone);
      }
      if (sumCase_ == SumOneofCase.OptionalSome) {
        output.WriteRawTag(66);
        output.WriteMessage(OptionalSome);
      }
      if (sumCase_ == SumOneofCase.Enum) {
        output.WriteRawTag(74);
        output.WriteMessage(Enum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Default) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Default);
      }
      if (sumCase_ == SumOneofCase.Variant) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variant);
      }
      if (sumCase_ == SumOneofCase.PrimCon) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrimCon);
      }
      if (sumCase_ == SumOneofCase.Nil) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nil);
      }
      if (sumCase_ == SumOneofCase.Cons) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cons);
      }
      if (sumCase_ == SumOneofCase.OptionalNone) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalNone);
      }
      if (sumCase_ == SumOneofCase.OptionalSome) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalSome);
      }
      if (sumCase_ == SumOneofCase.Enum) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enum);
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CaseAlt other) {
      if (other == null) {
        return;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Body.MergeFrom(other.Body);
      }
      switch (other.SumCase) {
        case SumOneofCase.Default:
          if (Default == null) {
            Default = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
          }
          Default.MergeFrom(other.Default);
          break;
        case SumOneofCase.Variant:
          if (Variant == null) {
            Variant = new global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Variant();
          }
          Variant.MergeFrom(other.Variant);
          break;
        case SumOneofCase.PrimCon:
          PrimCon = other.PrimCon;
          break;
        case SumOneofCase.Nil:
          if (Nil == null) {
            Nil = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
          }
          Nil.MergeFrom(other.Nil);
          break;
        case SumOneofCase.Cons:
          if (Cons == null) {
            Cons = new global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Cons();
          }
          Cons.MergeFrom(other.Cons);
          break;
        case SumOneofCase.OptionalNone:
          if (OptionalNone == null) {
            OptionalNone = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
          }
          OptionalNone.MergeFrom(other.OptionalNone);
          break;
        case SumOneofCase.OptionalSome:
          if (OptionalSome == null) {
            OptionalSome = new global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.OptionalSome();
          }
          OptionalSome.MergeFrom(other.OptionalSome);
          break;
        case SumOneofCase.Enum:
          if (Enum == null) {
            Enum = new global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Enum();
          }
          Enum.MergeFrom(other.Enum);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.Default) {
              subBuilder.MergeFrom(Default);
            }
            input.ReadMessage(subBuilder);
            Default = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Variant subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Variant();
            if (sumCase_ == SumOneofCase.Variant) {
              subBuilder.MergeFrom(Variant);
            }
            input.ReadMessage(subBuilder);
            Variant = subBuilder;
            break;
          }
          case 24: {
            sum_ = input.ReadEnum();
            sumCase_ = SumOneofCase.PrimCon;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.Nil) {
              subBuilder.MergeFrom(Nil);
            }
            input.ReadMessage(subBuilder);
            Nil = subBuilder;
            break;
          }
          case 42: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Cons subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Cons();
            if (sumCase_ == SumOneofCase.Cons) {
              subBuilder.MergeFrom(Cons);
            }
            input.ReadMessage(subBuilder);
            Cons = subBuilder;
            break;
          }
          case 50: {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Body);
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.OptionalNone) {
              subBuilder.MergeFrom(OptionalNone);
            }
            input.ReadMessage(subBuilder);
            OptionalNone = subBuilder;
            break;
          }
          case 66: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.OptionalSome subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.OptionalSome();
            if (sumCase_ == SumOneofCase.OptionalSome) {
              subBuilder.MergeFrom(OptionalSome);
            }
            input.ReadMessage(subBuilder);
            OptionalSome = subBuilder;
            break;
          }
          case 74: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Enum subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Types.Enum();
            if (sumCase_ == SumOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CaseAlt message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Variant pattern
      /// </summary>
      public sealed partial class Variant : pb::IMessage<Variant> {
        private static readonly pb::MessageParser<Variant> _parser = new pb::MessageParser<Variant>(() => new Variant());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Variant> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Variant() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Variant(Variant other) : this() {
          con_ = other.con_ != null ? other.con_.Clone() : null;
          variant_ = other.variant_;
          binder_ = other.binder_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Variant Clone() {
          return new Variant(this);
        }

        /// <summary>Field number for the "con" field.</summary>
        public const int ConFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName con_;
        /// <summary>
        /// name of the type constructor
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName Con {
          get { return con_; }
          set {
            con_ = value;
          }
        }

        /// <summary>Field number for the "variant" field.</summary>
        public const int Variant_FieldNumber = 2;
        private string variant_ = "";
        /// <summary>
        /// name of the variant constructor
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Variant_ {
          get { return variant_; }
          set {
            variant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "binder" field.</summary>
        public const int BinderFieldNumber = 3;
        private string binder_ = "";
        /// <summary>
        /// name of the variant binder
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Binder {
          get { return binder_; }
          set {
            binder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Variant);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Variant other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Con, other.Con)) return false;
          if (Variant_ != other.Variant_) return false;
          if (Binder != other.Binder) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (con_ != null) hash ^= Con.GetHashCode();
          if (Variant_.Length != 0) hash ^= Variant_.GetHashCode();
          if (Binder.Length != 0) hash ^= Binder.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (con_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Con);
          }
          if (Variant_.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Variant_);
          }
          if (Binder.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Binder);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (con_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Con);
          }
          if (Variant_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Variant_);
          }
          if (Binder.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Binder);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Variant other) {
          if (other == null) {
            return;
          }
          if (other.con_ != null) {
            if (con_ == null) {
              Con = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
            }
            Con.MergeFrom(other.Con);
          }
          if (other.Variant_.Length != 0) {
            Variant_ = other.Variant_;
          }
          if (other.Binder.Length != 0) {
            Binder = other.Binder;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (con_ == null) {
                  Con = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
                }
                input.ReadMessage(Con);
                break;
              }
              case 18: {
                Variant_ = input.ReadString();
                break;
              }
              case 26: {
                Binder = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Enum pattern
      /// *Available since version 1.dev*
      /// </summary>
      public sealed partial class Enum : pb::IMessage<Enum> {
        private static readonly pb::MessageParser<Enum> _parser = new pb::MessageParser<Enum>(() => new Enum());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Enum> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Enum() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Enum(Enum other) : this() {
          con_ = other.con_ != null ? other.con_.Clone() : null;
          constructor_ = other.constructor_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Enum Clone() {
          return new Enum(this);
        }

        /// <summary>Field number for the "con" field.</summary>
        public const int ConFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName con_;
        /// <summary>
        /// name of the type constructor
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName Con {
          get { return con_; }
          set {
            con_ = value;
          }
        }

        /// <summary>Field number for the "constructor" field.</summary>
        public const int ConstructorFieldNumber = 2;
        private string constructor_ = "";
        /// <summary>
        /// name of the variant constructor
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Constructor {
          get { return constructor_; }
          set {
            constructor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Enum);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Enum other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Con, other.Con)) return false;
          if (Constructor != other.Constructor) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (con_ != null) hash ^= Con.GetHashCode();
          if (Constructor.Length != 0) hash ^= Constructor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (con_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Con);
          }
          if (Constructor.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Constructor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (con_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Con);
          }
          if (Constructor.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Constructor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Enum other) {
          if (other == null) {
            return;
          }
          if (other.con_ != null) {
            if (con_ == null) {
              Con = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
            }
            Con.MergeFrom(other.Con);
          }
          if (other.Constructor.Length != 0) {
            Constructor = other.Constructor;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (con_ == null) {
                  Con = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
                }
                input.ReadMessage(Con);
                break;
              }
              case 18: {
                Constructor = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Non empty list pattern
      /// </summary>
      public sealed partial class Cons : pb::IMessage<Cons> {
        private static readonly pb::MessageParser<Cons> _parser = new pb::MessageParser<Cons>(() => new Cons());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Cons> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons(Cons other) : this() {
          varHead_ = other.varHead_;
          varTail_ = other.varTail_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons Clone() {
          return new Cons(this);
        }

        /// <summary>Field number for the "var_head" field.</summary>
        public const int VarHeadFieldNumber = 1;
        private string varHead_ = "";
        /// <summary>
        /// name of the binder for the head
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VarHead {
          get { return varHead_; }
          set {
            varHead_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "var_tail" field.</summary>
        public const int VarTailFieldNumber = 2;
        private string varTail_ = "";
        /// <summary>
        /// name of the binder for the tail
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VarTail {
          get { return varTail_; }
          set {
            varTail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Cons);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Cons other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (VarHead != other.VarHead) return false;
          if (VarTail != other.VarTail) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (VarHead.Length != 0) hash ^= VarHead.GetHashCode();
          if (VarTail.Length != 0) hash ^= VarTail.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (VarHead.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(VarHead);
          }
          if (VarTail.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(VarTail);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (VarHead.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VarHead);
          }
          if (VarTail.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VarTail);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Cons other) {
          if (other == null) {
            return;
          }
          if (other.VarHead.Length != 0) {
            VarHead = other.VarHead;
          }
          if (other.VarTail.Length != 0) {
            VarTail = other.VarTail;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                VarHead = input.ReadString();
                break;
              }
              case 18: {
                VarTail = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Non empty option patterm
      /// *Available since version 1.1*
      /// </summary>
      public sealed partial class OptionalSome : pb::IMessage<OptionalSome> {
        private static readonly pb::MessageParser<OptionalSome> _parser = new pb::MessageParser<OptionalSome>(() => new OptionalSome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OptionalSome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome(OptionalSome other) : this() {
          varBody_ = other.varBody_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome Clone() {
          return new OptionalSome(this);
        }

        /// <summary>Field number for the "var_body" field.</summary>
        public const int VarBodyFieldNumber = 1;
        private string varBody_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VarBody {
          get { return varBody_; }
          set {
            varBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OptionalSome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OptionalSome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (VarBody != other.VarBody) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (VarBody.Length != 0) hash ^= VarBody.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (VarBody.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(VarBody);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (VarBody.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VarBody);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OptionalSome other) {
          if (other == null) {
            return;
          }
          if (other.VarBody.Length != 0) {
            VarBody = other.VarBody;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                VarBody = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Case : pb::IMessage<Case> {
    private static readonly pb::MessageParser<Case> _parser = new pb::MessageParser<Case>(() => new Case());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Case> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Case() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Case(Case other) : this() {
      scrut_ = other.scrut_ != null ? other.scrut_.Clone() : null;
      alts_ = other.alts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Case Clone() {
      return new Case(this);
    }

    /// <summary>Field number for the "scrut" field.</summary>
    public const int ScrutFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr scrut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Scrut {
      get { return scrut_; }
      set {
        scrut_ = value;
      }
    }

    /// <summary>Field number for the "alts" field.</summary>
    public const int AltsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt> _repeated_alts_codec
        = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt> alts_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.CaseAlt> Alts {
      get { return alts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Case);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Case other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scrut, other.Scrut)) return false;
      if(!alts_.Equals(other.alts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scrut_ != null) hash ^= Scrut.GetHashCode();
      hash ^= alts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scrut_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scrut);
      }
      alts_.WriteTo(output, _repeated_alts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scrut_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scrut);
      }
      size += alts_.CalculateSize(_repeated_alts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Case other) {
      if (other == null) {
        return;
      }
      if (other.scrut_ != null) {
        if (scrut_ == null) {
          Scrut = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Scrut.MergeFrom(other.Scrut);
      }
      alts_.Add(other.alts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (scrut_ == null) {
              Scrut = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Scrut);
            break;
          }
          case 18: {
            alts_.AddEntriesFrom(input, _repeated_alts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A block of bindings and an expression.
  /// Encodes a sequence of binds in e.g. a let or update block.
  /// </summary>
  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      bindings_ = other.bindings_.Clone();
      body_ = other.body_ != null ? other.body_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "bindings" field.</summary>
    public const int BindingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.Binding> _repeated_bindings_codec
        = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_lf.DamlLf1.Binding.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Binding> bindings_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Binding>();
    /// <summary>
    /// *Must be non-empty*
    /// Bindings
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Binding> Bindings {
      get { return bindings_; }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bindings_.Equals(other.bindings_)) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bindings_.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bindings_.WriteTo(output, _repeated_bindings_codec);
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bindings_.CalculateSize(_repeated_bindings_codec);
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      bindings_.Add(other.bindings_);
      if (other.body_ != null) {
        if (body_ == null) {
          Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Body.MergeFrom(other.Body);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bindings_.AddEntriesFrom(input, _repeated_bindings_codec);
            break;
          }
          case 18: {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Body);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Pure statement either scenario or update
  /// </summary>
  public sealed partial class Pure : pb::IMessage<Pure> {
    private static readonly pb::MessageParser<Pure> _parser = new pb::MessageParser<Pure>(() => new Pure());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pure(Pure other) : this() {
      type_ = other.type_ != null ? other.type_.Clone() : null;
      expr_ = other.expr_ != null ? other.expr_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pure Clone() {
      return new Pure(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "expr" field.</summary>
    public const int ExprFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr expr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Expr {
      get { return expr_; }
      set {
        expr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Type, other.Type)) return false;
      if (!object.Equals(Expr, other.Expr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (type_ != null) hash ^= Type.GetHashCode();
      if (expr_ != null) hash ^= Expr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (type_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Type);
      }
      if (expr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (expr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pure other) {
      if (other == null) {
        return;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.expr_ != null) {
        if (expr_ == null) {
          Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Expr.MergeFrom(other.Expr);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            input.ReadMessage(Type);
            break;
          }
          case 18: {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Expr);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Update : pb::IMessage<Update> {
    private static readonly pb::MessageParser<Update> _parser = new pb::MessageParser<Update>(() => new Update());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update(Update other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Pure:
          Pure = other.Pure.Clone();
          break;
        case SumOneofCase.Block:
          Block = other.Block.Clone();
          break;
        case SumOneofCase.Create:
          Create = other.Create.Clone();
          break;
        case SumOneofCase.Exercise:
          Exercise = other.Exercise.Clone();
          break;
        case SumOneofCase.Fetch:
          Fetch = other.Fetch.Clone();
          break;
        case SumOneofCase.GetTime:
          GetTime = other.GetTime.Clone();
          break;
        case SumOneofCase.LookupByKey:
          LookupByKey = other.LookupByKey.Clone();
          break;
        case SumOneofCase.FetchByKey:
          FetchByKey = other.FetchByKey.Clone();
          break;
        case SumOneofCase.EmbedExpr:
          EmbedExpr = other.EmbedExpr.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update Clone() {
      return new Update(this);
    }

    /// <summary>Field number for the "pure" field.</summary>
    public const int PureFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure Pure {
      get { return sumCase_ == SumOneofCase.Pure ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Pure;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Block Block {
      get { return sumCase_ == SumOneofCase.Block ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Block) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Block;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Create Create {
      get { return sumCase_ == SumOneofCase.Create ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Create) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Create;
      }
    }

    /// <summary>Field number for the "exercise" field.</summary>
    public const int ExerciseFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Exercise Exercise {
      get { return sumCase_ == SumOneofCase.Exercise ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Exercise) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Exercise;
      }
    }

    /// <summary>Field number for the "fetch" field.</summary>
    public const int FetchFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Fetch Fetch {
      get { return sumCase_ == SumOneofCase.Fetch ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Fetch) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Fetch;
      }
    }

    /// <summary>Field number for the "get_time" field.</summary>
    public const int GetTimeFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit GetTime {
      get { return sumCase_ == SumOneofCase.GetTime ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.GetTime;
      }
    }

    /// <summary>Field number for the "lookup_by_key" field.</summary>
    public const int LookupByKeyFieldNumber = 8;
    /// <summary>
    ///*Available since version 1.2*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey LookupByKey {
      get { return sumCase_ == SumOneofCase.LookupByKey ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.LookupByKey;
      }
    }

    /// <summary>Field number for the "fetch_by_key" field.</summary>
    public const int FetchByKeyFieldNumber = 9;
    /// <summary>
    ///*Available since version 1.2*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey FetchByKey {
      get { return sumCase_ == SumOneofCase.FetchByKey ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.FetchByKey;
      }
    }

    /// <summary>Field number for the "embed_expr" field.</summary>
    public const int EmbedExprFieldNumber = 7;
    /// <summary>
    /// see similar constructor in `Scenario` on why this is useful.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.EmbedExpr EmbedExpr {
      get { return sumCase_ == SumOneofCase.EmbedExpr ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.EmbedExpr) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.EmbedExpr;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Pure = 1,
      Block = 2,
      Create = 3,
      Exercise = 4,
      Fetch = 5,
      GetTime = 6,
      LookupByKey = 8,
      FetchByKey = 9,
      EmbedExpr = 7,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pure, other.Pure)) return false;
      if (!object.Equals(Block, other.Block)) return false;
      if (!object.Equals(Create, other.Create)) return false;
      if (!object.Equals(Exercise, other.Exercise)) return false;
      if (!object.Equals(Fetch, other.Fetch)) return false;
      if (!object.Equals(GetTime, other.GetTime)) return false;
      if (!object.Equals(LookupByKey, other.LookupByKey)) return false;
      if (!object.Equals(FetchByKey, other.FetchByKey)) return false;
      if (!object.Equals(EmbedExpr, other.EmbedExpr)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Pure) hash ^= Pure.GetHashCode();
      if (sumCase_ == SumOneofCase.Block) hash ^= Block.GetHashCode();
      if (sumCase_ == SumOneofCase.Create) hash ^= Create.GetHashCode();
      if (sumCase_ == SumOneofCase.Exercise) hash ^= Exercise.GetHashCode();
      if (sumCase_ == SumOneofCase.Fetch) hash ^= Fetch.GetHashCode();
      if (sumCase_ == SumOneofCase.GetTime) hash ^= GetTime.GetHashCode();
      if (sumCase_ == SumOneofCase.LookupByKey) hash ^= LookupByKey.GetHashCode();
      if (sumCase_ == SumOneofCase.FetchByKey) hash ^= FetchByKey.GetHashCode();
      if (sumCase_ == SumOneofCase.EmbedExpr) hash ^= EmbedExpr.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Pure) {
        output.WriteRawTag(10);
        output.WriteMessage(Pure);
      }
      if (sumCase_ == SumOneofCase.Block) {
        output.WriteRawTag(18);
        output.WriteMessage(Block);
      }
      if (sumCase_ == SumOneofCase.Create) {
        output.WriteRawTag(26);
        output.WriteMessage(Create);
      }
      if (sumCase_ == SumOneofCase.Exercise) {
        output.WriteRawTag(34);
        output.WriteMessage(Exercise);
      }
      if (sumCase_ == SumOneofCase.Fetch) {
        output.WriteRawTag(42);
        output.WriteMessage(Fetch);
      }
      if (sumCase_ == SumOneofCase.GetTime) {
        output.WriteRawTag(50);
        output.WriteMessage(GetTime);
      }
      if (sumCase_ == SumOneofCase.EmbedExpr) {
        output.WriteRawTag(58);
        output.WriteMessage(EmbedExpr);
      }
      if (sumCase_ == SumOneofCase.LookupByKey) {
        output.WriteRawTag(66);
        output.WriteMessage(LookupByKey);
      }
      if (sumCase_ == SumOneofCase.FetchByKey) {
        output.WriteRawTag(74);
        output.WriteMessage(FetchByKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Pure) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pure);
      }
      if (sumCase_ == SumOneofCase.Block) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (sumCase_ == SumOneofCase.Create) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Create);
      }
      if (sumCase_ == SumOneofCase.Exercise) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exercise);
      }
      if (sumCase_ == SumOneofCase.Fetch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fetch);
      }
      if (sumCase_ == SumOneofCase.GetTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetTime);
      }
      if (sumCase_ == SumOneofCase.LookupByKey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LookupByKey);
      }
      if (sumCase_ == SumOneofCase.FetchByKey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FetchByKey);
      }
      if (sumCase_ == SumOneofCase.EmbedExpr) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmbedExpr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Pure:
          if (Pure == null) {
            Pure = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure();
          }
          Pure.MergeFrom(other.Pure);
          break;
        case SumOneofCase.Block:
          if (Block == null) {
            Block = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Block();
          }
          Block.MergeFrom(other.Block);
          break;
        case SumOneofCase.Create:
          if (Create == null) {
            Create = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Create();
          }
          Create.MergeFrom(other.Create);
          break;
        case SumOneofCase.Exercise:
          if (Exercise == null) {
            Exercise = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Exercise();
          }
          Exercise.MergeFrom(other.Exercise);
          break;
        case SumOneofCase.Fetch:
          if (Fetch == null) {
            Fetch = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Fetch();
          }
          Fetch.MergeFrom(other.Fetch);
          break;
        case SumOneofCase.GetTime:
          if (GetTime == null) {
            GetTime = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
          }
          GetTime.MergeFrom(other.GetTime);
          break;
        case SumOneofCase.LookupByKey:
          if (LookupByKey == null) {
            LookupByKey = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey();
          }
          LookupByKey.MergeFrom(other.LookupByKey);
          break;
        case SumOneofCase.FetchByKey:
          if (FetchByKey == null) {
            FetchByKey = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey();
          }
          FetchByKey.MergeFrom(other.FetchByKey);
          break;
        case SumOneofCase.EmbedExpr:
          if (EmbedExpr == null) {
            EmbedExpr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.EmbedExpr();
          }
          EmbedExpr.MergeFrom(other.EmbedExpr);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure();
            if (sumCase_ == SumOneofCase.Pure) {
              subBuilder.MergeFrom(Pure);
            }
            input.ReadMessage(subBuilder);
            Pure = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Block subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Block();
            if (sumCase_ == SumOneofCase.Block) {
              subBuilder.MergeFrom(Block);
            }
            input.ReadMessage(subBuilder);
            Block = subBuilder;
            break;
          }
          case 26: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Create subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Create();
            if (sumCase_ == SumOneofCase.Create) {
              subBuilder.MergeFrom(Create);
            }
            input.ReadMessage(subBuilder);
            Create = subBuilder;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Exercise subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Exercise();
            if (sumCase_ == SumOneofCase.Exercise) {
              subBuilder.MergeFrom(Exercise);
            }
            input.ReadMessage(subBuilder);
            Exercise = subBuilder;
            break;
          }
          case 42: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Fetch subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.Fetch();
            if (sumCase_ == SumOneofCase.Fetch) {
              subBuilder.MergeFrom(Fetch);
            }
            input.ReadMessage(subBuilder);
            Fetch = subBuilder;
            break;
          }
          case 50: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.GetTime) {
              subBuilder.MergeFrom(GetTime);
            }
            input.ReadMessage(subBuilder);
            GetTime = subBuilder;
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.EmbedExpr subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.EmbedExpr();
            if (sumCase_ == SumOneofCase.EmbedExpr) {
              subBuilder.MergeFrom(EmbedExpr);
            }
            input.ReadMessage(subBuilder);
            EmbedExpr = subBuilder;
            break;
          }
          case 66: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey();
            if (sumCase_ == SumOneofCase.LookupByKey) {
              subBuilder.MergeFrom(LookupByKey);
            }
            input.ReadMessage(subBuilder);
            LookupByKey = subBuilder;
            break;
          }
          case 74: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Types.RetrieveByKey();
            if (sumCase_ == SumOneofCase.FetchByKey) {
              subBuilder.MergeFrom(FetchByKey);
            }
            input.ReadMessage(subBuilder);
            FetchByKey = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Update message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Create Update
      /// </summary>
      public sealed partial class Create : pb::IMessage<Create> {
        private static readonly pb::MessageParser<Create> _parser = new pb::MessageParser<Create>(() => new Create());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Create> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Create() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Create(Create other) : this() {
          template_ = other.template_ != null ? other.template_.Clone() : null;
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Create Clone() {
          return new Create(this);
        }

        /// <summary>Field number for the "template" field.</summary>
        public const int TemplateFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName template_;
        /// <summary>
        /// Template type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName Template {
          get { return template_; }
          set {
            template_ = value;
          }
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr expr_;
        /// <summary>
        /// Template argument
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Create);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Create other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Template, other.Template)) return false;
          if (!object.Equals(Expr, other.Expr)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (template_ != null) hash ^= Template.GetHashCode();
          if (expr_ != null) hash ^= Expr.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (template_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Template);
          }
          if (expr_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (template_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
          }
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Create other) {
          if (other == null) {
            return;
          }
          if (other.template_ != null) {
            if (template_ == null) {
              Template = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
            }
            Template.MergeFrom(other.Template);
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Expr.MergeFrom(other.Expr);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (template_ == null) {
                  Template = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
                }
                input.ReadMessage(Template);
                break;
              }
              case 18: {
                if (expr_ == null) {
                  Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Expr);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Exercise Update
      /// </summary>
      public sealed partial class Exercise : pb::IMessage<Exercise> {
        private static readonly pb::MessageParser<Exercise> _parser = new pb::MessageParser<Exercise>(() => new Exercise());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Exercise> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exercise() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exercise(Exercise other) : this() {
          template_ = other.template_ != null ? other.template_.Clone() : null;
          choice_ = other.choice_;
          cid_ = other.cid_ != null ? other.cid_.Clone() : null;
          actor_ = other.actor_ != null ? other.actor_.Clone() : null;
          arg_ = other.arg_ != null ? other.arg_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exercise Clone() {
          return new Exercise(this);
        }

        /// <summary>Field number for the "template" field.</summary>
        public const int TemplateFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName template_;
        /// <summary>
        /// Template type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName Template {
          get { return template_; }
          set {
            template_ = value;
          }
        }

        /// <summary>Field number for the "choice" field.</summary>
        public const int ChoiceFieldNumber = 2;
        private string choice_ = "";
        /// <summary>
        /// name of the exercised template choice
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Choice {
          get { return choice_; }
          set {
            choice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "cid" field.</summary>
        public const int CidFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr cid_;
        /// <summary>
        /// contract id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Cid {
          get { return cid_; }
          set {
            cid_ = value;
          }
        }

        /// <summary>Field number for the "actor" field.</summary>
        public const int ActorFieldNumber = 4;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr actor_;
        /// <summary>
        /// actors
        /// *optional since version 1.5*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Actor {
          get { return actor_; }
          set {
            actor_ = value;
          }
        }

        /// <summary>Field number for the "arg" field.</summary>
        public const int ArgFieldNumber = 5;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr arg_;
        /// <summary>
        /// argument
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Arg {
          get { return arg_; }
          set {
            arg_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Exercise);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Exercise other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Template, other.Template)) return false;
          if (Choice != other.Choice) return false;
          if (!object.Equals(Cid, other.Cid)) return false;
          if (!object.Equals(Actor, other.Actor)) return false;
          if (!object.Equals(Arg, other.Arg)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (template_ != null) hash ^= Template.GetHashCode();
          if (Choice.Length != 0) hash ^= Choice.GetHashCode();
          if (cid_ != null) hash ^= Cid.GetHashCode();
          if (actor_ != null) hash ^= Actor.GetHashCode();
          if (arg_ != null) hash ^= Arg.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (template_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Template);
          }
          if (Choice.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Choice);
          }
          if (cid_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Cid);
          }
          if (actor_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Actor);
          }
          if (arg_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Arg);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (template_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
          }
          if (Choice.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Choice);
          }
          if (cid_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cid);
          }
          if (actor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Actor);
          }
          if (arg_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arg);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Exercise other) {
          if (other == null) {
            return;
          }
          if (other.template_ != null) {
            if (template_ == null) {
              Template = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
            }
            Template.MergeFrom(other.Template);
          }
          if (other.Choice.Length != 0) {
            Choice = other.Choice;
          }
          if (other.cid_ != null) {
            if (cid_ == null) {
              Cid = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Cid.MergeFrom(other.Cid);
          }
          if (other.actor_ != null) {
            if (actor_ == null) {
              Actor = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Actor.MergeFrom(other.Actor);
          }
          if (other.arg_ != null) {
            if (arg_ == null) {
              Arg = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Arg.MergeFrom(other.Arg);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (template_ == null) {
                  Template = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
                }
                input.ReadMessage(Template);
                break;
              }
              case 18: {
                Choice = input.ReadString();
                break;
              }
              case 26: {
                if (cid_ == null) {
                  Cid = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Cid);
                break;
              }
              case 34: {
                if (actor_ == null) {
                  Actor = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Actor);
                break;
              }
              case 42: {
                if (arg_ == null) {
                  Arg = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Arg);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Fetch Update
      /// </summary>
      public sealed partial class Fetch : pb::IMessage<Fetch> {
        private static readonly pb::MessageParser<Fetch> _parser = new pb::MessageParser<Fetch>(() => new Fetch());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Fetch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fetch() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fetch(Fetch other) : this() {
          template_ = other.template_ != null ? other.template_.Clone() : null;
          cid_ = other.cid_ != null ? other.cid_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fetch Clone() {
          return new Fetch(this);
        }

        /// <summary>Field number for the "template" field.</summary>
        public const int TemplateFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName template_;
        /// <summary>
        /// Template type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName Template {
          get { return template_; }
          set {
            template_ = value;
          }
        }

        /// <summary>Field number for the "cid" field.</summary>
        public const int CidFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr cid_;
        /// <summary>
        /// contract id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Cid {
          get { return cid_; }
          set {
            cid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Fetch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Fetch other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Template, other.Template)) return false;
          if (!object.Equals(Cid, other.Cid)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (template_ != null) hash ^= Template.GetHashCode();
          if (cid_ != null) hash ^= Cid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (template_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Template);
          }
          if (cid_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Cid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (template_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
          }
          if (cid_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Fetch other) {
          if (other == null) {
            return;
          }
          if (other.template_ != null) {
            if (template_ == null) {
              Template = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
            }
            Template.MergeFrom(other.Template);
          }
          if (other.cid_ != null) {
            if (cid_ == null) {
              Cid = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Cid.MergeFrom(other.Cid);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (template_ == null) {
                  Template = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
                }
                input.ReadMessage(Template);
                break;
              }
              case 18: {
                if (cid_ == null) {
                  Cid = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Cid);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Embeded Exression Update
      /// </summary>
      public sealed partial class EmbedExpr : pb::IMessage<EmbedExpr> {
        private static readonly pb::MessageParser<EmbedExpr> _parser = new pb::MessageParser<EmbedExpr>(() => new EmbedExpr());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EmbedExpr> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr(EmbedExpr other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr Clone() {
          return new EmbedExpr(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
        /// <summary>
        /// Expression type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr body_;
        /// <summary>
        /// Expression body
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EmbedExpr);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EmbedExpr other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EmbedExpr other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Retrieve by key Update
      /// *Available since version 1.2*
      /// </summary>
      public sealed partial class RetrieveByKey : pb::IMessage<RetrieveByKey> {
        private static readonly pb::MessageParser<RetrieveByKey> _parser = new pb::MessageParser<RetrieveByKey>(() => new RetrieveByKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RetrieveByKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Update.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetrieveByKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetrieveByKey(RetrieveByKey other) : this() {
          template_ = other.template_ != null ? other.template_.Clone() : null;
          key_ = other.key_ != null ? other.key_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetrieveByKey Clone() {
          return new RetrieveByKey(this);
        }

        /// <summary>Field number for the "template" field.</summary>
        public const int TemplateFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName template_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName Template {
          get { return template_; }
          set {
            template_ = value;
          }
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RetrieveByKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RetrieveByKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Template, other.Template)) return false;
          if (!object.Equals(Key, other.Key)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (template_ != null) hash ^= Template.GetHashCode();
          if (key_ != null) hash ^= Key.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (template_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Template);
          }
          if (key_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Key);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (template_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
          }
          if (key_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RetrieveByKey other) {
          if (other == null) {
            return;
          }
          if (other.template_ != null) {
            if (template_ == null) {
              Template = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
            }
            Template.MergeFrom(other.Template);
          }
          if (other.key_ != null) {
            if (key_ == null) {
              Key = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Key.MergeFrom(other.Key);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (template_ == null) {
                  Template = new global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeConName();
                }
                input.ReadMessage(Template);
                break;
              }
              case 18: {
                if (key_ == null) {
                  Key = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Key);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Scenario actions
  /// </summary>
  public sealed partial class Scenario : pb::IMessage<Scenario> {
    private static readonly pb::MessageParser<Scenario> _parser = new pb::MessageParser<Scenario>(() => new Scenario());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scenario> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenario() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenario(Scenario other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Pure:
          Pure = other.Pure.Clone();
          break;
        case SumOneofCase.Block:
          Block = other.Block.Clone();
          break;
        case SumOneofCase.Commit:
          Commit = other.Commit.Clone();
          break;
        case SumOneofCase.MustFailAt:
          MustFailAt = other.MustFailAt.Clone();
          break;
        case SumOneofCase.Pass:
          Pass = other.Pass.Clone();
          break;
        case SumOneofCase.GetTime:
          GetTime = other.GetTime.Clone();
          break;
        case SumOneofCase.GetParty:
          GetParty = other.GetParty.Clone();
          break;
        case SumOneofCase.EmbedExpr:
          EmbedExpr = other.EmbedExpr.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenario Clone() {
      return new Scenario(this);
    }

    /// <summary>Field number for the "pure" field.</summary>
    public const int PureFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure Pure {
      get { return sumCase_ == SumOneofCase.Pure ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Pure;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Block Block {
      get { return sumCase_ == SumOneofCase.Block ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Block) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Block;
      }
    }

    /// <summary>Field number for the "commit" field.</summary>
    public const int CommitFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit Commit {
      get { return sumCase_ == SumOneofCase.Commit ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Commit;
      }
    }

    /// <summary>Field number for the "mustFailAt" field.</summary>
    public const int MustFailAtFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit MustFailAt {
      get { return sumCase_ == SumOneofCase.MustFailAt ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.MustFailAt;
      }
    }

    /// <summary>Field number for the "pass" field.</summary>
    public const int PassFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Pass {
      get { return sumCase_ == SumOneofCase.Pass ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Pass;
      }
    }

    /// <summary>Field number for the "get_time" field.</summary>
    public const int GetTimeFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit GetTime {
      get { return sumCase_ == SumOneofCase.GetTime ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.GetTime;
      }
    }

    /// <summary>Field number for the "get_party" field.</summary>
    public const int GetPartyFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr GetParty {
      get { return sumCase_ == SumOneofCase.GetParty ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.GetParty;
      }
    }

    /// <summary>Field number for the "embed_expr" field.</summary>
    public const int EmbedExprFieldNumber = 8;
    /// <summary>
    /// embed an expression of type Scenario. note that this construct is useful
    /// to explicitly mark the start of scenario execution, which is useful in
    /// top level definitions. for example if we hav
    ///
    /// def test : Scenario Unit = if &lt;blah> then &lt;this> else &lt;that>
    ///
    /// this is not a value, since it's headed with an `if`, but we can turn
    /// it into a value by wrapping the `if` with this constructor. in that
    /// case, the `if` will be executed every time the scenario runs --
    /// as expected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.EmbedExpr EmbedExpr {
      get { return sumCase_ == SumOneofCase.EmbedExpr ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.EmbedExpr) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.EmbedExpr;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Pure = 1,
      Block = 2,
      Commit = 3,
      MustFailAt = 4,
      Pass = 5,
      GetTime = 6,
      GetParty = 7,
      EmbedExpr = 8,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scenario);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scenario other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pure, other.Pure)) return false;
      if (!object.Equals(Block, other.Block)) return false;
      if (!object.Equals(Commit, other.Commit)) return false;
      if (!object.Equals(MustFailAt, other.MustFailAt)) return false;
      if (!object.Equals(Pass, other.Pass)) return false;
      if (!object.Equals(GetTime, other.GetTime)) return false;
      if (!object.Equals(GetParty, other.GetParty)) return false;
      if (!object.Equals(EmbedExpr, other.EmbedExpr)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Pure) hash ^= Pure.GetHashCode();
      if (sumCase_ == SumOneofCase.Block) hash ^= Block.GetHashCode();
      if (sumCase_ == SumOneofCase.Commit) hash ^= Commit.GetHashCode();
      if (sumCase_ == SumOneofCase.MustFailAt) hash ^= MustFailAt.GetHashCode();
      if (sumCase_ == SumOneofCase.Pass) hash ^= Pass.GetHashCode();
      if (sumCase_ == SumOneofCase.GetTime) hash ^= GetTime.GetHashCode();
      if (sumCase_ == SumOneofCase.GetParty) hash ^= GetParty.GetHashCode();
      if (sumCase_ == SumOneofCase.EmbedExpr) hash ^= EmbedExpr.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Pure) {
        output.WriteRawTag(10);
        output.WriteMessage(Pure);
      }
      if (sumCase_ == SumOneofCase.Block) {
        output.WriteRawTag(18);
        output.WriteMessage(Block);
      }
      if (sumCase_ == SumOneofCase.Commit) {
        output.WriteRawTag(26);
        output.WriteMessage(Commit);
      }
      if (sumCase_ == SumOneofCase.MustFailAt) {
        output.WriteRawTag(34);
        output.WriteMessage(MustFailAt);
      }
      if (sumCase_ == SumOneofCase.Pass) {
        output.WriteRawTag(42);
        output.WriteMessage(Pass);
      }
      if (sumCase_ == SumOneofCase.GetTime) {
        output.WriteRawTag(50);
        output.WriteMessage(GetTime);
      }
      if (sumCase_ == SumOneofCase.GetParty) {
        output.WriteRawTag(58);
        output.WriteMessage(GetParty);
      }
      if (sumCase_ == SumOneofCase.EmbedExpr) {
        output.WriteRawTag(66);
        output.WriteMessage(EmbedExpr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Pure) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pure);
      }
      if (sumCase_ == SumOneofCase.Block) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (sumCase_ == SumOneofCase.Commit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commit);
      }
      if (sumCase_ == SumOneofCase.MustFailAt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MustFailAt);
      }
      if (sumCase_ == SumOneofCase.Pass) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pass);
      }
      if (sumCase_ == SumOneofCase.GetTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetTime);
      }
      if (sumCase_ == SumOneofCase.GetParty) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetParty);
      }
      if (sumCase_ == SumOneofCase.EmbedExpr) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmbedExpr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scenario other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Pure:
          if (Pure == null) {
            Pure = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure();
          }
          Pure.MergeFrom(other.Pure);
          break;
        case SumOneofCase.Block:
          if (Block == null) {
            Block = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Block();
          }
          Block.MergeFrom(other.Block);
          break;
        case SumOneofCase.Commit:
          if (Commit == null) {
            Commit = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit();
          }
          Commit.MergeFrom(other.Commit);
          break;
        case SumOneofCase.MustFailAt:
          if (MustFailAt == null) {
            MustFailAt = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit();
          }
          MustFailAt.MergeFrom(other.MustFailAt);
          break;
        case SumOneofCase.Pass:
          if (Pass == null) {
            Pass = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
          }
          Pass.MergeFrom(other.Pass);
          break;
        case SumOneofCase.GetTime:
          if (GetTime == null) {
            GetTime = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
          }
          GetTime.MergeFrom(other.GetTime);
          break;
        case SumOneofCase.GetParty:
          if (GetParty == null) {
            GetParty = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
          }
          GetParty.MergeFrom(other.GetParty);
          break;
        case SumOneofCase.EmbedExpr:
          if (EmbedExpr == null) {
            EmbedExpr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.EmbedExpr();
          }
          EmbedExpr.MergeFrom(other.EmbedExpr);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Pure();
            if (sumCase_ == SumOneofCase.Pure) {
              subBuilder.MergeFrom(Pure);
            }
            input.ReadMessage(subBuilder);
            Pure = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Block subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Block();
            if (sumCase_ == SumOneofCase.Block) {
              subBuilder.MergeFrom(Block);
            }
            input.ReadMessage(subBuilder);
            Block = subBuilder;
            break;
          }
          case 26: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit();
            if (sumCase_ == SumOneofCase.Commit) {
              subBuilder.MergeFrom(Commit);
            }
            input.ReadMessage(subBuilder);
            Commit = subBuilder;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.Commit();
            if (sumCase_ == SumOneofCase.MustFailAt) {
              subBuilder.MergeFrom(MustFailAt);
            }
            input.ReadMessage(subBuilder);
            MustFailAt = subBuilder;
            break;
          }
          case 42: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            if (sumCase_ == SumOneofCase.Pass) {
              subBuilder.MergeFrom(Pass);
            }
            input.ReadMessage(subBuilder);
            Pass = subBuilder;
            break;
          }
          case 50: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.GetTime) {
              subBuilder.MergeFrom(GetTime);
            }
            input.ReadMessage(subBuilder);
            GetTime = subBuilder;
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            if (sumCase_ == SumOneofCase.GetParty) {
              subBuilder.MergeFrom(GetParty);
            }
            input.ReadMessage(subBuilder);
            GetParty = subBuilder;
            break;
          }
          case 66: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.EmbedExpr subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Types.EmbedExpr();
            if (sumCase_ == SumOneofCase.EmbedExpr) {
              subBuilder.MergeFrom(EmbedExpr);
            }
            input.ReadMessage(subBuilder);
            EmbedExpr = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Scenario message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Commit : pb::IMessage<Commit> {
        private static readonly pb::MessageParser<Commit> _parser = new pb::MessageParser<Commit>(() => new Commit());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Commit> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Commit() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Commit(Commit other) : this() {
          party_ = other.party_ != null ? other.party_.Clone() : null;
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          retType_ = other.retType_ != null ? other.retType_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Commit Clone() {
          return new Commit(this);
        }

        /// <summary>Field number for the "party" field.</summary>
        public const int PartyFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr party_;
        /// <summary>
        /// committing party
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Party {
          get { return party_; }
          set {
            party_ = value;
          }
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr expr_;
        /// <summary>
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        /// <summary>Field number for the "ret_type" field.</summary>
        public const int RetTypeFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type retType_;
        /// <summary>
        /// type of result
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type RetType {
          get { return retType_; }
          set {
            retType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Commit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Commit other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Party, other.Party)) return false;
          if (!object.Equals(Expr, other.Expr)) return false;
          if (!object.Equals(RetType, other.RetType)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (party_ != null) hash ^= Party.GetHashCode();
          if (expr_ != null) hash ^= Expr.GetHashCode();
          if (retType_ != null) hash ^= RetType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (party_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Party);
          }
          if (expr_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expr);
          }
          if (retType_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(RetType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (party_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Party);
          }
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          if (retType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Commit other) {
          if (other == null) {
            return;
          }
          if (other.party_ != null) {
            if (party_ == null) {
              Party = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Party.MergeFrom(other.Party);
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Expr.MergeFrom(other.Expr);
          }
          if (other.retType_ != null) {
            if (retType_ == null) {
              RetType = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            RetType.MergeFrom(other.RetType);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (party_ == null) {
                  Party = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Party);
                break;
              }
              case 18: {
                if (expr_ == null) {
                  Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 26: {
                if (retType_ == null) {
                  RetType = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(RetType);
                break;
              }
            }
          }
        }

      }

      public sealed partial class EmbedExpr : pb::IMessage<EmbedExpr> {
        private static readonly pb::MessageParser<EmbedExpr> _parser = new pb::MessageParser<EmbedExpr>(() => new EmbedExpr());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EmbedExpr> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.Scenario.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr(EmbedExpr other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr Clone() {
          return new EmbedExpr(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr body_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EmbedExpr);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EmbedExpr other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EmbedExpr other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Template choice definition.
  /// </summary>
  public sealed partial class TemplateChoice : pb::IMessage<TemplateChoice> {
    private static readonly pb::MessageParser<TemplateChoice> _parser = new pb::MessageParser<TemplateChoice>(() => new TemplateChoice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TemplateChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateChoice(TemplateChoice other) : this() {
      name_ = other.name_;
      consuming_ = other.consuming_;
      controllers_ = other.controllers_ != null ? other.controllers_.Clone() : null;
      argBinder_ = other.argBinder_ != null ? other.argBinder_.Clone() : null;
      retType_ = other.retType_ != null ? other.retType_.Clone() : null;
      update_ = other.update_ != null ? other.update_.Clone() : null;
      selfBinder_ = other.selfBinder_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateChoice Clone() {
      return new TemplateChoice(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consuming" field.</summary>
    public const int ConsumingFieldNumber = 2;
    private bool consuming_;
    /// <summary>
    /// Choice type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Consuming {
      get { return consuming_; }
      set {
        consuming_ = value;
      }
    }

    /// <summary>Field number for the "controllers" field.</summary>
    public const int ControllersFieldNumber = 3;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr controllers_;
    /// <summary>
    /// The controllers of the choice. They have type `List Party` and the
    /// template parameter in scope, but not the choice parameter. All of these
    /// controllers need to authorize the exercising of this choice (aka
    /// conjunctive choice controllers).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Controllers {
      get { return controllers_; }
      set {
        controllers_ = value;
      }
    }

    /// <summary>Field number for the "arg_binder" field.</summary>
    public const int ArgBinderFieldNumber = 4;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType argBinder_;
    /// <summary>
    /// Name to which the choice argument is bound and its type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType ArgBinder {
      get { return argBinder_; }
      set {
        argBinder_ = value;
      }
    }

    /// <summary>Field number for the "ret_type" field.</summary>
    public const int RetTypeFieldNumber = 5;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type retType_;
    /// <summary>
    /// Return type of the choice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type RetType {
      get { return retType_; }
      set {
        retType_ = value;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 6;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr update_;
    /// <summary>
    /// Follow-up update of the choice. It has type `Update &lt;ret_type>` and both
    /// the template parameter and the choice parameter in scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Update {
      get { return update_; }
      set {
        update_ = value;
      }
    }

    /// <summary>Field number for the "self_binder" field.</summary>
    public const int SelfBinderFieldNumber = 7;
    private string selfBinder_ = "";
    /// <summary>
    /// Name to bind the ContractId of the contract this choice is exercised on to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelfBinder {
      get { return selfBinder_; }
      set {
        selfBinder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 8;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Location location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TemplateChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TemplateChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Consuming != other.Consuming) return false;
      if (!object.Equals(Controllers, other.Controllers)) return false;
      if (!object.Equals(ArgBinder, other.ArgBinder)) return false;
      if (!object.Equals(RetType, other.RetType)) return false;
      if (!object.Equals(Update, other.Update)) return false;
      if (SelfBinder != other.SelfBinder) return false;
      if (!object.Equals(Location, other.Location)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Consuming != false) hash ^= Consuming.GetHashCode();
      if (controllers_ != null) hash ^= Controllers.GetHashCode();
      if (argBinder_ != null) hash ^= ArgBinder.GetHashCode();
      if (retType_ != null) hash ^= RetType.GetHashCode();
      if (update_ != null) hash ^= Update.GetHashCode();
      if (SelfBinder.Length != 0) hash ^= SelfBinder.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Consuming != false) {
        output.WriteRawTag(16);
        output.WriteBool(Consuming);
      }
      if (controllers_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Controllers);
      }
      if (argBinder_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ArgBinder);
      }
      if (retType_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RetType);
      }
      if (update_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Update);
      }
      if (SelfBinder.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SelfBinder);
      }
      if (location_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Consuming != false) {
        size += 1 + 1;
      }
      if (controllers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Controllers);
      }
      if (argBinder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArgBinder);
      }
      if (retType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetType);
      }
      if (update_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (SelfBinder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SelfBinder);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TemplateChoice other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Consuming != false) {
        Consuming = other.Consuming;
      }
      if (other.controllers_ != null) {
        if (controllers_ == null) {
          Controllers = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Controllers.MergeFrom(other.Controllers);
      }
      if (other.argBinder_ != null) {
        if (argBinder_ == null) {
          ArgBinder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType();
        }
        ArgBinder.MergeFrom(other.ArgBinder);
      }
      if (other.retType_ != null) {
        if (retType_ == null) {
          RetType = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
        }
        RetType.MergeFrom(other.RetType);
      }
      if (other.update_ != null) {
        if (update_ == null) {
          Update = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Update.MergeFrom(other.Update);
      }
      if (other.SelfBinder.Length != 0) {
        SelfBinder = other.SelfBinder;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Consuming = input.ReadBool();
            break;
          }
          case 26: {
            if (controllers_ == null) {
              Controllers = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Controllers);
            break;
          }
          case 34: {
            if (argBinder_ == null) {
              ArgBinder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.VarWithType();
            }
            input.ReadMessage(ArgBinder);
            break;
          }
          case 42: {
            if (retType_ == null) {
              RetType = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            input.ReadMessage(RetType);
            break;
          }
          case 50: {
            if (update_ == null) {
              Update = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Update);
            break;
          }
          case 58: {
            SelfBinder = input.ReadString();
            break;
          }
          case 66: {
            if (location_ == null) {
              Location = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location();
            }
            input.ReadMessage(Location);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// we restrict key expressions to records of projections, much like SQL
  /// </summary>
  public sealed partial class KeyExpr : pb::IMessage<KeyExpr> {
    private static readonly pb::MessageParser<KeyExpr> _parser = new pb::MessageParser<KeyExpr>(() => new KeyExpr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyExpr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExpr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExpr(KeyExpr other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Projections:
          Projections = other.Projections.Clone();
          break;
        case SumOneofCase.Record:
          Record = other.Record.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExpr Clone() {
      return new KeyExpr(this);
    }

    /// <summary>Field number for the "projections" field.</summary>
    public const int ProjectionsFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projections Projections {
      get { return sumCase_ == SumOneofCase.Projections ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projections) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Projections;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Record Record {
      get { return sumCase_ == SumOneofCase.Record ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Record) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Record;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Projections = 1,
      Record = 2,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyExpr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyExpr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Projections, other.Projections)) return false;
      if (!object.Equals(Record, other.Record)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Projections) hash ^= Projections.GetHashCode();
      if (sumCase_ == SumOneofCase.Record) hash ^= Record.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Projections) {
        output.WriteRawTag(10);
        output.WriteMessage(Projections);
      }
      if (sumCase_ == SumOneofCase.Record) {
        output.WriteRawTag(18);
        output.WriteMessage(Record);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Projections) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Projections);
      }
      if (sumCase_ == SumOneofCase.Record) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyExpr other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Projections:
          if (Projections == null) {
            Projections = new global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projections();
          }
          Projections.MergeFrom(other.Projections);
          break;
        case SumOneofCase.Record:
          if (Record == null) {
            Record = new global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Record();
          }
          Record.MergeFrom(other.Record);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projections subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projections();
            if (sumCase_ == SumOneofCase.Projections) {
              subBuilder.MergeFrom(Projections);
            }
            input.ReadMessage(subBuilder);
            Projections = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Record subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Record();
            if (sumCase_ == SumOneofCase.Record) {
              subBuilder.MergeFrom(Record);
            }
            input.ReadMessage(subBuilder);
            Record = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the KeyExpr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Projection : pb::IMessage<Projection> {
        private static readonly pb::MessageParser<Projection> _parser = new pb::MessageParser<Projection>(() => new Projection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Projection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projection(Projection other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          field_ = other.field_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projection Clone() {
          return new Projection(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// Always fully applied
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 2;
        private string field_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Projection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Projection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if (Field != other.Field) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          if (Field.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Field);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Projection other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                Field = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// note that the projection is always referring to the template parameter.
      /// </summary>
      public sealed partial class Projections : pb::IMessage<Projections> {
        private static readonly pb::MessageParser<Projections> _parser = new pb::MessageParser<Projections>(() => new Projections());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Projections> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projections() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projections(Projections other) : this() {
          projections_ = other.projections_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projections Clone() {
          return new Projections(this);
        }

        /// <summary>Field number for the "projections" field.</summary>
        public const int Projections_FieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projection> _repeated_projections_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projection.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projection> projections_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projection>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.Projection> Projections_ {
          get { return projections_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Projections);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Projections other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!projections_.Equals(other.projections_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= projections_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          projections_.WriteTo(output, _repeated_projections_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += projections_.CalculateSize(_repeated_projections_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Projections other) {
          if (other == null) {
            return;
          }
          projections_.Add(other.projections_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                projections_.AddEntriesFrom(input, _repeated_projections_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class RecordField : pb::IMessage<RecordField> {
        private static readonly pb::MessageParser<RecordField> _parser = new pb::MessageParser<RecordField>(() => new RecordField());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecordField> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordField() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordField(RecordField other) : this() {
          field_ = other.field_;
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordField Clone() {
          return new RecordField(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private string field_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr expr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecordField);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecordField other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field != other.Field) return false;
          if (!object.Equals(Expr, other.Expr)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (expr_ != null) hash ^= Expr.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Field.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field);
          }
          if (expr_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecordField other) {
          if (other == null) {
            return;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr();
            }
            Expr.MergeFrom(other.Expr);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Field = input.ReadString();
                break;
              }
              case 18: {
                if (expr_ == null) {
                  Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr();
                }
                input.ReadMessage(Expr);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Record : pb::IMessage<Record> {
        private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Record> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record(Record other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record Clone() {
          return new Record(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// Always fully applied
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.RecordField> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.RecordField.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.RecordField> fields_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.RecordField>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr.Types.RecordField> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Record);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Record other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Record other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Contract template definition
  /// </summary>
  public sealed partial class DefTemplate : pb::IMessage<DefTemplate> {
    private static readonly pb::MessageParser<DefTemplate> _parser = new pb::MessageParser<DefTemplate>(() => new DefTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefTemplate(DefTemplate other) : this() {
      tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
      param_ = other.param_;
      precond_ = other.precond_ != null ? other.precond_.Clone() : null;
      signatories_ = other.signatories_ != null ? other.signatories_.Clone() : null;
      agreement_ = other.agreement_ != null ? other.agreement_.Clone() : null;
      choices_ = other.choices_.Clone();
      observers_ = other.observers_ != null ? other.observers_.Clone() : null;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      key_ = other.key_ != null ? other.key_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefTemplate Clone() {
      return new DefTemplate(this);
    }

    /// <summary>Field number for the "tycon" field.</summary>
    public const int TyconFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName tycon_;
    /// <summary>
    /// The type constructor for the template, acting as both
    /// the name of the template and the type of the template argument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName Tycon {
      get { return tycon_; }
      set {
        tycon_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private string param_ = "";
    /// <summary>
    /// Name to which the template argument is bound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "precond" field.</summary>
    public const int PrecondFieldNumber = 4;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr precond_;
    /// <summary>
    /// Pre-condition that the template argument must satisfy.
    /// When present, it has type `Bool` and the template parameter in scope.
    /// *Optional*, interpreted as 'True' if undefined
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Precond {
      get { return precond_; }
      set {
        precond_ = value;
      }
    }

    /// <summary>Field number for the "signatories" field.</summary>
    public const int SignatoriesFieldNumber = 5;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr signatories_;
    /// <summary>
    /// The signatories of the contract. They have type `List Party` and the
    /// template parameter in scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Signatories {
      get { return signatories_; }
      set {
        signatories_ = value;
      }
    }

    /// <summary>Field number for the "agreement" field.</summary>
    public const int AgreementFieldNumber = 6;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr agreement_;
    /// <summary>
    /// The agreement text associated with the contract. It has type `Text` and
    /// the template parameter in scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Agreement {
      get { return agreement_; }
      set {
        agreement_ = value;
      }
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.TemplateChoice> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(58, global::Com.DigitalAsset.Daml_lf.DamlLf1.TemplateChoice.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TemplateChoice> choices_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TemplateChoice>();
    /// <summary>
    /// The choices available in the resulting contract.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TemplateChoice> Choices {
      get { return choices_; }
    }

    /// <summary>Field number for the "observers" field.</summary>
    public const int ObserversFieldNumber = 8;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr observers_;
    /// <summary>
    /// The observers of the contract. They have type `List Party` and the
    /// template parameter in scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Observers {
      get { return observers_; }
      set {
        observers_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 9;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Location location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 10;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate.Types.DefKey key_;
    /// <summary>
    /// They key definition for the template, if present
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate.Types.DefKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tycon, other.Tycon)) return false;
      if (Param != other.Param) return false;
      if (!object.Equals(Precond, other.Precond)) return false;
      if (!object.Equals(Signatories, other.Signatories)) return false;
      if (!object.Equals(Agreement, other.Agreement)) return false;
      if(!choices_.Equals(other.choices_)) return false;
      if (!object.Equals(Observers, other.Observers)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Key, other.Key)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tycon_ != null) hash ^= Tycon.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (precond_ != null) hash ^= Precond.GetHashCode();
      if (signatories_ != null) hash ^= Signatories.GetHashCode();
      if (agreement_ != null) hash ^= Agreement.GetHashCode();
      hash ^= choices_.GetHashCode();
      if (observers_ != null) hash ^= Observers.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (key_ != null) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tycon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tycon);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Param);
      }
      if (precond_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Precond);
      }
      if (signatories_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Signatories);
      }
      if (agreement_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Agreement);
      }
      choices_.WriteTo(output, _repeated_choices_codec);
      if (observers_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Observers);
      }
      if (location_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Location);
      }
      if (key_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tycon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (precond_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Precond);
      }
      if (signatories_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signatories);
      }
      if (agreement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Agreement);
      }
      size += choices_.CalculateSize(_repeated_choices_codec);
      if (observers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Observers);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefTemplate other) {
      if (other == null) {
        return;
      }
      if (other.tycon_ != null) {
        if (tycon_ == null) {
          Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName();
        }
        Tycon.MergeFrom(other.Tycon);
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      if (other.precond_ != null) {
        if (precond_ == null) {
          Precond = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Precond.MergeFrom(other.Precond);
      }
      if (other.signatories_ != null) {
        if (signatories_ == null) {
          Signatories = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Signatories.MergeFrom(other.Signatories);
      }
      if (other.agreement_ != null) {
        if (agreement_ == null) {
          Agreement = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Agreement.MergeFrom(other.Agreement);
      }
      choices_.Add(other.choices_);
      if (other.observers_ != null) {
        if (observers_ == null) {
          Observers = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Observers.MergeFrom(other.Observers);
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.key_ != null) {
        if (key_ == null) {
          Key = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate.Types.DefKey();
        }
        Key.MergeFrom(other.Key);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName();
            }
            input.ReadMessage(Tycon);
            break;
          }
          case 18: {
            Param = input.ReadString();
            break;
          }
          case 34: {
            if (precond_ == null) {
              Precond = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Precond);
            break;
          }
          case 42: {
            if (signatories_ == null) {
              Signatories = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Signatories);
            break;
          }
          case 50: {
            if (agreement_ == null) {
              Agreement = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Agreement);
            break;
          }
          case 58: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
          case 66: {
            if (observers_ == null) {
              Observers = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Observers);
            break;
          }
          case 74: {
            if (location_ == null) {
              Location = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 82: {
            if (key_ == null) {
              Key = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate.Types.DefKey();
            }
            input.ReadMessage(Key);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DefTemplate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class DefKey : pb::IMessage<DefKey> {
        private static readonly pb::MessageParser<DefKey> _parser = new pb::MessageParser<DefKey>(() => new DefKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DefKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefKey(DefKey other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          maintainers_ = other.maintainers_ != null ? other.maintainers_.Clone() : null;
          switch (other.KeyExprCase) {
            case KeyExprOneofCase.Key:
              Key = other.Key.Clone();
              break;
            case KeyExprOneofCase.ComplexKey:
              ComplexKey = other.ComplexKey.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefKey Clone() {
          return new DefKey(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr Key {
          get { return keyExprCase_ == KeyExprOneofCase.Key ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr) keyExpr_ : null; }
          set {
            keyExpr_ = value;
            keyExprCase_ = value == null ? KeyExprOneofCase.None : KeyExprOneofCase.Key;
          }
        }

        /// <summary>Field number for the "complex_key" field.</summary>
        public const int ComplexKeyFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr ComplexKey {
          get { return keyExprCase_ == KeyExprOneofCase.ComplexKey ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr) keyExpr_ : null; }
          set {
            keyExpr_ = value;
            keyExprCase_ = value == null ? KeyExprOneofCase.None : KeyExprOneofCase.ComplexKey;
          }
        }

        /// <summary>Field number for the "maintainers" field.</summary>
        public const int MaintainersFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr maintainers_;
        /// <summary>
        /// a function from the key type to [Party]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Maintainers {
          get { return maintainers_; }
          set {
            maintainers_ = value;
          }
        }

        private object keyExpr_;
        /// <summary>Enum of possible cases for the "key_expr" oneof.</summary>
        public enum KeyExprOneofCase {
          None = 0,
          Key = 2,
          ComplexKey = 4,
        }
        private KeyExprOneofCase keyExprCase_ = KeyExprOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyExprOneofCase KeyExprCase {
          get { return keyExprCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKeyExpr() {
          keyExprCase_ = KeyExprOneofCase.None;
          keyExpr_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DefKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DefKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if (!object.Equals(Key, other.Key)) return false;
          if (!object.Equals(ComplexKey, other.ComplexKey)) return false;
          if (!object.Equals(Maintainers, other.Maintainers)) return false;
          if (KeyExprCase != other.KeyExprCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (keyExprCase_ == KeyExprOneofCase.Key) hash ^= Key.GetHashCode();
          if (keyExprCase_ == KeyExprOneofCase.ComplexKey) hash ^= ComplexKey.GetHashCode();
          if (maintainers_ != null) hash ^= Maintainers.GetHashCode();
          hash ^= (int) keyExprCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (keyExprCase_ == KeyExprOneofCase.Key) {
            output.WriteRawTag(18);
            output.WriteMessage(Key);
          }
          if (maintainers_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Maintainers);
          }
          if (keyExprCase_ == KeyExprOneofCase.ComplexKey) {
            output.WriteRawTag(34);
            output.WriteMessage(ComplexKey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (keyExprCase_ == KeyExprOneofCase.Key) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
          }
          if (keyExprCase_ == KeyExprOneofCase.ComplexKey) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComplexKey);
          }
          if (maintainers_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maintainers);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DefKey other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.maintainers_ != null) {
            if (maintainers_ == null) {
              Maintainers = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            Maintainers.MergeFrom(other.Maintainers);
          }
          switch (other.KeyExprCase) {
            case KeyExprOneofCase.Key:
              if (Key == null) {
                Key = new global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr();
              }
              Key.MergeFrom(other.Key);
              break;
            case KeyExprOneofCase.ComplexKey:
              if (ComplexKey == null) {
                ComplexKey = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
              }
              ComplexKey.MergeFrom(other.ComplexKey);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.KeyExpr();
                if (keyExprCase_ == KeyExprOneofCase.Key) {
                  subBuilder.MergeFrom(Key);
                }
                input.ReadMessage(subBuilder);
                Key = subBuilder;
                break;
              }
              case 26: {
                if (maintainers_ == null) {
                  Maintainers = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                }
                input.ReadMessage(Maintainers);
                break;
              }
              case 34: {
                global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
                if (keyExprCase_ == KeyExprOneofCase.ComplexKey) {
                  subBuilder.MergeFrom(ComplexKey);
                }
                input.ReadMessage(subBuilder);
                ComplexKey = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Data type definition
  /// </summary>
  public sealed partial class DefDataType : pb::IMessage<DefDataType> {
    private static readonly pb::MessageParser<DefDataType> _parser = new pb::MessageParser<DefDataType>(() => new DefDataType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefDataType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefDataType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefDataType(DefDataType other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      params_ = other.params_.Clone();
      serializable_ = other.serializable_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      switch (other.DataConsCase) {
        case DataConsOneofCase.Record:
          Record = other.Record.Clone();
          break;
        case DataConsOneofCase.Variant:
          Variant = other.Variant.Clone();
          break;
        case DataConsOneofCase.Enum:
          Enum = other.Enum.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefDataType Clone() {
      return new DefDataType(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName name_;
    /// <summary>
    /// name of the defined data type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind> _repeated_params_codec
        = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind> params_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind>();
    /// <summary>
    /// type parameters
    /// *Must be empty if enum field is set*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.TypeVarWithKind> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 3;
    /// <summary>
    /// Records without fields are explicitly allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields Record {
      get { return dataConsCase_ == DataConsOneofCase.Record ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields) dataCons_ : null; }
      set {
        dataCons_ = value;
        dataConsCase_ = value == null ? DataConsOneofCase.None : DataConsOneofCase.Record;
      }
    }

    /// <summary>Field number for the "variant" field.</summary>
    public const int VariantFieldNumber = 4;
    /// <summary>
    /// Variants without constructors are explicitly allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields Variant {
      get { return dataConsCase_ == DataConsOneofCase.Variant ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields) dataCons_ : null; }
      set {
        dataCons_ = value;
        dataConsCase_ = value == null ? DataConsOneofCase.None : DataConsOneofCase.Variant;
      }
    }

    /// <summary>Field number for the "enum" field.</summary>
    public const int EnumFieldNumber = 7;
    /// <summary>
    /// *Available since version 1.dev*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.EnumConstructors Enum {
      get { return dataConsCase_ == DataConsOneofCase.Enum ? (global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.EnumConstructors) dataCons_ : null; }
      set {
        dataCons_ = value;
        dataConsCase_ = value == null ? DataConsOneofCase.None : DataConsOneofCase.Enum;
      }
    }

    /// <summary>Field number for the "serializable" field.</summary>
    public const int SerializableFieldNumber = 5;
    private bool serializable_;
    /// <summary>
    /// If true, this data type preserves serializability in the sense that when
    /// all parameters are instantiated with serializable types (of kind '*'),
    /// then the resulting type is serializable as well.
    /// This flag is used to simplify package validation by not requiring an
    /// inference but only a check. Such a check must validate that this flag is
    /// set correctly and that template and choice argument and result types
    /// have this flag set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Serializable {
      get { return serializable_; }
      set {
        serializable_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 6;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Location location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    private object dataCons_;
    /// <summary>Enum of possible cases for the "DataCons" oneof.</summary>
    public enum DataConsOneofCase {
      None = 0,
      Record = 3,
      Variant = 4,
      Enum = 7,
    }
    private DataConsOneofCase dataConsCase_ = DataConsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataConsOneofCase DataConsCase {
      get { return dataConsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataCons() {
      dataConsCase_ = DataConsOneofCase.None;
      dataCons_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefDataType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefDataType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if(!params_.Equals(other.params_)) return false;
      if (!object.Equals(Record, other.Record)) return false;
      if (!object.Equals(Variant, other.Variant)) return false;
      if (!object.Equals(Enum, other.Enum)) return false;
      if (Serializable != other.Serializable) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (DataConsCase != other.DataConsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      hash ^= params_.GetHashCode();
      if (dataConsCase_ == DataConsOneofCase.Record) hash ^= Record.GetHashCode();
      if (dataConsCase_ == DataConsOneofCase.Variant) hash ^= Variant.GetHashCode();
      if (dataConsCase_ == DataConsOneofCase.Enum) hash ^= Enum.GetHashCode();
      if (Serializable != false) hash ^= Serializable.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      hash ^= (int) dataConsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (dataConsCase_ == DataConsOneofCase.Record) {
        output.WriteRawTag(26);
        output.WriteMessage(Record);
      }
      if (dataConsCase_ == DataConsOneofCase.Variant) {
        output.WriteRawTag(34);
        output.WriteMessage(Variant);
      }
      if (Serializable != false) {
        output.WriteRawTag(40);
        output.WriteBool(Serializable);
      }
      if (location_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Location);
      }
      if (dataConsCase_ == DataConsOneofCase.Enum) {
        output.WriteRawTag(58);
        output.WriteMessage(Enum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (dataConsCase_ == DataConsOneofCase.Record) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (dataConsCase_ == DataConsOneofCase.Variant) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variant);
      }
      if (dataConsCase_ == DataConsOneofCase.Enum) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enum);
      }
      if (Serializable != false) {
        size += 1 + 1;
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefDataType other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName();
        }
        Name.MergeFrom(other.Name);
      }
      params_.Add(other.params_);
      if (other.Serializable != false) {
        Serializable = other.Serializable;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      switch (other.DataConsCase) {
        case DataConsOneofCase.Record:
          if (Record == null) {
            Record = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields();
          }
          Record.MergeFrom(other.Record);
          break;
        case DataConsOneofCase.Variant:
          if (Variant == null) {
            Variant = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields();
          }
          Variant.MergeFrom(other.Variant);
          break;
        case DataConsOneofCase.Enum:
          if (Enum == null) {
            Enum = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.EnumConstructors();
          }
          Enum.MergeFrom(other.Enum);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName();
            }
            input.ReadMessage(Name);
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 26: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields();
            if (dataConsCase_ == DataConsOneofCase.Record) {
              subBuilder.MergeFrom(Record);
            }
            input.ReadMessage(subBuilder);
            Record = subBuilder;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.Fields();
            if (dataConsCase_ == DataConsOneofCase.Variant) {
              subBuilder.MergeFrom(Variant);
            }
            input.ReadMessage(subBuilder);
            Variant = subBuilder;
            break;
          }
          case 40: {
            Serializable = input.ReadBool();
            break;
          }
          case 50: {
            if (location_ == null) {
              Location = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.EnumConstructors subBuilder = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Types.EnumConstructors();
            if (dataConsCase_ == DataConsOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DefDataType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Fields : pb::IMessage<Fields> {
        private static readonly pb::MessageParser<Fields> _parser = new pb::MessageParser<Fields>(() => new Fields());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Fields> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fields() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fields(Fields other) : this() {
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fields Clone() {
          return new Fields(this);
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int Fields_FieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType> fields_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.FieldWithType> Fields_ {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Fields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Fields other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Fields other) {
          if (other == null) {
            return;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// *Available since version 1.dev*
      /// </summary>
      public sealed partial class EnumConstructors : pb::IMessage<EnumConstructors> {
        private static readonly pb::MessageParser<EnumConstructors> _parser = new pb::MessageParser<EnumConstructors>(() => new EnumConstructors());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EnumConstructors> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumConstructors() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumConstructors(EnumConstructors other) : this() {
          constructors_ = other.constructors_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumConstructors Clone() {
          return new EnumConstructors(this);
        }

        /// <summary>Field number for the "constructors" field.</summary>
        public const int ConstructorsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_constructors_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> constructors_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Constructors {
          get { return constructors_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EnumConstructors);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EnumConstructors other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!constructors_.Equals(other.constructors_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= constructors_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          constructors_.WriteTo(output, _repeated_constructors_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += constructors_.CalculateSize(_repeated_constructors_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EnumConstructors other) {
          if (other == null) {
            return;
          }
          constructors_.Add(other.constructors_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                constructors_.AddEntriesFrom(input, _repeated_constructors_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Value definition
  /// </summary>
  public sealed partial class DefValue : pb::IMessage<DefValue> {
    private static readonly pb::MessageParser<DefValue> _parser = new pb::MessageParser<DefValue>(() => new DefValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefValue(DefValue other) : this() {
      nameWithType_ = other.nameWithType_ != null ? other.nameWithType_.Clone() : null;
      expr_ = other.expr_ != null ? other.expr_.Clone() : null;
      noPartyLiterals_ = other.noPartyLiterals_;
      isTest_ = other.isTest_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefValue Clone() {
      return new DefValue(this);
    }

    /// <summary>Field number for the "name_with_type" field.</summary>
    public const int NameWithTypeFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue.Types.NameWithType nameWithType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue.Types.NameWithType NameWithType {
      get { return nameWithType_; }
      set {
        nameWithType_ = value;
      }
    }

    /// <summary>Field number for the "expr" field.</summary>
    public const int ExprFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr expr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr Expr {
      get { return expr_; }
      set {
        expr_ = value;
      }
    }

    /// <summary>Field number for the "no_party_literals" field.</summary>
    public const int NoPartyLiteralsFieldNumber = 3;
    private bool noPartyLiterals_;
    /// <summary>
    /// If true, the value must not contain any party literals and not reference
    /// values which contain party literals.
    /// This flag is used to simplify package validation by not requiring an
    /// inference but only a check. Such a check must validate that this flag is
    /// set correctly and that templates do not reference values which have this
    /// flag set to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoPartyLiterals {
      get { return noPartyLiterals_; }
      set {
        noPartyLiterals_ = value;
      }
    }

    /// <summary>Field number for the "is_test" field.</summary>
    public const int IsTestFieldNumber = 4;
    private bool isTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTest {
      get { return isTest_; }
      set {
        isTest_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 5;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.Location location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NameWithType, other.NameWithType)) return false;
      if (!object.Equals(Expr, other.Expr)) return false;
      if (NoPartyLiterals != other.NoPartyLiterals) return false;
      if (IsTest != other.IsTest) return false;
      if (!object.Equals(Location, other.Location)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nameWithType_ != null) hash ^= NameWithType.GetHashCode();
      if (expr_ != null) hash ^= Expr.GetHashCode();
      if (NoPartyLiterals != false) hash ^= NoPartyLiterals.GetHashCode();
      if (IsTest != false) hash ^= IsTest.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nameWithType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NameWithType);
      }
      if (expr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expr);
      }
      if (NoPartyLiterals != false) {
        output.WriteRawTag(24);
        output.WriteBool(NoPartyLiterals);
      }
      if (IsTest != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsTest);
      }
      if (location_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nameWithType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameWithType);
      }
      if (expr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
      }
      if (NoPartyLiterals != false) {
        size += 1 + 1;
      }
      if (IsTest != false) {
        size += 1 + 1;
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefValue other) {
      if (other == null) {
        return;
      }
      if (other.nameWithType_ != null) {
        if (nameWithType_ == null) {
          NameWithType = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue.Types.NameWithType();
        }
        NameWithType.MergeFrom(other.NameWithType);
      }
      if (other.expr_ != null) {
        if (expr_ == null) {
          Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
        }
        Expr.MergeFrom(other.Expr);
      }
      if (other.NoPartyLiterals != false) {
        NoPartyLiterals = other.NoPartyLiterals;
      }
      if (other.IsTest != false) {
        IsTest = other.IsTest;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (nameWithType_ == null) {
              NameWithType = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue.Types.NameWithType();
            }
            input.ReadMessage(NameWithType);
            break;
          }
          case 18: {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Expr();
            }
            input.ReadMessage(Expr);
            break;
          }
          case 24: {
            NoPartyLiterals = input.ReadBool();
            break;
          }
          case 32: {
            IsTest = input.ReadBool();
            break;
          }
          case 42: {
            if (location_ == null) {
              Location = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Location();
            }
            input.ReadMessage(Location);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DefValue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The reason why we have this type instead of just flattening name
      /// and type in DefValue is that it was VarWithType before, and we
      /// want to be binary-compatible with it.
      /// </summary>
      public sealed partial class NameWithType : pb::IMessage<NameWithType> {
        private static readonly pb::MessageParser<NameWithType> _parser = new pb::MessageParser<NameWithType>(() => new NameWithType());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NameWithType> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NameWithType() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NameWithType(NameWithType other) : this() {
          name_ = other.name_.Clone();
          type_ = other.type_ != null ? other.type_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NameWithType Clone() {
          return new NameWithType(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_name_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> name_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Name of the value
        /// *each element of name must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Name {
          get { return name_; }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_lf.DamlLf1.Type type_;
        /// <summary>
        /// Type of the value
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_lf.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NameWithType);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NameWithType other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!name_.Equals(other.name_)) return false;
          if (!object.Equals(Type, other.Type)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= name_.GetHashCode();
          if (type_ != null) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          name_.WriteTo(output, _repeated_name_codec);
          if (type_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += name_.CalculateSize(_repeated_name_codec);
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NameWithType other) {
          if (other == null) {
            return;
          }
          name_.Add(other.name_);
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                name_.AddEntriesFrom(input, _repeated_name_codec);
                break;
              }
              case 18: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_lf.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class FeatureFlags : pb::IMessage<FeatureFlags> {
    private static readonly pb::MessageParser<FeatureFlags> _parser = new pb::MessageParser<FeatureFlags>(() => new FeatureFlags());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureFlags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlags(FeatureFlags other) : this() {
      forbidPartyLiterals_ = other.forbidPartyLiterals_;
      dontDivulgeContractIdsInCreateArguments_ = other.dontDivulgeContractIdsInCreateArguments_;
      dontDiscloseNonConsumingChoicesToObservers_ = other.dontDiscloseNonConsumingChoicesToObservers_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlags Clone() {
      return new FeatureFlags(this);
    }

    /// <summary>Field number for the "forbidPartyLiterals" field.</summary>
    public const int ForbidPartyLiteralsFieldNumber = 1;
    private bool forbidPartyLiterals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForbidPartyLiterals {
      get { return forbidPartyLiterals_; }
      set {
        forbidPartyLiterals_ = value;
      }
    }

    /// <summary>Field number for the "dontDivulgeContractIdsInCreateArguments" field.</summary>
    public const int DontDivulgeContractIdsInCreateArgumentsFieldNumber = 2;
    private bool dontDivulgeContractIdsInCreateArguments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DontDivulgeContractIdsInCreateArguments {
      get { return dontDivulgeContractIdsInCreateArguments_; }
      set {
        dontDivulgeContractIdsInCreateArguments_ = value;
      }
    }

    /// <summary>Field number for the "dontDiscloseNonConsumingChoicesToObservers" field.</summary>
    public const int DontDiscloseNonConsumingChoicesToObserversFieldNumber = 3;
    private bool dontDiscloseNonConsumingChoicesToObservers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DontDiscloseNonConsumingChoicesToObservers {
      get { return dontDiscloseNonConsumingChoicesToObservers_; }
      set {
        dontDiscloseNonConsumingChoicesToObservers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureFlags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureFlags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ForbidPartyLiterals != other.ForbidPartyLiterals) return false;
      if (DontDivulgeContractIdsInCreateArguments != other.DontDivulgeContractIdsInCreateArguments) return false;
      if (DontDiscloseNonConsumingChoicesToObservers != other.DontDiscloseNonConsumingChoicesToObservers) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ForbidPartyLiterals != false) hash ^= ForbidPartyLiterals.GetHashCode();
      if (DontDivulgeContractIdsInCreateArguments != false) hash ^= DontDivulgeContractIdsInCreateArguments.GetHashCode();
      if (DontDiscloseNonConsumingChoicesToObservers != false) hash ^= DontDiscloseNonConsumingChoicesToObservers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ForbidPartyLiterals != false) {
        output.WriteRawTag(8);
        output.WriteBool(ForbidPartyLiterals);
      }
      if (DontDivulgeContractIdsInCreateArguments != false) {
        output.WriteRawTag(16);
        output.WriteBool(DontDivulgeContractIdsInCreateArguments);
      }
      if (DontDiscloseNonConsumingChoicesToObservers != false) {
        output.WriteRawTag(24);
        output.WriteBool(DontDiscloseNonConsumingChoicesToObservers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ForbidPartyLiterals != false) {
        size += 1 + 1;
      }
      if (DontDivulgeContractIdsInCreateArguments != false) {
        size += 1 + 1;
      }
      if (DontDiscloseNonConsumingChoicesToObservers != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureFlags other) {
      if (other == null) {
        return;
      }
      if (other.ForbidPartyLiterals != false) {
        ForbidPartyLiterals = other.ForbidPartyLiterals;
      }
      if (other.DontDivulgeContractIdsInCreateArguments != false) {
        DontDivulgeContractIdsInCreateArguments = other.DontDivulgeContractIdsInCreateArguments;
      }
      if (other.DontDiscloseNonConsumingChoicesToObservers != false) {
        DontDiscloseNonConsumingChoicesToObservers = other.DontDiscloseNonConsumingChoicesToObservers;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ForbidPartyLiterals = input.ReadBool();
            break;
          }
          case 16: {
            DontDivulgeContractIdsInCreateArguments = input.ReadBool();
            break;
          }
          case 24: {
            DontDiscloseNonConsumingChoicesToObservers = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Module : pb::IMessage<Module> {
    private static readonly pb::MessageParser<Module> _parser = new pb::MessageParser<Module>(() => new Module());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Module> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module(Module other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      flags_ = other.flags_ != null ? other.flags_.Clone() : null;
      dataTypes_ = other.dataTypes_.Clone();
      values_ = other.values_.Clone();
      templates_ = other.templates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module Clone() {
      return new Module(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 4;
    private global::Com.DigitalAsset.Daml_lf.DamlLf1.FeatureFlags flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_lf.DamlLf1.FeatureFlags Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "data_types" field.</summary>
    public const int DataTypesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType> _repeated_dataTypes_codec
        = pb::FieldCodec.ForMessage(42, global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType> dataTypes_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefDataType> DataTypes {
      get { return dataTypes_; }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue> _repeated_values_codec
        = pb::FieldCodec.ForMessage(50, global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue> values_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefValue> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "templates" field.</summary>
    public const int TemplatesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate> _repeated_templates_codec
        = pb::FieldCodec.ForMessage(58, global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate> templates_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.DefTemplate> Templates {
      get { return templates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Module);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Module other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if (!object.Equals(Flags, other.Flags)) return false;
      if(!dataTypes_.Equals(other.dataTypes_)) return false;
      if(!values_.Equals(other.values_)) return false;
      if(!templates_.Equals(other.templates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      if (flags_ != null) hash ^= Flags.GetHashCode();
      hash ^= dataTypes_.GetHashCode();
      hash ^= values_.GetHashCode();
      hash ^= templates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      if (flags_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Flags);
      }
      dataTypes_.WriteTo(output, _repeated_dataTypes_codec);
      values_.WriteTo(output, _repeated_values_codec);
      templates_.WriteTo(output, _repeated_templates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (flags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flags);
      }
      size += dataTypes_.CalculateSize(_repeated_dataTypes_codec);
      size += values_.CalculateSize(_repeated_values_codec);
      size += templates_.CalculateSize(_repeated_templates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Module other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.flags_ != null) {
        if (flags_ == null) {
          Flags = new global::Com.DigitalAsset.Daml_lf.DamlLf1.FeatureFlags();
        }
        Flags.MergeFrom(other.Flags);
      }
      dataTypes_.Add(other.dataTypes_);
      values_.Add(other.values_);
      templates_.Add(other.templates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::Com.DigitalAsset.Daml_lf.DamlLf1.DottedName();
            }
            input.ReadMessage(Name);
            break;
          }
          case 34: {
            if (flags_ == null) {
              Flags = new global::Com.DigitalAsset.Daml_lf.DamlLf1.FeatureFlags();
            }
            input.ReadMessage(Flags);
            break;
          }
          case 42: {
            dataTypes_.AddEntriesFrom(input, _repeated_dataTypes_codec);
            break;
          }
          case 50: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 58: {
            templates_.AddEntriesFrom(input, _repeated_templates_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Package : pb::IMessage<Package> {
    private static readonly pb::MessageParser<Package> _parser = new pb::MessageParser<Package>(() => new Package());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Package> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_lf.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package(Package other) : this() {
      modules_ = other.modules_.Clone();
      internedPackageIds_ = other.internedPackageIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package Clone() {
      return new Package(this);
    }

    /// <summary>Field number for the "modules" field.</summary>
    public const int ModulesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_lf.DamlLf1.Module> _repeated_modules_codec
        = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_lf.DamlLf1.Module.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Module> modules_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Module>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_lf.DamlLf1.Module> Modules {
      get { return modules_; }
    }

    /// <summary>Field number for the "interned_package_ids" field.</summary>
    public const int InternedPackageIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_internedPackageIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> internedPackageIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Available since version 1.dev 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InternedPackageIds {
      get { return internedPackageIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Package);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Package other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!modules_.Equals(other.modules_)) return false;
      if(!internedPackageIds_.Equals(other.internedPackageIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= modules_.GetHashCode();
      hash ^= internedPackageIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      modules_.WriteTo(output, _repeated_modules_codec);
      internedPackageIds_.WriteTo(output, _repeated_internedPackageIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += modules_.CalculateSize(_repeated_modules_codec);
      size += internedPackageIds_.CalculateSize(_repeated_internedPackageIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Package other) {
      if (other == null) {
        return;
      }
      modules_.Add(other.modules_);
      internedPackageIds_.Add(other.internedPackageIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            modules_.AddEntriesFrom(input, _repeated_modules_codec);
            break;
          }
          case 18: {
            internedPackageIds_.AddEntriesFrom(input, _repeated_internedPackageIds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
