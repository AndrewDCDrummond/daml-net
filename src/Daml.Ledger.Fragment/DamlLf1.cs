// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/digitalasset/daml_lf_1_7/daml_lf_1.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.DigitalAsset.Daml_Lf_1_7.DamlLf1 {

  /// <summary>Holder for reflection information generated from com/digitalasset/daml_lf_1_7/daml_lf_1.proto</summary>
  public static partial class DamlLf1Reflection {

    #region Descriptor
    /// <summary>File descriptor for com/digitalasset/daml_lf_1_7/daml_lf_1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DamlLf1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixjb20vZGlnaXRhbGFzc2V0L2RhbWxfbGZfMV83L2RhbWxfbGZfMS5wcm90",
            "bxIJZGFtbF9sZl8xIgYKBFVuaXQicQoKUGFja2FnZVJlZhIfCgRzZWxmGAEg",
            "ASgLMg8uZGFtbF9sZl8xLlVuaXRIABIYCg5wYWNrYWdlX2lkX3N0chgCIAEo",
            "CUgAEiEKF3BhY2thZ2VfaWRfaW50ZXJuZWRfc3RyGAMgASgFSABCBQoDU3Vt",
            "Ih4KCkRvdHRlZE5hbWUSEAoIc2VnbWVudHMYASADKAkioAEKCU1vZHVsZVJl",
            "ZhIqCgtwYWNrYWdlX3JlZhgBIAEoCzIVLmRhbWxfbGZfMS5QYWNrYWdlUmVm",
            "EjIKEW1vZHVsZV9uYW1lX2RuYW1lGAIgASgLMhUuZGFtbF9sZl8xLkRvdHRl",
            "ZE5hbWVIABIkChptb2R1bGVfbmFtZV9pbnRlcm5lZF9kbmFtZRgDIAEoBUgA",
            "Qg0KC21vZHVsZV9uYW1lIocBCgtUeXBlQ29uTmFtZRIkCgZtb2R1bGUYASAB",
            "KAsyFC5kYW1sX2xmXzEuTW9kdWxlUmVmEisKCm5hbWVfZG5hbWUYAiABKAsy",
            "FS5kYW1sX2xmXzEuRG90dGVkTmFtZUgAEh0KE25hbWVfaW50ZXJuZWRfZG5h",
            "bWUYAyABKAVIAEIGCgRuYW1lImAKB1ZhbE5hbWUSJAoGbW9kdWxlGAEgASgL",
            "MhQuZGFtbF9sZl8xLk1vZHVsZVJlZhISCgpuYW1lX2RuYW1lGAIgAygJEhsK",
            "E25hbWVfaW50ZXJuZWRfZG5hbWUYAyABKAUiagoNRmllbGRXaXRoVHlwZRIT",
            "CglmaWVsZF9zdHIYASABKAlIABIcChJmaWVsZF9pbnRlcm5lZF9zdHIYAyAB",
            "KAVIABIdCgR0eXBlGAIgASgLMg8uZGFtbF9sZl8xLlR5cGVCBwoFZmllbGQi",
            "YgoLVmFyV2l0aFR5cGUSEQoHdmFyX3N0chgBIAEoCUgAEhoKEHZhcl9pbnRl",
            "cm5lZF9zdHIYAyABKAVIABIdCgR0eXBlGAIgASgLMg8uZGFtbF9sZl8xLlR5",
            "cGVCBQoDdmFyImYKD1R5cGVWYXJXaXRoS2luZBIRCgd2YXJfc3RyGAEgASgJ",
            "SAASGgoQdmFyX2ludGVybmVkX3N0chgDIAEoBUgAEh0KBGtpbmQYAiABKAsy",
            "Dy5kYW1sX2xmXzEuS2luZEIFCgN2YXIiagoNRmllbGRXaXRoRXhwchITCglm",
            "aWVsZF9zdHIYASABKAlIABIcChJmaWVsZF9pbnRlcm5lZF9zdHIYAyABKAVI",
            "ABIdCgRleHByGAIgASgLMg8uZGFtbF9sZl8xLkV4cHJCBwoFZmllbGQiUQoH",
            "QmluZGluZxImCgZiaW5kZXIYASABKAsyFi5kYW1sX2xmXzEuVmFyV2l0aFR5",
            "cGUSHgoFYm91bmQYAiABKAsyDy5kYW1sX2xmXzEuRXhwciLBAQoES2luZBIf",
            "CgRzdGFyGAEgASgLMg8uZGFtbF9sZl8xLlVuaXRIABImCgVhcnJvdxgCIAEo",
            "CzIVLmRhbWxfbGZfMS5LaW5kLkFycm93SAASHgoDbmF0GAMgASgLMg8uZGFt",
            "bF9sZl8xLlVuaXRIABpJCgVBcnJvdxIfCgZwYXJhbXMYASADKAsyDy5kYW1s",
            "X2xmXzEuS2luZBIfCgZyZXN1bHQYAiABKAsyDy5kYW1sX2xmXzEuS2luZEIF",
            "CgNTdW0i2gUKBFR5cGUSIgoDdmFyGAEgASgLMhMuZGFtbF9sZl8xLlR5cGUu",
            "VmFySAASIgoDY29uGAIgASgLMhMuZGFtbF9sZl8xLlR5cGUuQ29uSAASJAoE",
            "cHJpbRgDIAEoCzIULmRhbWxfbGZfMS5UeXBlLlByaW1IABIiCgNmdW4YBCAB",
            "KAsyEy5kYW1sX2xmXzEuVHlwZS5GdW5IABIoCgZmb3JhbGwYBSABKAsyFi5k",
            "YW1sX2xmXzEuVHlwZS5Gb3JhbGxIABImCgV0dXBsZRgHIAEoCzIVLmRhbWxf",
            "bGZfMS5UeXBlLlR1cGxlSAASDQoDbmF0GAsgASgSSAAaWgoDVmFyEhEKB3Zh",
            "cl9zdHIYASABKAlIABIaChB2YXJfaW50ZXJuZWRfc3RyGAMgASgFSAASHQoE",
            "YXJncxgCIAMoCzIPLmRhbWxfbGZfMS5UeXBlQgUKA3ZhchpLCgNDb24SJQoF",
            "dHljb24YASABKAsyFi5kYW1sX2xmXzEuVHlwZUNvbk5hbWUSHQoEYXJncxgC",
            "IAMoCzIPLmRhbWxfbGZfMS5UeXBlGkgKBFByaW0SIQoEcHJpbRgBIAEoDjIT",
            "LmRhbWxfbGZfMS5QcmltVHlwZRIdCgRhcmdzGAIgAygLMg8uZGFtbF9sZl8x",
            "LlR5cGUaRwoDRnVuEh8KBnBhcmFtcxgBIAMoCzIPLmRhbWxfbGZfMS5UeXBl",
            "Eh8KBnJlc3VsdBgCIAEoCzIPLmRhbWxfbGZfMS5UeXBlGlEKBkZvcmFsbBIo",
            "CgR2YXJzGAEgAygLMhouZGFtbF9sZl8xLlR5cGVWYXJXaXRoS2luZBIdCgRi",
            "b2R5GAIgASgLMg8uZGFtbF9sZl8xLlR5cGUaMQoFVHVwbGUSKAoGZmllbGRz",
            "GAEgAygLMhguZGFtbF9sZl8xLkZpZWxkV2l0aFR5cGVCBQoDU3VtSgQIBhAH",
            "SgQICBAJSgQICRAKSgQIChALIu0BCgdQcmltTGl0Eg8KBWludDY0GAEgASgS",
            "SAASFQoLZGVjaW1hbF9zdHIYAiABKAlIABIeChRudW1lcmljX2ludGVybmVk",
            "X3N0chgKIAEoBUgAEhIKCHRleHRfc3RyGAQgASgJSAASGwoRdGV4dF9pbnRl",
            "cm5lZF9zdHIYCyABKAVIABITCgl0aW1lc3RhbXAYBSABKBBIABITCglwYXJ0",
            "eV9zdHIYByABKAlIABIcChJwYXJ0eV9pbnRlcm5lZF9zdHIYDCABKAVIABIO",
            "CgRkYXRlGAggASgFSABCBQoDU3VtSgQIAxAESgQIBhAHIq0BCghMb2NhdGlv",
            "bhIkCgZtb2R1bGUYASABKAsyFC5kYW1sX2xmXzEuTW9kdWxlUmVmEigKBXJh",
            "bmdlGAIgASgLMhkuZGFtbF9sZl8xLkxvY2F0aW9uLlJhbmdlGlEKBVJhbmdl",
            "EhIKCnN0YXJ0X2xpbmUYASABKAUSEQoJc3RhcnRfY29sGAIgASgFEhAKCGVu",
            "ZF9saW5lGAMgASgFEg8KB2VuZF9jb2wYBCABKAUi/hYKBEV4cHISJQoIbG9j",
            "YXRpb24YGSABKAsyEy5kYW1sX2xmXzEuTG9jYXRpb24SEQoHdmFyX3N0chgB",
            "IAEoCUgAEhoKEHZhcl9pbnRlcm5lZF9zdHIYHSABKAVIABIhCgN2YWwYAiAB",
            "KAsyEi5kYW1sX2xmXzEuVmFsTmFtZUgAEi0KB2J1aWx0aW4YAyABKA4yGi5k",
            "YW1sX2xmXzEuQnVpbHRpbkZ1bmN0aW9uSAASJgoIcHJpbV9jb24YBCABKA4y",
            "Ei5kYW1sX2xmXzEuUHJpbUNvbkgAEiYKCHByaW1fbGl0GAUgASgLMhIuZGFt",
            "bF9sZl8xLlByaW1MaXRIABIpCgdyZWNfY29uGAYgASgLMhYuZGFtbF9sZl8x",
            "LkV4cHIuUmVjQ29uSAASKwoIcmVjX3Byb2oYByABKAsyFy5kYW1sX2xmXzEu",
            "RXhwci5SZWNQcm9qSAASKQoHcmVjX3VwZBgWIAEoCzIWLmRhbWxfbGZfMS5F",
            "eHByLlJlY1VwZEgAEjEKC3ZhcmlhbnRfY29uGAggASgLMhouZGFtbF9sZl8x",
            "LkV4cHIuVmFyaWFudENvbkgAEisKCGVudW1fY29uGBwgASgLMhcuZGFtbF9s",
            "Zl8xLkV4cHIuRW51bUNvbkgAEi0KCXR1cGxlX2NvbhgJIAEoCzIYLmRhbWxf",
            "bGZfMS5FeHByLlR1cGxlQ29uSAASLwoKdHVwbGVfcHJvahgKIAEoCzIZLmRh",
            "bWxfbGZfMS5FeHByLlR1cGxlUHJvakgAEi0KCXR1cGxlX3VwZBgXIAEoCzIY",
            "LmRhbWxfbGZfMS5FeHByLlR1cGxlVXBkSAASIgoDYXBwGAsgASgLMhMuZGFt",
            "bF9sZl8xLkV4cHIuQXBwSAASJwoGdHlfYXBwGAwgASgLMhUuZGFtbF9sZl8x",
            "LkV4cHIuVHlBcHBIABIiCgNhYnMYDSABKAsyEy5kYW1sX2xmXzEuRXhwci5B",
            "YnNIABInCgZ0eV9hYnMYDiABKAsyFS5kYW1sX2xmXzEuRXhwci5UeUFic0gA",
            "Eh8KBGNhc2UYDyABKAsyDy5kYW1sX2xmXzEuQ2FzZUgAEh8KA2xldBgQIAEo",
            "CzIQLmRhbWxfbGZfMS5CbG9ja0gAEiIKA25pbBgRIAEoCzITLmRhbWxfbGZf",
            "MS5FeHByLk5pbEgAEiQKBGNvbnMYEiABKAsyFC5kYW1sX2xmXzEuRXhwci5D",
            "b25zSAASIwoGdXBkYXRlGBQgASgLMhEuZGFtbF9sZl8xLlVwZGF0ZUgAEicK",
            "CHNjZW5hcmlvGBUgASgLMhMuZGFtbF9sZl8xLlNjZW5hcmlvSAASNQoNb3B0",
            "aW9uYWxfbm9uZRgaIAEoCzIcLmRhbWxfbGZfMS5FeHByLk9wdGlvbmFsTm9u",
            "ZUgAEjUKDW9wdGlvbmFsX3NvbWUYGyABKAsyHC5kYW1sX2xmXzEuRXhwci5P",
            "cHRpb25hbFNvbWVIABInCgZ0b19hbnkYHiABKAsyFS5kYW1sX2xmXzEuRXhw",
            "ci5Ub0FueUgAEisKCGZyb21fYW55GB8gASgLMhcuZGFtbF9sZl8xLkV4cHIu",
            "RnJvbUFueUgAEiMKCHR5cGVfcmVwGCAgASgLMg8uZGFtbF9sZl8xLlR5cGVI",
            "ABpWCgZSZWNDb24SIgoFdHljb24YASABKAsyEy5kYW1sX2xmXzEuVHlwZS5D",
            "b24SKAoGZmllbGRzGAIgAygLMhguZGFtbF9sZl8xLkZpZWxkV2l0aEV4cHIa",
            "igEKB1JlY1Byb2oSIgoFdHljb24YASABKAsyEy5kYW1sX2xmXzEuVHlwZS5D",
            "b24SEwoJZmllbGRfc3RyGAIgASgJSAASHAoSZmllbGRfaW50ZXJuZWRfc3Ry",
            "GAQgASgFSAASHwoGcmVjb3JkGAMgASgLMg8uZGFtbF9sZl8xLkV4cHJCBwoF",
            "ZmllbGQaqgEKBlJlY1VwZBIiCgV0eWNvbhgBIAEoCzITLmRhbWxfbGZfMS5U",
            "eXBlLkNvbhITCglmaWVsZF9zdHIYAiABKAlIABIcChJmaWVsZF9pbnRlcm5l",
            "ZF9zdHIYBSABKAVIABIfCgZyZWNvcmQYAyABKAsyDy5kYW1sX2xmXzEuRXhw",
            "chIfCgZ1cGRhdGUYBCABKAsyDy5kYW1sX2xmXzEuRXhwckIHCgVmaWVsZBqk",
            "AQoKVmFyaWFudENvbhIiCgV0eWNvbhgBIAEoCzITLmRhbWxfbGZfMS5UeXBl",
            "LkNvbhIZCg92YXJpYW50X2Nvbl9zdHIYAiABKAlIABIiChh2YXJpYW50X2Nv",
            "bl9pbnRlcm5lZF9zdHIYBCABKAVIABIkCgt2YXJpYW50X2FyZxgDIAEoCzIP",
            "LmRhbWxfbGZfMS5FeHByQg0KC3ZhcmlhbnRfY29uGnUKB0VudW1Db24SJQoF",
            "dHljb24YASABKAsyFi5kYW1sX2xmXzEuVHlwZUNvbk5hbWUSFgoMZW51bV9j",
            "b25fc3RyGAIgASgJSAASHwoVZW51bV9jb25faW50ZXJuZWRfc3RyGAMgASgF",
            "SABCCgoIZW51bV9jb24aNAoIVHVwbGVDb24SKAoGZmllbGRzGAEgAygLMhgu",
            "ZGFtbF9sZl8xLkZpZWxkV2l0aEV4cHIaZwoJVHVwbGVQcm9qEhMKCWZpZWxk",
            "X3N0chgBIAEoCUgAEhwKEmZpZWxkX2ludGVybmVkX3N0chgDIAEoBUgAEh4K",
            "BXR1cGxlGAIgASgLMg8uZGFtbF9sZl8xLkV4cHJCBwoFZmllbGQahwEKCFR1",
            "cGxlVXBkEhMKCWZpZWxkX3N0chgBIAEoCUgAEhwKEmZpZWxkX2ludGVybmVk",
            "X3N0chgEIAEoBUgAEh4KBXR1cGxlGAIgASgLMg8uZGFtbF9sZl8xLkV4cHIS",
            "HwoGdXBkYXRlGAMgASgLMg8uZGFtbF9sZl8xLkV4cHJCBwoFZmllbGQaQgoD",
            "QXBwEhwKA2Z1bhgBIAEoCzIPLmRhbWxfbGZfMS5FeHByEh0KBGFyZ3MYAiAD",
            "KAsyDy5kYW1sX2xmXzEuRXhwchpGCgVUeUFwcBIdCgRleHByGAEgASgLMg8u",
            "ZGFtbF9sZl8xLkV4cHISHgoFdHlwZXMYAiADKAsyDy5kYW1sX2xmXzEuVHlw",
            "ZRpLCgNBYnMSJQoFcGFyYW0YASADKAsyFi5kYW1sX2xmXzEuVmFyV2l0aFR5",
            "cGUSHQoEYm9keRgCIAEoCzIPLmRhbWxfbGZfMS5FeHByGlEKBVR5QWJzEikK",
            "BXBhcmFtGAEgAygLMhouZGFtbF9sZl8xLlR5cGVWYXJXaXRoS2luZBIdCgRi",
            "b2R5GAIgASgLMg8uZGFtbF9sZl8xLkV4cHIaJAoDTmlsEh0KBHR5cGUYASAB",
            "KAsyDy5kYW1sX2xmXzEuVHlwZRpkCgRDb25zEh0KBHR5cGUYASABKAsyDy5k",
            "YW1sX2xmXzEuVHlwZRIeCgVmcm9udBgCIAMoCzIPLmRhbWxfbGZfMS5FeHBy",
            "Eh0KBHRhaWwYAyABKAsyDy5kYW1sX2xmXzEuRXhwchotCgxPcHRpb25hbE5v",
            "bmUSHQoEdHlwZRgBIAEoCzIPLmRhbWxfbGZfMS5UeXBlGkwKDE9wdGlvbmFs",
            "U29tZRIdCgR0eXBlGAEgASgLMg8uZGFtbF9sZl8xLlR5cGUSHQoEYm9keRgC",
            "IAEoCzIPLmRhbWxfbGZfMS5FeHByGkUKBVRvQW55Eh0KBHR5cGUYASABKAsy",
            "Dy5kYW1sX2xmXzEuVHlwZRIdCgRleHByGAIgASgLMg8uZGFtbF9sZl8xLkV4",
            "cHIaRwoHRnJvbUFueRIdCgR0eXBlGAEgASgLMg8uZGFtbF9sZl8xLlR5cGUS",
            "HQoEZXhwchgCIAEoCzIPLmRhbWxfbGZfMS5FeHByQgUKA1N1bUoECBMQFEoE",
            "CBgQGSKVBwoHQ2FzZUFsdBIiCgdkZWZhdWx0GAEgASgLMg8uZGFtbF9sZl8x",
            "LlVuaXRIABItCgd2YXJpYW50GAIgASgLMhouZGFtbF9sZl8xLkNhc2VBbHQu",
            "VmFyaWFudEgAEiYKCHByaW1fY29uGAMgASgOMhIuZGFtbF9sZl8xLlByaW1D",
            "b25IABIeCgNuaWwYBCABKAsyDy5kYW1sX2xmXzEuVW5pdEgAEicKBGNvbnMY",
            "BSABKAsyFy5kYW1sX2xmXzEuQ2FzZUFsdC5Db25zSAASKAoNb3B0aW9uYWxf",
            "bm9uZRgHIAEoCzIPLmRhbWxfbGZfMS5Vbml0SAASOAoNb3B0aW9uYWxfc29t",
            "ZRgIIAEoCzIfLmRhbWxfbGZfMS5DYXNlQWx0Lk9wdGlvbmFsU29tZUgAEicK",
            "BGVudW0YCSABKAsyFy5kYW1sX2xmXzEuQ2FzZUFsdC5FbnVtSAASHQoEYm9k",
            "eRgGIAEoCzIPLmRhbWxfbGZfMS5FeHByGq8BCgdWYXJpYW50EiMKA2NvbhgB",
            "IAEoCzIWLmRhbWxfbGZfMS5UeXBlQ29uTmFtZRIVCgt2YXJpYW50X3N0chgC",
            "IAEoCUgAEh4KFHZhcmlhbnRfaW50ZXJuZWRfc3RyGAQgASgFSAASFAoKYmlu",
            "ZGVyX3N0chgDIAEoCUgBEh0KE2JpbmRlcl9pbnRlcm5lZF9zdHIYBSABKAVI",
            "AUIJCgd2YXJpYW50QggKBmJpbmRlchp5CgRFbnVtEiMKA2NvbhgBIAEoCzIW",
            "LmRhbWxfbGZfMS5UeXBlQ29uTmFtZRIZCg9jb25zdHJ1Y3Rvcl9zdHIYAiAB",
            "KAlIABIiChhjb25zdHJ1Y3Rvcl9pbnRlcm5lZF9zdHIYAyABKAVIAEINCgtj",
            "b25zdHJ1Y3RvchqQAQoEQ29ucxIWCgx2YXJfaGVhZF9zdHIYASABKAlIABIf",
            "ChV2YXJfaGVhZF9pbnRlcm5lZF9zdHIYAyABKAVIABIWCgx2YXJfdGFpbF9z",
            "dHIYAiABKAlIARIfChV2YXJfdGFpbF9pbnRlcm5lZF9zdHIYBCABKAVIAUIK",
            "Cgh2YXJfaGVhZEIKCgh2YXJfdGFpbBpTCgxPcHRpb25hbFNvbWUSFgoMdmFy",
            "X2JvZHlfc3RyGAEgASgJSAASHwoVdmFyX2JvZHlfaW50ZXJuZWRfc3RyGAIg",
            "ASgFSABCCgoIdmFyX2JvZHlCBQoDU3VtIkgKBENhc2USHgoFc2NydXQYASAB",
            "KAsyDy5kYW1sX2xmXzEuRXhwchIgCgRhbHRzGAIgAygLMhIuZGFtbF9sZl8x",
            "LkNhc2VBbHQiTAoFQmxvY2sSJAoIYmluZGluZ3MYASADKAsyEi5kYW1sX2xm",
            "XzEuQmluZGluZxIdCgRib2R5GAIgASgLMg8uZGFtbF9sZl8xLkV4cHIiRAoE",
            "UHVyZRIdCgR0eXBlGAEgASgLMg8uZGFtbF9sZl8xLlR5cGUSHQoEZXhwchgC",
            "IAEoCzIPLmRhbWxfbGZfMS5FeHByIsQHCgZVcGRhdGUSHwoEcHVyZRgBIAEo",
            "CzIPLmRhbWxfbGZfMS5QdXJlSAASIQoFYmxvY2sYAiABKAsyEC5kYW1sX2xm",
            "XzEuQmxvY2tIABIqCgZjcmVhdGUYAyABKAsyGC5kYW1sX2xmXzEuVXBkYXRl",
            "LkNyZWF0ZUgAEi4KCGV4ZXJjaXNlGAQgASgLMhouZGFtbF9sZl8xLlVwZGF0",
            "ZS5FeGVyY2lzZUgAEigKBWZldGNoGAUgASgLMhcuZGFtbF9sZl8xLlVwZGF0",
            "ZS5GZXRjaEgAEiMKCGdldF90aW1lGAYgASgLMg8uZGFtbF9sZl8xLlVuaXRI",
            "ABI4Cg1sb29rdXBfYnlfa2V5GAggASgLMh8uZGFtbF9sZl8xLlVwZGF0ZS5S",
            "ZXRyaWV2ZUJ5S2V5SAASNwoMZmV0Y2hfYnlfa2V5GAkgASgLMh8uZGFtbF9s",
            "Zl8xLlVwZGF0ZS5SZXRyaWV2ZUJ5S2V5SAASMQoKZW1iZWRfZXhwchgHIAEo",
            "CzIbLmRhbWxfbGZfMS5VcGRhdGUuRW1iZWRFeHBySAAaUQoGQ3JlYXRlEigK",
            "CHRlbXBsYXRlGAEgASgLMhYuZGFtbF9sZl8xLlR5cGVDb25OYW1lEh0KBGV4",
            "cHIYAiABKAsyDy5kYW1sX2xmXzEuRXhwchrPAQoIRXhlcmNpc2USKAoIdGVt",
            "cGxhdGUYASABKAsyFi5kYW1sX2xmXzEuVHlwZUNvbk5hbWUSFAoKY2hvaWNl",
            "X3N0chgCIAEoCUgAEh0KE2Nob2ljZV9pbnRlcm5lZF9zdHIYBiABKAVIABIc",
            "CgNjaWQYAyABKAsyDy5kYW1sX2xmXzEuRXhwchIeCgVhY3RvchgEIAEoCzIP",
            "LmRhbWxfbGZfMS5FeHByEhwKA2FyZxgFIAEoCzIPLmRhbWxfbGZfMS5FeHBy",
            "QggKBmNob2ljZRpVCgVGZXRjaBIoCgh0ZW1wbGF0ZRgBIAEoCzIWLmRhbWxf",
            "bGZfMS5UeXBlQ29uTmFtZRIcCgNjaWQYAiABKAsyDy5kYW1sX2xmXzEuRXhw",
            "ckoECAMQBBpJCglFbWJlZEV4cHISHQoEdHlwZRgBIAEoCzIPLmRhbWxfbGZf",
            "MS5UeXBlEh0KBGJvZHkYAiABKAsyDy5kYW1sX2xmXzEuRXhwchpXCg1SZXRy",
            "aWV2ZUJ5S2V5EigKCHRlbXBsYXRlGAEgASgLMhYuZGFtbF9sZl8xLlR5cGVD",
            "b25OYW1lEhwKA2tleRgCIAEoCzIPLmRhbWxfbGZfMS5FeHByQgUKA1N1bSKN",
            "BAoIU2NlbmFyaW8SHwoEcHVyZRgBIAEoCzIPLmRhbWxfbGZfMS5QdXJlSAAS",
            "IQoFYmxvY2sYAiABKAsyEC5kYW1sX2xmXzEuQmxvY2tIABIsCgZjb21taXQY",
            "AyABKAsyGi5kYW1sX2xmXzEuU2NlbmFyaW8uQ29tbWl0SAASMAoKbXVzdEZh",
            "aWxBdBgEIAEoCzIaLmRhbWxfbGZfMS5TY2VuYXJpby5Db21taXRIABIfCgRw",
            "YXNzGAUgASgLMg8uZGFtbF9sZl8xLkV4cHJIABIjCghnZXRfdGltZRgGIAEo",
            "CzIPLmRhbWxfbGZfMS5Vbml0SAASJAoJZ2V0X3BhcnR5GAcgASgLMg8uZGFt",
            "bF9sZl8xLkV4cHJIABIzCgplbWJlZF9leHByGAggASgLMh0uZGFtbF9sZl8x",
            "LlNjZW5hcmlvLkVtYmVkRXhwckgAGmoKBkNvbW1pdBIeCgVwYXJ0eRgBIAEo",
            "CzIPLmRhbWxfbGZfMS5FeHByEh0KBGV4cHIYAiABKAsyDy5kYW1sX2xmXzEu",
            "RXhwchIhCghyZXRfdHlwZRgDIAEoCzIPLmRhbWxfbGZfMS5UeXBlGkkKCUVt",
            "YmVkRXhwchIdCgR0eXBlGAEgASgLMg8uZGFtbF9sZl8xLlR5cGUSHQoEYm9k",
            "eRgCIAEoCzIPLmRhbWxfbGZfMS5FeHByQgUKA1N1bSLnAgoOVGVtcGxhdGVD",
            "aG9pY2USEgoIbmFtZV9zdHIYASABKAlIABIbChFuYW1lX2ludGVybmVkX3N0",
            "chgJIAEoBUgAEhEKCWNvbnN1bWluZxgCIAEoCBIkCgtjb250cm9sbGVycxgD",
            "IAEoCzIPLmRhbWxfbGZfMS5FeHByEioKCmFyZ19iaW5kZXIYBCABKAsyFi5k",
            "YW1sX2xmXzEuVmFyV2l0aFR5cGUSIQoIcmV0X3R5cGUYBSABKAsyDy5kYW1s",
            "X2xmXzEuVHlwZRIfCgZ1cGRhdGUYBiABKAsyDy5kYW1sX2xmXzEuRXhwchIZ",
            "Cg9zZWxmX2JpbmRlcl9zdHIYByABKAlIARIiChhzZWxmX2JpbmRlcl9pbnRl",
            "cm5lZF9zdHIYCiABKAVIARIlCghsb2NhdGlvbhgIIAEoCzITLmRhbWxfbGZf",
            "MS5Mb2NhdGlvbkIGCgRuYW1lQg0KC3NlbGZfYmluZGVyIvADCgdLZXlFeHBy",
            "EjUKC3Byb2plY3Rpb25zGAEgASgLMh4uZGFtbF9sZl8xLktleUV4cHIuUHJv",
            "amVjdGlvbnNIABIrCgZyZWNvcmQYAiABKAsyGS5kYW1sX2xmXzEuS2V5RXhw",
            "ci5SZWNvcmRIABpsCgpQcm9qZWN0aW9uEiIKBXR5Y29uGAEgASgLMhMuZGFt",
            "bF9sZl8xLlR5cGUuQ29uEhMKCWZpZWxkX3N0chgCIAEoCUgAEhwKEmZpZWxk",
            "X2ludGVybmVkX3N0chgDIAEoBUgAQgcKBWZpZWxkGkEKC1Byb2plY3Rpb25z",
            "EjIKC3Byb2plY3Rpb25zGAIgAygLMh0uZGFtbF9sZl8xLktleUV4cHIuUHJv",
            "amVjdGlvbhprCgtSZWNvcmRGaWVsZBITCglmaWVsZF9zdHIYASABKAlIABIc",
            "ChJmaWVsZF9pbnRlcm5lZF9zdHIYAyABKAVIABIgCgRleHByGAIgASgLMhIu",
            "ZGFtbF9sZl8xLktleUV4cHJCBwoFZmllbGQaXAoGUmVjb3JkEiIKBXR5Y29u",
            "GAEgASgLMhMuZGFtbF9sZl8xLlR5cGUuQ29uEi4KBmZpZWxkcxgCIAMoCzIe",
            "LmRhbWxfbGZfMS5LZXlFeHByLlJlY29yZEZpZWxkQgUKA1N1bSLcBAoLRGVm",
            "VGVtcGxhdGUSLAoLdHljb25fZG5hbWUYASABKAsyFS5kYW1sX2xmXzEuRG90",
            "dGVkTmFtZUgAEh4KFHR5Y29uX2ludGVybmVkX2RuYW1lGAwgASgFSAASEwoJ",
            "cGFyYW1fc3RyGAIgASgJSAESHAoScGFyYW1faW50ZXJuZWRfc3RyGAsgASgF",
            "SAESIAoHcHJlY29uZBgEIAEoCzIPLmRhbWxfbGZfMS5FeHByEiQKC3NpZ25h",
            "dG9yaWVzGAUgASgLMg8uZGFtbF9sZl8xLkV4cHISIgoJYWdyZWVtZW50GAYg",
            "ASgLMg8uZGFtbF9sZl8xLkV4cHISKgoHY2hvaWNlcxgHIAMoCzIZLmRhbWxf",
            "bGZfMS5UZW1wbGF0ZUNob2ljZRIiCglvYnNlcnZlcnMYCCABKAsyDy5kYW1s",
            "X2xmXzEuRXhwchIlCghsb2NhdGlvbhgJIAEoCzITLmRhbWxfbGZfMS5Mb2Nh",
            "dGlvbhIqCgNrZXkYCiABKAsyHS5kYW1sX2xmXzEuRGVmVGVtcGxhdGUuRGVm",
            "S2V5GqQBCgZEZWZLZXkSHQoEdHlwZRgBIAEoCzIPLmRhbWxfbGZfMS5UeXBl",
            "EiEKA2tleRgCIAEoCzISLmRhbWxfbGZfMS5LZXlFeHBySAASJgoLY29tcGxl",
            "eF9rZXkYBCABKAsyDy5kYW1sX2xmXzEuRXhwckgAEiQKC21haW50YWluZXJz",
            "GAMgASgLMg8uZGFtbF9sZl8xLkV4cHJCCgoIa2V5X2V4cHJCBwoFdHljb25C",
            "BwoFcGFyYW1KBAgDEAQi9wMKC0RlZkRhdGFUeXBlEisKCm5hbWVfZG5hbWUY",
            "ASABKAsyFS5kYW1sX2xmXzEuRG90dGVkTmFtZUgAEh0KE25hbWVfaW50ZXJu",
            "ZWRfZG5hbWUYCCABKAVIABIqCgZwYXJhbXMYAiADKAsyGi5kYW1sX2xmXzEu",
            "VHlwZVZhcldpdGhLaW5kEi8KBnJlY29yZBgDIAEoCzIdLmRhbWxfbGZfMS5E",
            "ZWZEYXRhVHlwZS5GaWVsZHNIARIwCgd2YXJpYW50GAQgASgLMh0uZGFtbF9s",
            "Zl8xLkRlZkRhdGFUeXBlLkZpZWxkc0gBEjcKBGVudW0YByABKAsyJy5kYW1s",
            "X2xmXzEuRGVmRGF0YVR5cGUuRW51bUNvbnN0cnVjdG9yc0gBEhQKDHNlcmlh",
            "bGl6YWJsZRgFIAEoCBIlCghsb2NhdGlvbhgGIAEoCzITLmRhbWxfbGZfMS5M",
            "b2NhdGlvbhoyCgZGaWVsZHMSKAoGZmllbGRzGAEgAygLMhguZGFtbF9sZl8x",
            "LkZpZWxkV2l0aFR5cGUaTwoQRW51bUNvbnN0cnVjdG9ycxIYChBjb25zdHJ1",
            "Y3RvcnNfc3RyGAEgAygJEiEKGWNvbnN0cnVjdG9yc19pbnRlcm5lZF9zdHIY",
            "AiADKAVCBgoEbmFtZUIKCghEYXRhQ29ucyKWAgoIRGVmVmFsdWUSOAoObmFt",
            "ZV93aXRoX3R5cGUYASABKAsyIC5kYW1sX2xmXzEuRGVmVmFsdWUuTmFtZVdp",
            "dGhUeXBlEh0KBGV4cHIYAiABKAsyDy5kYW1sX2xmXzEuRXhwchIZChFub19w",
            "YXJ0eV9saXRlcmFscxgDIAEoCBIPCgdpc190ZXN0GAQgASgIEiUKCGxvY2F0",
            "aW9uGAUgASgLMhMuZGFtbF9sZl8xLkxvY2F0aW9uGl4KDE5hbWVXaXRoVHlw",
            "ZRISCgpuYW1lX2RuYW1lGAEgAygJEhsKE25hbWVfaW50ZXJuZWRfZG5hbWUY",
            "AyABKAUSHQoEdHlwZRgCIAEoCzIPLmRhbWxfbGZfMS5UeXBlIpABCgxGZWF0",
            "dXJlRmxhZ3MSGwoTZm9yYmlkUGFydHlMaXRlcmFscxgBIAEoCBIvCidkb250",
            "RGl2dWxnZUNvbnRyYWN0SWRzSW5DcmVhdGVBcmd1bWVudHMYAiABKAgSMgoq",
            "ZG9udERpc2Nsb3NlTm9uQ29uc3VtaW5nQ2hvaWNlc1RvT2JzZXJ2ZXJzGAMg",
            "ASgIIowCCgZNb2R1bGUSKwoKbmFtZV9kbmFtZRgBIAEoCzIVLmRhbWxfbGZf",
            "MS5Eb3R0ZWROYW1lSAASHQoTbmFtZV9pbnRlcm5lZF9kbmFtZRgIIAEoBUgA",
            "EiYKBWZsYWdzGAQgASgLMhcuZGFtbF9sZl8xLkZlYXR1cmVGbGFncxIqCgpk",
            "YXRhX3R5cGVzGAUgAygLMhYuZGFtbF9sZl8xLkRlZkRhdGFUeXBlEiMKBnZh",
            "bHVlcxgGIAMoCzITLmRhbWxfbGZfMS5EZWZWYWx1ZRIpCgl0ZW1wbGF0ZXMY",
            "ByADKAsyFi5kYW1sX2xmXzEuRGVmVGVtcGxhdGVCBgoEbmFtZUoECAIQA0oE",
            "CAMQBCIzChJJbnRlcm5lZERvdHRlZE5hbWUSHQoVc2VnbWVudHNfaW50ZXJu",
            "ZWRfc3RyGAEgAygFIoUBCgdQYWNrYWdlEiIKB21vZHVsZXMYASADKAsyES5k",
            "YW1sX2xmXzEuTW9kdWxlEhgKEGludGVybmVkX3N0cmluZ3MYAiADKAkSPAoV",
            "aW50ZXJuZWRfZG90dGVkX25hbWVzGAMgAygLMh0uZGFtbF9sZl8xLkludGVy",
            "bmVkRG90dGVkTmFtZSrfAQoIUHJpbVR5cGUSCAoEVU5JVBAAEggKBEJPT0wQ",
            "ARIJCgVJTlQ2NBACEgsKB0RFQ0lNQUwQAxIICgRURVhUEAUSDQoJVElNRVNU",
            "QU1QEAYSCQoFUEFSVFkQCBIICgRMSVNUEAkSCgoGVVBEQVRFEAoSDAoIU0NF",
            "TkFSSU8QCxIICgREQVRFEAwSDwoLQ09OVFJBQ1RfSUQQDRIMCghPUFRJT05B",
            "TBAOEgkKBUFSUk9XEA8SBwoDTUFQEBASCwoHTlVNRVJJQxAREgcKA0FOWRAS",
            "EgwKCFRZUEVfUkVQEBMqNAoHUHJpbUNvbhIMCghDT05fVU5JVBAAEg0KCUNP",
            "Tl9GQUxTRRABEgwKCENPTl9UUlVFEAIqzA0KD0J1aWx0aW5GdW5jdGlvbhIP",
            "CgtBRERfREVDSU1BTBAAEg8KC1NVQl9ERUNJTUFMEAESDwoLTVVMX0RFQ0lN",
            "QUwQAhIPCgtESVZfREVDSU1BTBADEhEKDVJPVU5EX0RFQ0lNQUwQBhIPCgtB",
            "RERfTlVNRVJJQxBrEg8KC1NVQl9OVU1FUklDEGwSDwoLTVVMX05VTUVSSUMQ",
            "bRIPCgtESVZfTlVNRVJJQxBuEhEKDVJPVU5EX05VTUVSSUMQbxIQCgxDQVNU",
            "X05VTUVSSUMQeRIRCg1TSElGVF9OVU1FUklDEHoSDQoJQUREX0lOVDY0EAcS",
            "DQoJU1VCX0lOVDY0EAgSDQoJTVVMX0lOVDY0EAkSDQoJRElWX0lOVDY0EAoS",
            "DQoJTU9EX0lOVDY0EAsSDQoJRVhQX0lOVDY0EAwSCQoFRk9MREwQFBIJCgVG",
            "T0xEUhAVEg0KCU1BUF9FTVBUWRBgEg4KCk1BUF9JTlNFUlQQYRIOCgpNQVBf",
            "TE9PS1VQEGISDgoKTUFQX0RFTEVURRBjEg8KC01BUF9UT19MSVNUEGQSDAoI",
            "TUFQX1NJWkUQZRIQCgxFWFBMT0RFX1RFWFQQFxIPCgtBUFBFTkRfVEVYVBAY",
            "EgkKBUVSUk9SEBkSDQoJTEVRX0lOVDY0ECESDwoLTEVRX0RFQ0lNQUwQIhIP",
            "CgtMRVFfTlVNRVJJQxBwEgwKCExFUV9URVhUECQSEQoNTEVRX1RJTUVTVEFN",
            "UBAlEgwKCExFUV9EQVRFEEMSDQoJTEVRX1BBUlRZEFkSDgoKTEVTU19JTlQ2",
            "NBAnEhAKDExFU1NfREVDSU1BTBAoEhAKDExFU1NfTlVNRVJJQxBxEg0KCUxF",
            "U1NfVEVYVBAqEhIKDkxFU1NfVElNRVNUQU1QECsSDQoJTEVTU19EQVRFEEQS",
            "DgoKTEVTU19QQVJUWRBaEg0KCUdFUV9JTlQ2NBAtEg8KC0dFUV9ERUNJTUFM",
            "EC4SDwoLR0VRX05VTUVSSUMQchIMCghHRVFfVEVYVBAwEhEKDUdFUV9USU1F",
            "U1RBTVAQMRIMCghHRVFfREFURRBFEg0KCUdFUV9QQVJUWRBbEhEKDUdSRUFU",
            "RVJfSU5UNjQQMxITCg9HUkVBVEVSX0RFQ0lNQUwQNBITCg9HUkVBVEVSX05V",
            "TUVSSUMQcxIQCgxHUkVBVEVSX1RFWFQQNhIVChFHUkVBVEVSX1RJTUVTVEFN",
            "UBA3EhAKDEdSRUFURVJfREFURRBGEhEKDUdSRUFURVJfUEFSVFkQXBIRCg1U",
            "T19URVhUX0lOVDY0EDkSEwoPVE9fVEVYVF9ERUNJTUFMEDoSEwoPVE9fVEVY",
            "VF9OVU1FUklDEHQSEAoMVE9fVEVYVF9URVhUEDwSFQoRVE9fVEVYVF9USU1F",
            "U1RBTVAQPRIQCgxUT19URVhUX0RBVEUQRxIYChRUT19RVU9URURfVEVYVF9Q",
            "QVJUWRA/EhEKDVRPX1RFWFRfUEFSVFkQXhITCg9GUk9NX1RFWFRfUEFSVFkQ",
            "XxITCg9GUk9NX1RFWFRfSU5UNjQQZxIVChFGUk9NX1RFWFRfREVDSU1BTBBo",
            "EhUKEUZST01fVEVYVF9OVU1FUklDEHUSDwoLU0hBMjU2X1RFWFQQXRIVChFE",
            "QVRFX1RPX1VOSVhfREFZUxBIEhUKEVVOSVhfREFZU19UT19EQVRFEEkSIgoe",
            "VElNRVNUQU1QX1RPX1VOSVhfTUlDUk9TRUNPTkRTEEoSIgoeVU5JWF9NSUNS",
            "T1NFQ09ORFNfVE9fVElNRVNUQU1QEEsSFAoQSU5UNjRfVE9fREVDSU1BTBBM",
            "EhQKEERFQ0lNQUxfVE9fSU5UNjQQTRIUChBJTlQ2NF9UT19OVU1FUklDEHYS",
            "FAoQTlVNRVJJQ19UT19JTlQ2NBB3EhAKDElNUExPREVfVEVYVBBOEg8KC0VR",
            "VUFMX0lOVDY0EE8SEQoNRVFVQUxfREVDSU1BTBBQEhEKDUVRVUFMX05VTUVS",
            "SUMQeBIOCgpFUVVBTF9URVhUEFESEwoPRVFVQUxfVElNRVNUQU1QEFISDgoK",
            "RVFVQUxfREFURRBTEg8KC0VRVUFMX1BBUlRZEFQSDgoKRVFVQUxfQk9PTBBV",
            "EhUKEUVRVUFMX0NPTlRSQUNUX0lEEFYSDgoKRVFVQUxfTElTVBBXEhIKDkVR",
            "VUFMX1RZUEVfUkVQEHsSCQoFVFJBQ0UQWBIWChJDT0VSQ0VfQ09OVFJBQ1Rf",
            "SUQQZhIZChVURVhUX0ZST01fQ09ERV9QT0lOVFMQaRIXChNURVhUX1RPX0NP",
            "REVfUE9JTlRTEGpCRQocY29tLmRpZ2l0YWxhc3NldC5kYW1sX2xmXzFfN6oC",
            "JENvbS5EaWdpdGFsQXNzZXQuRGFtbF9MZl8xXzcuRGFtbExmMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimType), typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimCon), typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.BuiltinFunction), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PackageRef), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PackageRef.Parser, new[]{ "Self", "PackageIdStr", "PackageIdInternedStr" }, new[]{ "Sum" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName.Parser, new[]{ "Segments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef.Parser, new[]{ "PackageRef", "ModuleNameDname", "ModuleNameInternedDname" }, new[]{ "ModuleName" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName.Parser, new[]{ "Module", "NameDname", "NameInternedDname" }, new[]{ "Name" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ValName), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ValName.Parser, new[]{ "Module", "NameDname", "NameInternedDname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType.Parser, new[]{ "FieldStr", "FieldInternedStr", "Type" }, new[]{ "Field" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType.Parser, new[]{ "VarStr", "VarInternedStr", "Type" }, new[]{ "Var" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind.Parser, new[]{ "VarStr", "VarInternedStr", "Kind" }, new[]{ "Var" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr.Parser, new[]{ "FieldStr", "FieldInternedStr", "Expr" }, new[]{ "Field" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Binding), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Binding.Parser, new[]{ "Binder", "Bound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind.Parser, new[]{ "Star", "Arrow", "Nat" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind.Types.Arrow), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind.Types.Arrow.Parser, new[]{ "Params", "Result" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Parser, new[]{ "Var", "Con", "Prim", "Fun", "Forall", "Tuple", "Nat" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Var), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Var.Parser, new[]{ "VarStr", "VarInternedStr", "Args" }, new[]{ "Var" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con.Parser, new[]{ "Tycon", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Prim), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Prim.Parser, new[]{ "Prim_", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Fun), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Fun.Parser, new[]{ "Params", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Forall), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Forall.Parser, new[]{ "Vars", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Tuple), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Tuple.Parser, new[]{ "Fields" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimLit), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimLit.Parser, new[]{ "Int64", "DecimalStr", "NumericInternedStr", "TextStr", "TextInternedStr", "Timestamp", "PartyStr", "PartyInternedStr", "Date" }, new[]{ "Sum" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location.Parser, new[]{ "Module", "Range" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location.Types.Range), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location.Types.Range.Parser, new[]{ "StartLine", "StartCol", "EndLine", "EndCol" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Parser, new[]{ "Location", "VarStr", "VarInternedStr", "Val", "Builtin", "PrimCon", "PrimLit", "RecCon", "RecProj", "RecUpd", "VariantCon", "EnumCon", "TupleCon", "TupleProj", "TupleUpd", "App", "TyApp", "Abs", "TyAbs", "Case", "Let", "Nil", "Cons", "Update", "Scenario", "OptionalNone", "OptionalSome", "ToAny", "FromAny", "TypeRep" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecCon), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecCon.Parser, new[]{ "Tycon", "Fields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecProj), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecProj.Parser, new[]{ "Tycon", "FieldStr", "FieldInternedStr", "Record" }, new[]{ "Field" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecUpd), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecUpd.Parser, new[]{ "Tycon", "FieldStr", "FieldInternedStr", "Record", "Update" }, new[]{ "Field" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.VariantCon), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.VariantCon.Parser, new[]{ "Tycon", "VariantConStr", "VariantConInternedStr", "VariantArg" }, new[]{ "VariantCon" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.EnumCon), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.EnumCon.Parser, new[]{ "Tycon", "EnumConStr", "EnumConInternedStr" }, new[]{ "EnumCon" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleCon), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleCon.Parser, new[]{ "Fields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleProj), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleProj.Parser, new[]{ "FieldStr", "FieldInternedStr", "Tuple" }, new[]{ "Field" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleUpd), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleUpd.Parser, new[]{ "FieldStr", "FieldInternedStr", "Tuple", "Update" }, new[]{ "Field" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.App), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.App.Parser, new[]{ "Fun", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyApp), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyApp.Parser, new[]{ "Expr", "Types_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Abs), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Abs.Parser, new[]{ "Param", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyAbs), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyAbs.Parser, new[]{ "Param", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Nil), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Nil.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Cons), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Cons.Parser, new[]{ "Type", "Front", "Tail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalNone), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalNone.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalSome), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalSome.Parser, new[]{ "Type", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.ToAny), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.ToAny.Parser, new[]{ "Type", "Expr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.FromAny), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.FromAny.Parser, new[]{ "Type", "Expr" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Parser, new[]{ "Default", "Variant", "PrimCon", "Nil", "Cons", "OptionalNone", "OptionalSome", "Enum", "Body" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Variant), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Variant.Parser, new[]{ "Con", "VariantStr", "VariantInternedStr", "BinderStr", "BinderInternedStr" }, new[]{ "Variant", "Binder" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Enum), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Enum.Parser, new[]{ "Con", "ConstructorStr", "ConstructorInternedStr" }, new[]{ "Constructor" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Cons), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Cons.Parser, new[]{ "VarHeadStr", "VarHeadInternedStr", "VarTailStr", "VarTailInternedStr" }, new[]{ "VarHead", "VarTail" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.OptionalSome), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.OptionalSome.Parser, new[]{ "VarBodyStr", "VarBodyInternedStr" }, new[]{ "VarBody" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Case), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Case.Parser, new[]{ "Scrut", "Alts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block.Parser, new[]{ "Bindings", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure.Parser, new[]{ "Type", "Expr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Parser, new[]{ "Pure", "Block", "Create", "Exercise", "Fetch", "GetTime", "LookupByKey", "FetchByKey", "EmbedExpr" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Create), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Create.Parser, new[]{ "Template", "Expr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Exercise), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Exercise.Parser, new[]{ "Template", "ChoiceStr", "ChoiceInternedStr", "Cid", "Actor", "Arg" }, new[]{ "Choice" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Fetch), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Fetch.Parser, new[]{ "Template", "Cid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.EmbedExpr), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.EmbedExpr.Parser, new[]{ "Type", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey.Parser, new[]{ "Template", "Key" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Parser, new[]{ "Pure", "Block", "Commit", "MustFailAt", "Pass", "GetTime", "GetParty", "EmbedExpr" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit.Parser, new[]{ "Party", "Expr", "RetType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.EmbedExpr), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.EmbedExpr.Parser, new[]{ "Type", "Body" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TemplateChoice), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TemplateChoice.Parser, new[]{ "NameStr", "NameInternedStr", "Consuming", "Controllers", "ArgBinder", "RetType", "Update", "SelfBinderStr", "SelfBinderInternedStr", "Location" }, new[]{ "Name", "SelfBinder" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Parser, new[]{ "Projections", "Record" }, new[]{ "Sum" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projection), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projection.Parser, new[]{ "Tycon", "FieldStr", "FieldInternedStr" }, new[]{ "Field" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projections), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projections.Parser, new[]{ "Projections_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.RecordField), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.RecordField.Parser, new[]{ "FieldStr", "FieldInternedStr", "Expr" }, new[]{ "Field" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Record), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Record.Parser, new[]{ "Tycon", "Fields" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate.Parser, new[]{ "TyconDname", "TyconInternedDname", "ParamStr", "ParamInternedStr", "Precond", "Signatories", "Agreement", "Choices", "Observers", "Location", "Key" }, new[]{ "Tycon", "Param" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate.Types.DefKey), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate.Types.DefKey.Parser, new[]{ "Type", "Key", "ComplexKey", "Maintainers" }, new[]{ "KeyExpr" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Parser, new[]{ "NameDname", "NameInternedDname", "Params", "Record", "Variant", "Enum", "Serializable", "Location" }, new[]{ "Name", "DataCons" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields.Parser, new[]{ "Fields_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.EnumConstructors), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.EnumConstructors.Parser, new[]{ "ConstructorsStr", "ConstructorsInternedStr" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue.Parser, new[]{ "NameWithType", "Expr", "NoPartyLiterals", "IsTest", "Location" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue.Types.NameWithType), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue.Types.NameWithType.Parser, new[]{ "NameDname", "NameInternedDname", "Type" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FeatureFlags), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FeatureFlags.Parser, new[]{ "ForbidPartyLiterals", "DontDivulgeContractIdsInCreateArguments", "DontDiscloseNonConsumingChoicesToObservers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Module), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Module.Parser, new[]{ "NameDname", "NameInternedDname", "Flags", "DataTypes", "Values", "Templates" }, new[]{ "Name" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.InternedDottedName), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.InternedDottedName.Parser, new[]{ "SegmentsInternedStr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Package), global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Package.Parser, new[]{ "Modules", "InternedStrings", "InternedDottedNames" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Builtin primitive types
  /// </summary>
  public enum PrimType {
    /// <summary>
    /// Builtin type 'Unit'
    /// </summary>
    [pbr::OriginalName("UNIT")] Unit = 0,
    /// <summary>
    /// Builtin type 'Bool'
    /// </summary>
    [pbr::OriginalName("BOOL")] Bool = 1,
    /// <summary>
    /// Builtin type 'Int64'
    /// </summary>
    [pbr::OriginalName("INT64")] Int64 = 2,
    /// <summary>
    /// Builtin type for legacy 'Decimal'
    /// Alias for (Numeric 10)
    /// *available in version &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("DECIMAL")] Decimal = 3,
    /// <summary>
    /// Builtin type 'Text'
    /// </summary>
    [pbr::OriginalName("TEXT")] Text = 5,
    /// <summary>
    /// Builtin type 'Timestamp'
    /// </summary>
    [pbr::OriginalName("TIMESTAMP")] Timestamp = 6,
    /// <summary>
    /// Builtin tpe 'Party'
    /// </summary>
    [pbr::OriginalName("PARTY")] Party = 8,
    /// <summary>
    /// Builtin type 'List'
    /// </summary>
    [pbr::OriginalName("LIST")] List = 9,
    /// <summary>
    /// Builtin type 'Update'
    /// </summary>
    [pbr::OriginalName("UPDATE")] Update = 10,
    /// <summary>
    /// Builtin type 'Scenario'
    /// </summary>
    [pbr::OriginalName("SCENARIO")] Scenario = 11,
    /// <summary>
    /// Builtin type 'Date'
    /// </summary>
    [pbr::OriginalName("DATE")] Date = 12,
    /// <summary>
    /// Builtin type 'ContractId'
    /// </summary>
    [pbr::OriginalName("CONTRACT_ID")] ContractId = 13,
    /// <summary>
    /// Builtin type 'Optional'
    /// *Available in versions >= 1.1*
    /// </summary>
    [pbr::OriginalName("OPTIONAL")] Optional = 14,
    /// <summary>
    /// Builtin type `TArrow`
    /// *Available in versions >= 1.1*
    /// </summary>
    [pbr::OriginalName("ARROW")] Arrow = 15,
    /// <summary>
    /// Builtin type 'TMap`
    /// *Available in versions >= 1.3*
    /// </summary>
    [pbr::OriginalName("MAP")] Map = 16,
    /// <summary>
    /// Builtin type 'Numeric'
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("NUMERIC")] Numeric = 17,
    /// <summary>
    /// Builtin type 'Any'
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("ANY")] Any = 18,
    /// <summary>
    /// Builtin type 'TypeRep'
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("TYPE_REP")] TypeRep = 19,
  }

  /// <summary>
  /// Primitive constructors
  /// </summary>
  public enum PrimCon {
    /// <summary>
    /// Unit value '()'
    /// </summary>
    [pbr::OriginalName("CON_UNIT")] ConUnit = 0,
    /// <summary>
    /// 'False' boolean value
    /// </summary>
    [pbr::OriginalName("CON_FALSE")] ConFalse = 1,
    /// <summary>
    /// 'True' boolean value
    /// </summary>
    [pbr::OriginalName("CON_TRUE")] ConTrue = 2,
  }

  /// <summary>
  /// Builtin functions
  /// Refer to DAML-LF major version 1 specification for types and behavior of those.
  /// </summary>
  public enum BuiltinFunction {
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("ADD_DECIMAL")] AddDecimal = 0,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("SUB_DECIMAL")] SubDecimal = 1,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("MUL_DECIMAL")] MulDecimal = 2,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("DIV_DECIMAL")] DivDecimal = 3,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("ROUND_DECIMAL")] RoundDecimal = 6,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("ADD_NUMERIC")] AddNumeric = 107,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("SUB_NUMERIC")] SubNumeric = 108,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("MUL_NUMERIC")] MulNumeric = 109,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("DIV_NUMERIC")] DivNumeric = 110,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("ROUND_NUMERIC")] RoundNumeric = 111,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("CAST_NUMERIC")] CastNumeric = 121,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("SHIFT_NUMERIC")] ShiftNumeric = 122,
    [pbr::OriginalName("ADD_INT64")] AddInt64 = 7,
    [pbr::OriginalName("SUB_INT64")] SubInt64 = 8,
    [pbr::OriginalName("MUL_INT64")] MulInt64 = 9,
    [pbr::OriginalName("DIV_INT64")] DivInt64 = 10,
    [pbr::OriginalName("MOD_INT64")] ModInt64 = 11,
    [pbr::OriginalName("EXP_INT64")] ExpInt64 = 12,
    [pbr::OriginalName("FOLDL")] Foldl = 20,
    [pbr::OriginalName("FOLDR")] Foldr = 21,
    [pbr::OriginalName("MAP_EMPTY")] MapEmpty = 96,
    [pbr::OriginalName("MAP_INSERT")] MapInsert = 97,
    [pbr::OriginalName("MAP_LOOKUP")] MapLookup = 98,
    [pbr::OriginalName("MAP_DELETE")] MapDelete = 99,
    [pbr::OriginalName("MAP_TO_LIST")] MapToList = 100,
    [pbr::OriginalName("MAP_SIZE")] MapSize = 101,
    [pbr::OriginalName("EXPLODE_TEXT")] ExplodeText = 23,
    [pbr::OriginalName("APPEND_TEXT")] AppendText = 24,
    [pbr::OriginalName("ERROR")] Error = 25,
    [pbr::OriginalName("LEQ_INT64")] LeqInt64 = 33,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("LEQ_DECIMAL")] LeqDecimal = 34,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("LEQ_NUMERIC")] LeqNumeric = 112,
    [pbr::OriginalName("LEQ_TEXT")] LeqText = 36,
    [pbr::OriginalName("LEQ_TIMESTAMP")] LeqTimestamp = 37,
    [pbr::OriginalName("LEQ_DATE")] LeqDate = 67,
    /// <summary>
    /// *Available in versions >= 1.1*
    /// </summary>
    [pbr::OriginalName("LEQ_PARTY")] LeqParty = 89,
    [pbr::OriginalName("LESS_INT64")] LessInt64 = 39,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("LESS_DECIMAL")] LessDecimal = 40,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("LESS_NUMERIC")] LessNumeric = 113,
    [pbr::OriginalName("LESS_TEXT")] LessText = 42,
    [pbr::OriginalName("LESS_TIMESTAMP")] LessTimestamp = 43,
    [pbr::OriginalName("LESS_DATE")] LessDate = 68,
    /// <summary>
    /// *Available in versions >= 1.1*
    /// </summary>
    [pbr::OriginalName("LESS_PARTY")] LessParty = 90,
    [pbr::OriginalName("GEQ_INT64")] GeqInt64 = 45,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("GEQ_DECIMAL")] GeqDecimal = 46,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("GEQ_NUMERIC")] GeqNumeric = 114,
    [pbr::OriginalName("GEQ_TEXT")] GeqText = 48,
    [pbr::OriginalName("GEQ_TIMESTAMP")] GeqTimestamp = 49,
    [pbr::OriginalName("GEQ_DATE")] GeqDate = 69,
    /// <summary>
    /// *Available in versions >= 1.1*
    /// </summary>
    [pbr::OriginalName("GEQ_PARTY")] GeqParty = 91,
    [pbr::OriginalName("GREATER_INT64")] GreaterInt64 = 51,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("GREATER_DECIMAL")] GreaterDecimal = 52,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("GREATER_NUMERIC")] GreaterNumeric = 115,
    [pbr::OriginalName("GREATER_TEXT")] GreaterText = 54,
    [pbr::OriginalName("GREATER_TIMESTAMP")] GreaterTimestamp = 55,
    [pbr::OriginalName("GREATER_DATE")] GreaterDate = 70,
    /// <summary>
    /// *Available in versions >= 1.1*
    /// </summary>
    [pbr::OriginalName("GREATER_PARTY")] GreaterParty = 92,
    [pbr::OriginalName("TO_TEXT_INT64")] ToTextInt64 = 57,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("TO_TEXT_DECIMAL")] ToTextDecimal = 58,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("TO_TEXT_NUMERIC")] ToTextNumeric = 116,
    [pbr::OriginalName("TO_TEXT_TEXT")] ToTextText = 60,
    [pbr::OriginalName("TO_TEXT_TIMESTAMP")] ToTextTimestamp = 61,
    [pbr::OriginalName("TO_TEXT_DATE")] ToTextDate = 71,
    /// <summary>
    /// legacy, remove in next major version
    /// </summary>
    [pbr::OriginalName("TO_QUOTED_TEXT_PARTY")] ToQuotedTextParty = 63,
    /// <summary>
    /// *Available in versions >= 1.2*
    /// </summary>
    [pbr::OriginalName("TO_TEXT_PARTY")] ToTextParty = 94,
    /// <summary>
    /// *Available in versions >= 1.2*, was named FROM_TEXT_PARTY in 1.2, 1.3 and 1.4
    /// </summary>
    [pbr::OriginalName("FROM_TEXT_PARTY")] FromTextParty = 95,
    /// <summary>
    /// *Available in versions >= 1.5*
    /// </summary>
    [pbr::OriginalName("FROM_TEXT_INT64")] FromTextInt64 = 103,
    /// <summary>
    /// *Available in versions 1.5 and 1.6
    /// </summary>
    [pbr::OriginalName("FROM_TEXT_DECIMAL")] FromTextDecimal = 104,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("FROM_TEXT_NUMERIC")] FromTextNumeric = 117,
    /// <summary>
    /// *Available in versions >= 1.2*
    /// </summary>
    [pbr::OriginalName("SHA256_TEXT")] Sha256Text = 93,
    /// <summary>
    /// Date -> Int64
    /// </summary>
    [pbr::OriginalName("DATE_TO_UNIX_DAYS")] DateToUnixDays = 72,
    /// <summary>
    /// Int64 -> Date
    /// </summary>
    [pbr::OriginalName("UNIX_DAYS_TO_DATE")] UnixDaysToDate = 73,
    /// <summary>
    /// Timestamp -> Int64
    /// </summary>
    [pbr::OriginalName("TIMESTAMP_TO_UNIX_MICROSECONDS")] TimestampToUnixMicroseconds = 74,
    /// <summary>
    /// Int64 -> Timestamp
    /// </summary>
    [pbr::OriginalName("UNIX_MICROSECONDS_TO_TIMESTAMP")] UnixMicrosecondsToTimestamp = 75,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("INT64_TO_DECIMAL")] Int64ToDecimal = 76,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("DECIMAL_TO_INT64")] DecimalToInt64 = 77,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("INT64_TO_NUMERIC")] Int64ToNumeric = 118,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("NUMERIC_TO_INT64")] NumericToInt64 = 119,
    [pbr::OriginalName("IMPLODE_TEXT")] ImplodeText = 78,
    [pbr::OriginalName("EQUAL_INT64")] EqualInt64 = 79,
    /// <summary>
    /// *Available in versions &lt; 1.7*
    /// </summary>
    [pbr::OriginalName("EQUAL_DECIMAL")] EqualDecimal = 80,
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [pbr::OriginalName("EQUAL_NUMERIC")] EqualNumeric = 120,
    [pbr::OriginalName("EQUAL_TEXT")] EqualText = 81,
    [pbr::OriginalName("EQUAL_TIMESTAMP")] EqualTimestamp = 82,
    [pbr::OriginalName("EQUAL_DATE")] EqualDate = 83,
    [pbr::OriginalName("EQUAL_PARTY")] EqualParty = 84,
    [pbr::OriginalName("EQUAL_BOOL")] EqualBool = 85,
    [pbr::OriginalName("EQUAL_CONTRACT_ID")] EqualContractId = 86,
    [pbr::OriginalName("EQUAL_LIST")] EqualList = 87,
    [pbr::OriginalName("EQUAL_TYPE_REP")] EqualTypeRep = 123,
    [pbr::OriginalName("TRACE")] Trace = 88,
    [pbr::OriginalName("COERCE_CONTRACT_ID")] CoerceContractId = 102,
    /// <summary>
    /// *Available in versions >= 1.6*
    /// </summary>
    [pbr::OriginalName("TEXT_FROM_CODE_POINTS")] TextFromCodePoints = 105,
    /// <summary>
    /// *Available in versions >= 1.6*
    /// </summary>
    [pbr::OriginalName("TEXT_TO_CODE_POINTS")] TextToCodePoints = 106,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Canonical encoding in one-ofs for cases that carry no meaningful
  /// values.
  /// </summary>
  public sealed partial class Unit : pb::IMessage<Unit> {
    private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Unit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit(Unit other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit Clone() {
      return new Unit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Unit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Unit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Unit other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Package reference
  /// </summary>
  public sealed partial class PackageRef : pb::IMessage<PackageRef> {
    private static readonly pb::MessageParser<PackageRef> _parser = new pb::MessageParser<PackageRef>(() => new PackageRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageRef(PackageRef other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Self:
          Self = other.Self.Clone();
          break;
        case SumOneofCase.PackageIdStr:
          PackageIdStr = other.PackageIdStr;
          break;
        case SumOneofCase.PackageIdInternedStr:
          PackageIdInternedStr = other.PackageIdInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageRef Clone() {
      return new PackageRef(this);
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 1;
    /// <summary>
    /// Reference to the package of which the package this reference
    /// belongs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit Self {
      get { return sumCase_ == SumOneofCase.Self ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Self;
      }
    }

    /// <summary>Field number for the "package_id_str" field.</summary>
    public const int PackageIdStrFieldNumber = 2;
    /// <summary>
    /// A `Package identifier` for an imported Package.
    /// *Must be a list of valid packageId string*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageIdStr {
      get { return sumCase_ == SumOneofCase.PackageIdStr ? (string) sum_ : ""; }
      set {
        sum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sumCase_ = SumOneofCase.PackageIdStr;
      }
    }

    /// <summary>Field number for the "package_id_interned_str" field.</summary>
    public const int PackageIdInternedStrFieldNumber = 3;
    /// <summary>
    /// An index into `interned_package_ids` of the Package containing
    /// this reference.
    /// *Must be a valid interned package Id string*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageIdInternedStr {
      get { return sumCase_ == SumOneofCase.PackageIdInternedStr ? (int) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.PackageIdInternedStr;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Self = 1,
      PackageIdStr = 2,
      PackageIdInternedStr = 3,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Self, other.Self)) return false;
      if (PackageIdStr != other.PackageIdStr) return false;
      if (PackageIdInternedStr != other.PackageIdInternedStr) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Self) hash ^= Self.GetHashCode();
      if (sumCase_ == SumOneofCase.PackageIdStr) hash ^= PackageIdStr.GetHashCode();
      if (sumCase_ == SumOneofCase.PackageIdInternedStr) hash ^= PackageIdInternedStr.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Self) {
        output.WriteRawTag(10);
        output.WriteMessage(Self);
      }
      if (sumCase_ == SumOneofCase.PackageIdStr) {
        output.WriteRawTag(18);
        output.WriteString(PackageIdStr);
      }
      if (sumCase_ == SumOneofCase.PackageIdInternedStr) {
        output.WriteRawTag(24);
        output.WriteInt32(PackageIdInternedStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Self) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      if (sumCase_ == SumOneofCase.PackageIdStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageIdStr);
      }
      if (sumCase_ == SumOneofCase.PackageIdInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageIdInternedStr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageRef other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Self:
          if (Self == null) {
            Self = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
          }
          Self.MergeFrom(other.Self);
          break;
        case SumOneofCase.PackageIdStr:
          PackageIdStr = other.PackageIdStr;
          break;
        case SumOneofCase.PackageIdInternedStr:
          PackageIdInternedStr = other.PackageIdInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.Self) {
              subBuilder.MergeFrom(Self);
            }
            input.ReadMessage(subBuilder);
            Self = subBuilder;
            break;
          }
          case 18: {
            PackageIdStr = input.ReadString();
            break;
          }
          case 24: {
            PackageIdInternedStr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A `name`, e.g. Util.Either.isLeft
  /// *Available in version &lt; 1.7*
  /// </summary>
  public sealed partial class DottedName : pb::IMessage<DottedName> {
    private static readonly pb::MessageParser<DottedName> _parser = new pb::MessageParser<DottedName>(() => new DottedName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DottedName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DottedName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DottedName(DottedName other) : this() {
      segments_ = other.segments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DottedName Clone() {
      return new DottedName(this);
    }

    /// <summary>Field number for the "segments" field.</summary>
    public const int SegmentsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_segments_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> segments_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// *Must be a non-empty list of a valid identifiers*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Segments {
      get { return segments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DottedName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DottedName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!segments_.Equals(other.segments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= segments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      segments_.WriteTo(output, _repeated_segments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += segments_.CalculateSize(_repeated_segments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DottedName other) {
      if (other == null) {
        return;
      }
      segments_.Add(other.segments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            segments_.AddEntriesFrom(input, _repeated_segments_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A fully qualified module reference
  /// </summary>
  public sealed partial class ModuleRef : pb::IMessage<ModuleRef> {
    private static readonly pb::MessageParser<ModuleRef> _parser = new pb::MessageParser<ModuleRef>(() => new ModuleRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleRef(ModuleRef other) : this() {
      packageRef_ = other.packageRef_ != null ? other.packageRef_.Clone() : null;
      switch (other.ModuleNameCase) {
        case ModuleNameOneofCase.ModuleNameDname:
          ModuleNameDname = other.ModuleNameDname.Clone();
          break;
        case ModuleNameOneofCase.ModuleNameInternedDname:
          ModuleNameInternedDname = other.ModuleNameInternedDname;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleRef Clone() {
      return new ModuleRef(this);
    }

    /// <summary>Field number for the "package_ref" field.</summary>
    public const int PackageRefFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PackageRef packageRef_;
    /// <summary>
    /// package where the module is defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PackageRef PackageRef {
      get { return packageRef_; }
      set {
        packageRef_ = value;
      }
    }

    /// <summary>Field number for the "module_name_dname" field.</summary>
    public const int ModuleNameDnameFieldNumber = 2;
    /// <summary>
    /// module name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName ModuleNameDname {
      get { return moduleNameCase_ == ModuleNameOneofCase.ModuleNameDname ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName) moduleName_ : null; }
      set {
        moduleName_ = value;
        moduleNameCase_ = value == null ? ModuleNameOneofCase.None : ModuleNameOneofCase.ModuleNameDname;
      }
    }

    /// <summary>Field number for the "module_name_interned_dname" field.</summary>
    public const int ModuleNameInternedDnameFieldNumber = 3;
    /// <summary>
    /// *Available in version >= 1.7*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModuleNameInternedDname {
      get { return moduleNameCase_ == ModuleNameOneofCase.ModuleNameInternedDname ? (int) moduleName_ : 0; }
      set {
        moduleName_ = value;
        moduleNameCase_ = ModuleNameOneofCase.ModuleNameInternedDname;
      }
    }

    private object moduleName_;
    /// <summary>Enum of possible cases for the "module_name" oneof.</summary>
    public enum ModuleNameOneofCase {
      None = 0,
      ModuleNameDname = 2,
      ModuleNameInternedDname = 3,
    }
    private ModuleNameOneofCase moduleNameCase_ = ModuleNameOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleNameOneofCase ModuleNameCase {
      get { return moduleNameCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModuleName() {
      moduleNameCase_ = ModuleNameOneofCase.None;
      moduleName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModuleRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModuleRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PackageRef, other.PackageRef)) return false;
      if (!object.Equals(ModuleNameDname, other.ModuleNameDname)) return false;
      if (ModuleNameInternedDname != other.ModuleNameInternedDname) return false;
      if (ModuleNameCase != other.ModuleNameCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (packageRef_ != null) hash ^= PackageRef.GetHashCode();
      if (moduleNameCase_ == ModuleNameOneofCase.ModuleNameDname) hash ^= ModuleNameDname.GetHashCode();
      if (moduleNameCase_ == ModuleNameOneofCase.ModuleNameInternedDname) hash ^= ModuleNameInternedDname.GetHashCode();
      hash ^= (int) moduleNameCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (packageRef_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PackageRef);
      }
      if (moduleNameCase_ == ModuleNameOneofCase.ModuleNameDname) {
        output.WriteRawTag(18);
        output.WriteMessage(ModuleNameDname);
      }
      if (moduleNameCase_ == ModuleNameOneofCase.ModuleNameInternedDname) {
        output.WriteRawTag(24);
        output.WriteInt32(ModuleNameInternedDname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (packageRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PackageRef);
      }
      if (moduleNameCase_ == ModuleNameOneofCase.ModuleNameDname) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModuleNameDname);
      }
      if (moduleNameCase_ == ModuleNameOneofCase.ModuleNameInternedDname) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModuleNameInternedDname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModuleRef other) {
      if (other == null) {
        return;
      }
      if (other.packageRef_ != null) {
        if (packageRef_ == null) {
          PackageRef = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PackageRef();
        }
        PackageRef.MergeFrom(other.PackageRef);
      }
      switch (other.ModuleNameCase) {
        case ModuleNameOneofCase.ModuleNameDname:
          if (ModuleNameDname == null) {
            ModuleNameDname = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName();
          }
          ModuleNameDname.MergeFrom(other.ModuleNameDname);
          break;
        case ModuleNameOneofCase.ModuleNameInternedDname:
          ModuleNameInternedDname = other.ModuleNameInternedDname;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (packageRef_ == null) {
              PackageRef = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PackageRef();
            }
            input.ReadMessage(PackageRef);
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName();
            if (moduleNameCase_ == ModuleNameOneofCase.ModuleNameDname) {
              subBuilder.MergeFrom(ModuleNameDname);
            }
            input.ReadMessage(subBuilder);
            ModuleNameDname = subBuilder;
            break;
          }
          case 24: {
            ModuleNameInternedDname = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A fully qualified reference to a type constructor name.
  /// </summary>
  public sealed partial class TypeConName : pb::IMessage<TypeConName> {
    private static readonly pb::MessageParser<TypeConName> _parser = new pb::MessageParser<TypeConName>(() => new TypeConName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeConName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeConName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeConName(TypeConName other) : this() {
      module_ = other.module_ != null ? other.module_.Clone() : null;
      switch (other.NameCase) {
        case NameOneofCase.NameDname:
          NameDname = other.NameDname.Clone();
          break;
        case NameOneofCase.NameInternedDname:
          NameInternedDname = other.NameInternedDname;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeConName Clone() {
      return new TypeConName(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef module_;
    /// <summary>
    /// Module where the type is defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef Module {
      get { return module_; }
      set {
        module_ = value;
      }
    }

    /// <summary>Field number for the "name_dname" field.</summary>
    public const int NameDnameFieldNumber = 2;
    /// <summary>
    /// type constructor name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName NameDname {
      get { return nameCase_ == NameOneofCase.NameDname ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName) name_ : null; }
      set {
        name_ = value;
        nameCase_ = value == null ? NameOneofCase.None : NameOneofCase.NameDname;
      }
    }

    /// <summary>Field number for the "name_interned_dname" field.</summary>
    public const int NameInternedDnameFieldNumber = 3;
    /// <summary>
    /// *Must be a valid interned name*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameInternedDname {
      get { return nameCase_ == NameOneofCase.NameInternedDname ? (int) name_ : 0; }
      set {
        name_ = value;
        nameCase_ = NameOneofCase.NameInternedDname;
      }
    }

    private object name_;
    /// <summary>Enum of possible cases for the "name" oneof.</summary>
    public enum NameOneofCase {
      None = 0,
      NameDname = 2,
      NameInternedDname = 3,
    }
    private NameOneofCase nameCase_ = NameOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameOneofCase NameCase {
      get { return nameCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      nameCase_ = NameOneofCase.None;
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeConName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeConName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Module, other.Module)) return false;
      if (!object.Equals(NameDname, other.NameDname)) return false;
      if (NameInternedDname != other.NameInternedDname) return false;
      if (NameCase != other.NameCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (module_ != null) hash ^= Module.GetHashCode();
      if (nameCase_ == NameOneofCase.NameDname) hash ^= NameDname.GetHashCode();
      if (nameCase_ == NameOneofCase.NameInternedDname) hash ^= NameInternedDname.GetHashCode();
      hash ^= (int) nameCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (module_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Module);
      }
      if (nameCase_ == NameOneofCase.NameDname) {
        output.WriteRawTag(18);
        output.WriteMessage(NameDname);
      }
      if (nameCase_ == NameOneofCase.NameInternedDname) {
        output.WriteRawTag(24);
        output.WriteInt32(NameInternedDname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (module_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Module);
      }
      if (nameCase_ == NameOneofCase.NameDname) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameDname);
      }
      if (nameCase_ == NameOneofCase.NameInternedDname) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameInternedDname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeConName other) {
      if (other == null) {
        return;
      }
      if (other.module_ != null) {
        if (module_ == null) {
          Module = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef();
        }
        Module.MergeFrom(other.Module);
      }
      switch (other.NameCase) {
        case NameOneofCase.NameDname:
          if (NameDname == null) {
            NameDname = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName();
          }
          NameDname.MergeFrom(other.NameDname);
          break;
        case NameOneofCase.NameInternedDname:
          NameInternedDname = other.NameInternedDname;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (module_ == null) {
              Module = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef();
            }
            input.ReadMessage(Module);
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName();
            if (nameCase_ == NameOneofCase.NameDname) {
              subBuilder.MergeFrom(NameDname);
            }
            input.ReadMessage(subBuilder);
            NameDname = subBuilder;
            break;
          }
          case 24: {
            NameInternedDname = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A fully qualified reference to a value definition.
  /// </summary>
  public sealed partial class ValName : pb::IMessage<ValName> {
    private static readonly pb::MessageParser<ValName> _parser = new pb::MessageParser<ValName>(() => new ValName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValName(ValName other) : this() {
      module_ = other.module_ != null ? other.module_.Clone() : null;
      nameDname_ = other.nameDname_.Clone();
      nameInternedDname_ = other.nameInternedDname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValName Clone() {
      return new ValName(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef module_;
    /// <summary>
    /// Module where the value is defined
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef Module {
      get { return module_; }
      set {
        module_ = value;
      }
    }

    /// <summary>Field number for the "name_dname" field.</summary>
    public const int NameDnameFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_nameDname_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> nameDname_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// *Must be a non-empty list of valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NameDname {
      get { return nameDname_; }
    }

    /// <summary>Field number for the "name_interned_dname" field.</summary>
    public const int NameInternedDnameFieldNumber = 3;
    private int nameInternedDname_;
    /// <summary>
    /// *Must be a valid interned name*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameInternedDname {
      get { return nameInternedDname_; }
      set {
        nameInternedDname_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Module, other.Module)) return false;
      if(!nameDname_.Equals(other.nameDname_)) return false;
      if (NameInternedDname != other.NameInternedDname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (module_ != null) hash ^= Module.GetHashCode();
      hash ^= nameDname_.GetHashCode();
      if (NameInternedDname != 0) hash ^= NameInternedDname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (module_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Module);
      }
      nameDname_.WriteTo(output, _repeated_nameDname_codec);
      if (NameInternedDname != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NameInternedDname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (module_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Module);
      }
      size += nameDname_.CalculateSize(_repeated_nameDname_codec);
      if (NameInternedDname != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameInternedDname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValName other) {
      if (other == null) {
        return;
      }
      if (other.module_ != null) {
        if (module_ == null) {
          Module = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef();
        }
        Module.MergeFrom(other.Module);
      }
      nameDname_.Add(other.nameDname_);
      if (other.NameInternedDname != 0) {
        NameInternedDname = other.NameInternedDname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (module_ == null) {
              Module = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef();
            }
            input.ReadMessage(Module);
            break;
          }
          case 18: {
            nameDname_.AddEntriesFrom(input, _repeated_nameDname_codec);
            break;
          }
          case 24: {
            NameInternedDname = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A field name definition in a record or a variant associated with a type.
  /// </summary>
  public sealed partial class FieldWithType : pb::IMessage<FieldWithType> {
    private static readonly pb::MessageParser<FieldWithType> _parser = new pb::MessageParser<FieldWithType>(() => new FieldWithType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldWithType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithType(FieldWithType other) : this() {
      type_ = other.type_ != null ? other.type_.Clone() : null;
      switch (other.FieldCase) {
        case FieldOneofCase.FieldStr:
          FieldStr = other.FieldStr;
          break;
        case FieldOneofCase.FieldInternedStr:
          FieldInternedStr = other.FieldInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithType Clone() {
      return new FieldWithType(this);
    }

    /// <summary>Field number for the "field_str" field.</summary>
    public const int FieldStrFieldNumber = 1;
    /// <summary>
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldStr {
      get { return fieldCase_ == FieldOneofCase.FieldStr ? (string) field_ : ""; }
      set {
        field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        fieldCase_ = FieldOneofCase.FieldStr;
      }
    }

    /// <summary>Field number for the "field_interned_str" field.</summary>
    public const int FieldInternedStrFieldNumber = 3;
    /// <summary>
    /// *Must a valid interned identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldInternedStr {
      get { return fieldCase_ == FieldOneofCase.FieldInternedStr ? (int) field_ : 0; }
      set {
        field_ = value;
        fieldCase_ = FieldOneofCase.FieldInternedStr;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
    /// <summary>
    /// Type associated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private object field_;
    /// <summary>Enum of possible cases for the "field" oneof.</summary>
    public enum FieldOneofCase {
      None = 0,
      FieldStr = 1,
      FieldInternedStr = 3,
    }
    private FieldOneofCase fieldCase_ = FieldOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldOneofCase FieldCase {
      get { return fieldCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearField() {
      fieldCase_ = FieldOneofCase.None;
      field_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldWithType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldWithType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldStr != other.FieldStr) return false;
      if (FieldInternedStr != other.FieldInternedStr) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (FieldCase != other.FieldCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fieldCase_ == FieldOneofCase.FieldStr) hash ^= FieldStr.GetHashCode();
      if (fieldCase_ == FieldOneofCase.FieldInternedStr) hash ^= FieldInternedStr.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      hash ^= (int) fieldCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fieldCase_ == FieldOneofCase.FieldStr) {
        output.WriteRawTag(10);
        output.WriteString(FieldStr);
      }
      if (type_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
        output.WriteRawTag(24);
        output.WriteInt32(FieldInternedStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fieldCase_ == FieldOneofCase.FieldStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldStr);
      }
      if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldInternedStr);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldWithType other) {
      if (other == null) {
        return;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
        }
        Type.MergeFrom(other.Type);
      }
      switch (other.FieldCase) {
        case FieldOneofCase.FieldStr:
          FieldStr = other.FieldStr;
          break;
        case FieldOneofCase.FieldInternedStr:
          FieldInternedStr = other.FieldInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FieldStr = input.ReadString();
            break;
          }
          case 18: {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            input.ReadMessage(Type);
            break;
          }
          case 24: {
            FieldInternedStr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Binder associated with a type.
  /// </summary>
  public sealed partial class VarWithType : pb::IMessage<VarWithType> {
    private static readonly pb::MessageParser<VarWithType> _parser = new pb::MessageParser<VarWithType>(() => new VarWithType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VarWithType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarWithType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarWithType(VarWithType other) : this() {
      type_ = other.type_ != null ? other.type_.Clone() : null;
      switch (other.VarCase) {
        case VarOneofCase.VarStr:
          VarStr = other.VarStr;
          break;
        case VarOneofCase.VarInternedStr:
          VarInternedStr = other.VarInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarWithType Clone() {
      return new VarWithType(this);
    }

    /// <summary>Field number for the "var_str" field.</summary>
    public const int VarStrFieldNumber = 1;
    /// <summary>
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VarStr {
      get { return varCase_ == VarOneofCase.VarStr ? (string) var_ : ""; }
      set {
        var_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        varCase_ = VarOneofCase.VarStr;
      }
    }

    /// <summary>Field number for the "var_interned_str" field.</summary>
    public const int VarInternedStrFieldNumber = 3;
    /// <summary>
    /// *Must be a valid interned identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VarInternedStr {
      get { return varCase_ == VarOneofCase.VarInternedStr ? (int) var_ : 0; }
      set {
        var_ = value;
        varCase_ = VarOneofCase.VarInternedStr;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
    /// <summary>
    /// Type of the bound variable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private object var_;
    /// <summary>Enum of possible cases for the "var" oneof.</summary>
    public enum VarOneofCase {
      None = 0,
      VarStr = 1,
      VarInternedStr = 3,
    }
    private VarOneofCase varCase_ = VarOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarOneofCase VarCase {
      get { return varCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVar() {
      varCase_ = VarOneofCase.None;
      var_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VarWithType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VarWithType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VarStr != other.VarStr) return false;
      if (VarInternedStr != other.VarInternedStr) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (VarCase != other.VarCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (varCase_ == VarOneofCase.VarStr) hash ^= VarStr.GetHashCode();
      if (varCase_ == VarOneofCase.VarInternedStr) hash ^= VarInternedStr.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      hash ^= (int) varCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (varCase_ == VarOneofCase.VarStr) {
        output.WriteRawTag(10);
        output.WriteString(VarStr);
      }
      if (type_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (varCase_ == VarOneofCase.VarInternedStr) {
        output.WriteRawTag(24);
        output.WriteInt32(VarInternedStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (varCase_ == VarOneofCase.VarStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VarStr);
      }
      if (varCase_ == VarOneofCase.VarInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarInternedStr);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VarWithType other) {
      if (other == null) {
        return;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
        }
        Type.MergeFrom(other.Type);
      }
      switch (other.VarCase) {
        case VarOneofCase.VarStr:
          VarStr = other.VarStr;
          break;
        case VarOneofCase.VarInternedStr:
          VarInternedStr = other.VarInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VarStr = input.ReadString();
            break;
          }
          case 18: {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            input.ReadMessage(Type);
            break;
          }
          case 24: {
            VarInternedStr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Type binder associated with a kind.
  /// </summary>
  public sealed partial class TypeVarWithKind : pb::IMessage<TypeVarWithKind> {
    private static readonly pb::MessageParser<TypeVarWithKind> _parser = new pb::MessageParser<TypeVarWithKind>(() => new TypeVarWithKind());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeVarWithKind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeVarWithKind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeVarWithKind(TypeVarWithKind other) : this() {
      kind_ = other.kind_ != null ? other.kind_.Clone() : null;
      switch (other.VarCase) {
        case VarOneofCase.VarStr:
          VarStr = other.VarStr;
          break;
        case VarOneofCase.VarInternedStr:
          VarInternedStr = other.VarInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeVarWithKind Clone() {
      return new TypeVarWithKind(this);
    }

    /// <summary>Field number for the "var_str" field.</summary>
    public const int VarStrFieldNumber = 1;
    /// <summary>
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VarStr {
      get { return varCase_ == VarOneofCase.VarStr ? (string) var_ : ""; }
      set {
        var_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        varCase_ = VarOneofCase.VarStr;
      }
    }

    /// <summary>Field number for the "var_interned_str" field.</summary>
    public const int VarInternedStrFieldNumber = 3;
    /// <summary>
    /// *Must be a valid interned identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VarInternedStr {
      get { return varCase_ == VarOneofCase.VarInternedStr ? (int) var_ : 0; }
      set {
        var_ = value;
        varCase_ = VarOneofCase.VarInternedStr;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind kind_;
    /// <summary>
    /// Kind of the bound variable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    private object var_;
    /// <summary>Enum of possible cases for the "var" oneof.</summary>
    public enum VarOneofCase {
      None = 0,
      VarStr = 1,
      VarInternedStr = 3,
    }
    private VarOneofCase varCase_ = VarOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarOneofCase VarCase {
      get { return varCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVar() {
      varCase_ = VarOneofCase.None;
      var_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeVarWithKind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeVarWithKind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VarStr != other.VarStr) return false;
      if (VarInternedStr != other.VarInternedStr) return false;
      if (!object.Equals(Kind, other.Kind)) return false;
      if (VarCase != other.VarCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (varCase_ == VarOneofCase.VarStr) hash ^= VarStr.GetHashCode();
      if (varCase_ == VarOneofCase.VarInternedStr) hash ^= VarInternedStr.GetHashCode();
      if (kind_ != null) hash ^= Kind.GetHashCode();
      hash ^= (int) varCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (varCase_ == VarOneofCase.VarStr) {
        output.WriteRawTag(10);
        output.WriteString(VarStr);
      }
      if (kind_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Kind);
      }
      if (varCase_ == VarOneofCase.VarInternedStr) {
        output.WriteRawTag(24);
        output.WriteInt32(VarInternedStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (varCase_ == VarOneofCase.VarStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VarStr);
      }
      if (varCase_ == VarOneofCase.VarInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarInternedStr);
      }
      if (kind_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeVarWithKind other) {
      if (other == null) {
        return;
      }
      if (other.kind_ != null) {
        if (kind_ == null) {
          Kind = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind();
        }
        Kind.MergeFrom(other.Kind);
      }
      switch (other.VarCase) {
        case VarOneofCase.VarStr:
          VarStr = other.VarStr;
          break;
        case VarOneofCase.VarInternedStr:
          VarInternedStr = other.VarInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VarStr = input.ReadString();
            break;
          }
          case 18: {
            if (kind_ == null) {
              Kind = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind();
            }
            input.ReadMessage(Kind);
            break;
          }
          case 24: {
            VarInternedStr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A field in a record with its value.
  /// </summary>
  public sealed partial class FieldWithExpr : pb::IMessage<FieldWithExpr> {
    private static readonly pb::MessageParser<FieldWithExpr> _parser = new pb::MessageParser<FieldWithExpr>(() => new FieldWithExpr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldWithExpr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithExpr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithExpr(FieldWithExpr other) : this() {
      expr_ = other.expr_ != null ? other.expr_.Clone() : null;
      switch (other.FieldCase) {
        case FieldOneofCase.FieldStr:
          FieldStr = other.FieldStr;
          break;
        case FieldOneofCase.FieldInternedStr:
          FieldInternedStr = other.FieldInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldWithExpr Clone() {
      return new FieldWithExpr(this);
    }

    /// <summary>Field number for the "field_str" field.</summary>
    public const int FieldStrFieldNumber = 1;
    /// <summary>
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldStr {
      get { return fieldCase_ == FieldOneofCase.FieldStr ? (string) field_ : ""; }
      set {
        field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        fieldCase_ = FieldOneofCase.FieldStr;
      }
    }

    /// <summary>Field number for the "field_interned_str" field.</summary>
    public const int FieldInternedStrFieldNumber = 3;
    /// <summary>
    /// *Must be a valid interned identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldInternedStr {
      get { return fieldCase_ == FieldOneofCase.FieldInternedStr ? (int) field_ : 0; }
      set {
        field_ = value;
        fieldCase_ = FieldOneofCase.FieldInternedStr;
      }
    }

    /// <summary>Field number for the "expr" field.</summary>
    public const int ExprFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr expr_;
    /// <summary>
    /// Value of the field
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Expr {
      get { return expr_; }
      set {
        expr_ = value;
      }
    }

    private object field_;
    /// <summary>Enum of possible cases for the "field" oneof.</summary>
    public enum FieldOneofCase {
      None = 0,
      FieldStr = 1,
      FieldInternedStr = 3,
    }
    private FieldOneofCase fieldCase_ = FieldOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldOneofCase FieldCase {
      get { return fieldCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearField() {
      fieldCase_ = FieldOneofCase.None;
      field_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldWithExpr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldWithExpr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldStr != other.FieldStr) return false;
      if (FieldInternedStr != other.FieldInternedStr) return false;
      if (!object.Equals(Expr, other.Expr)) return false;
      if (FieldCase != other.FieldCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fieldCase_ == FieldOneofCase.FieldStr) hash ^= FieldStr.GetHashCode();
      if (fieldCase_ == FieldOneofCase.FieldInternedStr) hash ^= FieldInternedStr.GetHashCode();
      if (expr_ != null) hash ^= Expr.GetHashCode();
      hash ^= (int) fieldCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fieldCase_ == FieldOneofCase.FieldStr) {
        output.WriteRawTag(10);
        output.WriteString(FieldStr);
      }
      if (expr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expr);
      }
      if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
        output.WriteRawTag(24);
        output.WriteInt32(FieldInternedStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fieldCase_ == FieldOneofCase.FieldStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldStr);
      }
      if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldInternedStr);
      }
      if (expr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldWithExpr other) {
      if (other == null) {
        return;
      }
      if (other.expr_ != null) {
        if (expr_ == null) {
          Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Expr.MergeFrom(other.Expr);
      }
      switch (other.FieldCase) {
        case FieldOneofCase.FieldStr:
          FieldStr = other.FieldStr;
          break;
        case FieldOneofCase.FieldInternedStr:
          FieldInternedStr = other.FieldInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FieldStr = input.ReadString();
            break;
          }
          case 18: {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Expr);
            break;
          }
          case 24: {
            FieldInternedStr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A binding of a typed binder to an expression
  /// </summary>
  public sealed partial class Binding : pb::IMessage<Binding> {
    private static readonly pb::MessageParser<Binding> _parser = new pb::MessageParser<Binding>(() => new Binding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Binding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Binding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Binding(Binding other) : this() {
      binder_ = other.binder_ != null ? other.binder_.Clone() : null;
      bound_ = other.bound_ != null ? other.bound_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Binding Clone() {
      return new Binding(this);
    }

    /// <summary>Field number for the "binder" field.</summary>
    public const int BinderFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType binder_;
    /// <summary>
    /// The binder (expression variable and type)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType Binder {
      get { return binder_; }
      set {
        binder_ = value;
      }
    }

    /// <summary>Field number for the "bound" field.</summary>
    public const int BoundFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr bound_;
    /// <summary>
    /// The value to which the variable is bound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Bound {
      get { return bound_; }
      set {
        bound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Binding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Binding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Binder, other.Binder)) return false;
      if (!object.Equals(Bound, other.Bound)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (binder_ != null) hash ^= Binder.GetHashCode();
      if (bound_ != null) hash ^= Bound.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (binder_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Binder);
      }
      if (bound_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (binder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Binder);
      }
      if (bound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bound);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Binding other) {
      if (other == null) {
        return;
      }
      if (other.binder_ != null) {
        if (binder_ == null) {
          Binder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType();
        }
        Binder.MergeFrom(other.Binder);
      }
      if (other.bound_ != null) {
        if (bound_ == null) {
          Bound = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Bound.MergeFrom(other.Bound);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (binder_ == null) {
              Binder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType();
            }
            input.ReadMessage(Binder);
            break;
          }
          case 18: {
            if (bound_ == null) {
              Bound = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Bound);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Kinds
  /// </summary>
  public sealed partial class Kind : pb::IMessage<Kind> {
    private static readonly pb::MessageParser<Kind> _parser = new pb::MessageParser<Kind>(() => new Kind());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kind(Kind other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Star:
          Star = other.Star.Clone();
          break;
        case SumOneofCase.Arrow:
          Arrow = other.Arrow.Clone();
          break;
        case SumOneofCase.Nat:
          Nat = other.Nat.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kind Clone() {
      return new Kind(this);
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 1;
    /// <summary>
    /// Kind of monomorphic type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit Star {
      get { return sumCase_ == SumOneofCase.Star ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Star;
      }
    }

    /// <summary>Field number for the "arrow" field.</summary>
    public const int ArrowFieldNumber = 2;
    /// <summary>
    /// Kind of polymorphic type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind.Types.Arrow Arrow {
      get { return sumCase_ == SumOneofCase.Arrow ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind.Types.Arrow) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Arrow;
      }
    }

    /// <summary>Field number for the "nat" field.</summary>
    public const int NatFieldNumber = 3;
    /// <summary>
    /// kind of TNat type;
    /// *Available in versions >= 1.7*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit Nat {
      get { return sumCase_ == SumOneofCase.Nat ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Nat;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Star = 1,
      Arrow = 2,
      Nat = 3,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Star, other.Star)) return false;
      if (!object.Equals(Arrow, other.Arrow)) return false;
      if (!object.Equals(Nat, other.Nat)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Star) hash ^= Star.GetHashCode();
      if (sumCase_ == SumOneofCase.Arrow) hash ^= Arrow.GetHashCode();
      if (sumCase_ == SumOneofCase.Nat) hash ^= Nat.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Star) {
        output.WriteRawTag(10);
        output.WriteMessage(Star);
      }
      if (sumCase_ == SumOneofCase.Arrow) {
        output.WriteRawTag(18);
        output.WriteMessage(Arrow);
      }
      if (sumCase_ == SumOneofCase.Nat) {
        output.WriteRawTag(26);
        output.WriteMessage(Nat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Star) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Star);
      }
      if (sumCase_ == SumOneofCase.Arrow) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arrow);
      }
      if (sumCase_ == SumOneofCase.Nat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kind other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Star:
          if (Star == null) {
            Star = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
          }
          Star.MergeFrom(other.Star);
          break;
        case SumOneofCase.Arrow:
          if (Arrow == null) {
            Arrow = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind.Types.Arrow();
          }
          Arrow.MergeFrom(other.Arrow);
          break;
        case SumOneofCase.Nat:
          if (Nat == null) {
            Nat = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
          }
          Nat.MergeFrom(other.Nat);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.Star) {
              subBuilder.MergeFrom(Star);
            }
            input.ReadMessage(subBuilder);
            Star = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind.Types.Arrow subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind.Types.Arrow();
            if (sumCase_ == SumOneofCase.Arrow) {
              subBuilder.MergeFrom(Arrow);
            }
            input.ReadMessage(subBuilder);
            Arrow = subBuilder;
            break;
          }
          case 26: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.Nat) {
              subBuilder.MergeFrom(Nat);
            }
            input.ReadMessage(subBuilder);
            Nat = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Kind message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The kind of polimorphic type.
      /// </summary>
      public sealed partial class Arrow : pb::IMessage<Arrow> {
        private static readonly pb::MessageParser<Arrow> _parser = new pb::MessageParser<Arrow>(() => new Arrow());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Arrow> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Arrow() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Arrow(Arrow other) : this() {
          params_ = other.params_.Clone();
          result_ = other.result_ != null ? other.result_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Arrow Clone() {
          return new Arrow(this);
        }

        /// <summary>Field number for the "params" field.</summary>
        public const int ParamsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind> _repeated_params_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind> params_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind>();
        /// <summary>
        /// parameter of the kind
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind> Params {
          get { return params_; }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind result_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind Result {
          get { return result_; }
          set {
            result_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Arrow);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Arrow other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!params_.Equals(other.params_)) return false;
          if (!object.Equals(Result, other.Result)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= params_.GetHashCode();
          if (result_ != null) hash ^= Result.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          params_.WriteTo(output, _repeated_params_codec);
          if (result_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Result);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += params_.CalculateSize(_repeated_params_codec);
          if (result_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Arrow other) {
          if (other == null) {
            return;
          }
          params_.Add(other.params_);
          if (other.result_ != null) {
            if (result_ == null) {
              Result = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind();
            }
            Result.MergeFrom(other.Result);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                params_.AddEntriesFrom(input, _repeated_params_codec);
                break;
              }
              case 18: {
                if (result_ == null) {
                  Result = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Kind();
                }
                input.ReadMessage(Result);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Types
  /// </summary>
  public sealed partial class Type : pb::IMessage<Type> {
    private static readonly pb::MessageParser<Type> _parser = new pb::MessageParser<Type>(() => new Type());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Type> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type(Type other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Var:
          Var = other.Var.Clone();
          break;
        case SumOneofCase.Con:
          Con = other.Con.Clone();
          break;
        case SumOneofCase.Prim:
          Prim = other.Prim.Clone();
          break;
        case SumOneofCase.Fun:
          Fun = other.Fun.Clone();
          break;
        case SumOneofCase.Forall:
          Forall = other.Forall.Clone();
          break;
        case SumOneofCase.Tuple:
          Tuple = other.Tuple.Clone();
          break;
        case SumOneofCase.Nat:
          Nat = other.Nat;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type Clone() {
      return new Type(this);
    }

    /// <summary>Field number for the "var" field.</summary>
    public const int VarFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Var Var {
      get { return sumCase_ == SumOneofCase.Var ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Var) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Var;
      }
    }

    /// <summary>Field number for the "con" field.</summary>
    public const int ConFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con Con {
      get { return sumCase_ == SumOneofCase.Con ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Con;
      }
    }

    /// <summary>Field number for the "prim" field.</summary>
    public const int PrimFieldNumber = 3;
    /// <summary>
    /// FixMe: renamed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Prim Prim {
      get { return sumCase_ == SumOneofCase.Prim ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Prim) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Prim;
      }
    }

    /// <summary>Field number for the "fun" field.</summary>
    public const int FunFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Fun Fun {
      get { return sumCase_ == SumOneofCase.Fun ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Fun) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Fun;
      }
    }

    /// <summary>Field number for the "forall" field.</summary>
    public const int ForallFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Forall Forall {
      get { return sumCase_ == SumOneofCase.Forall ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Forall) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Forall;
      }
    }

    /// <summary>Field number for the "tuple" field.</summary>
    public const int TupleFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Tuple Tuple {
      get { return sumCase_ == SumOneofCase.Tuple ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Tuple) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Tuple;
      }
    }

    /// <summary>Field number for the "nat" field.</summary>
    public const int NatFieldNumber = 11;
    /// <summary>
    /// *Available in versions >= 1.7*
    /// *Must be between 0 and 37 (bounds inclusive)*
    /// use standard signed long for future usage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Nat {
      get { return sumCase_ == SumOneofCase.Nat ? (long) sum_ : 0L; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.Nat;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Var = 1,
      Con = 2,
      Prim = 3,
      Fun = 4,
      Forall = 5,
      Tuple = 7,
      Nat = 11,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Type);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Type other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Var, other.Var)) return false;
      if (!object.Equals(Con, other.Con)) return false;
      if (!object.Equals(Prim, other.Prim)) return false;
      if (!object.Equals(Fun, other.Fun)) return false;
      if (!object.Equals(Forall, other.Forall)) return false;
      if (!object.Equals(Tuple, other.Tuple)) return false;
      if (Nat != other.Nat) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Var) hash ^= Var.GetHashCode();
      if (sumCase_ == SumOneofCase.Con) hash ^= Con.GetHashCode();
      if (sumCase_ == SumOneofCase.Prim) hash ^= Prim.GetHashCode();
      if (sumCase_ == SumOneofCase.Fun) hash ^= Fun.GetHashCode();
      if (sumCase_ == SumOneofCase.Forall) hash ^= Forall.GetHashCode();
      if (sumCase_ == SumOneofCase.Tuple) hash ^= Tuple.GetHashCode();
      if (sumCase_ == SumOneofCase.Nat) hash ^= Nat.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Var) {
        output.WriteRawTag(10);
        output.WriteMessage(Var);
      }
      if (sumCase_ == SumOneofCase.Con) {
        output.WriteRawTag(18);
        output.WriteMessage(Con);
      }
      if (sumCase_ == SumOneofCase.Prim) {
        output.WriteRawTag(26);
        output.WriteMessage(Prim);
      }
      if (sumCase_ == SumOneofCase.Fun) {
        output.WriteRawTag(34);
        output.WriteMessage(Fun);
      }
      if (sumCase_ == SumOneofCase.Forall) {
        output.WriteRawTag(42);
        output.WriteMessage(Forall);
      }
      if (sumCase_ == SumOneofCase.Tuple) {
        output.WriteRawTag(58);
        output.WriteMessage(Tuple);
      }
      if (sumCase_ == SumOneofCase.Nat) {
        output.WriteRawTag(88);
        output.WriteSInt64(Nat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Var) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Var);
      }
      if (sumCase_ == SumOneofCase.Con) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Con);
      }
      if (sumCase_ == SumOneofCase.Prim) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prim);
      }
      if (sumCase_ == SumOneofCase.Fun) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fun);
      }
      if (sumCase_ == SumOneofCase.Forall) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forall);
      }
      if (sumCase_ == SumOneofCase.Tuple) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tuple);
      }
      if (sumCase_ == SumOneofCase.Nat) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Nat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Type other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Var:
          if (Var == null) {
            Var = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Var();
          }
          Var.MergeFrom(other.Var);
          break;
        case SumOneofCase.Con:
          if (Con == null) {
            Con = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
          }
          Con.MergeFrom(other.Con);
          break;
        case SumOneofCase.Prim:
          if (Prim == null) {
            Prim = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Prim();
          }
          Prim.MergeFrom(other.Prim);
          break;
        case SumOneofCase.Fun:
          if (Fun == null) {
            Fun = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Fun();
          }
          Fun.MergeFrom(other.Fun);
          break;
        case SumOneofCase.Forall:
          if (Forall == null) {
            Forall = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Forall();
          }
          Forall.MergeFrom(other.Forall);
          break;
        case SumOneofCase.Tuple:
          if (Tuple == null) {
            Tuple = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Tuple();
          }
          Tuple.MergeFrom(other.Tuple);
          break;
        case SumOneofCase.Nat:
          Nat = other.Nat;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Var subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Var();
            if (sumCase_ == SumOneofCase.Var) {
              subBuilder.MergeFrom(Var);
            }
            input.ReadMessage(subBuilder);
            Var = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
            if (sumCase_ == SumOneofCase.Con) {
              subBuilder.MergeFrom(Con);
            }
            input.ReadMessage(subBuilder);
            Con = subBuilder;
            break;
          }
          case 26: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Prim subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Prim();
            if (sumCase_ == SumOneofCase.Prim) {
              subBuilder.MergeFrom(Prim);
            }
            input.ReadMessage(subBuilder);
            Prim = subBuilder;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Fun subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Fun();
            if (sumCase_ == SumOneofCase.Fun) {
              subBuilder.MergeFrom(Fun);
            }
            input.ReadMessage(subBuilder);
            Fun = subBuilder;
            break;
          }
          case 42: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Forall subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Forall();
            if (sumCase_ == SumOneofCase.Forall) {
              subBuilder.MergeFrom(Forall);
            }
            input.ReadMessage(subBuilder);
            Forall = subBuilder;
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Tuple subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Tuple();
            if (sumCase_ == SumOneofCase.Tuple) {
              subBuilder.MergeFrom(Tuple);
            }
            input.ReadMessage(subBuilder);
            Tuple = subBuilder;
            break;
          }
          case 88: {
            Nat = input.ReadSInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Type message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Possibly applied type variable 'TyVar'
      /// </summary>
      public sealed partial class Var : pb::IMessage<Var> {
        private static readonly pb::MessageParser<Var> _parser = new pb::MessageParser<Var>(() => new Var());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Var> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var(Var other) : this() {
          args_ = other.args_.Clone();
          switch (other.VarCase) {
            case VarOneofCase.VarStr:
              VarStr = other.VarStr;
              break;
            case VarOneofCase.VarInternedStr:
              VarInternedStr = other.VarInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var Clone() {
          return new Var(this);
        }

        /// <summary>Field number for the "var_str" field.</summary>
        public const int VarStrFieldNumber = 1;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VarStr {
          get { return varCase_ == VarOneofCase.VarStr ? (string) var_ : ""; }
          set {
            var_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            varCase_ = VarOneofCase.VarStr;
          }
        }

        /// <summary>Field number for the "var_interned_str" field.</summary>
        public const int VarInternedStrFieldNumber = 3;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VarInternedStr {
          get { return varCase_ == VarOneofCase.VarInternedStr ? (int) var_ : 0; }
          set {
            var_ = value;
            varCase_ = VarOneofCase.VarInternedStr;
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> _repeated_args_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> args_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type>();
        /// <summary>
        /// Types to which the variable is applied
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> Args {
          get { return args_; }
        }

        private object var_;
        /// <summary>Enum of possible cases for the "var" oneof.</summary>
        public enum VarOneofCase {
          None = 0,
          VarStr = 1,
          VarInternedStr = 3,
        }
        private VarOneofCase varCase_ = VarOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VarOneofCase VarCase {
          get { return varCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVar() {
          varCase_ = VarOneofCase.None;
          var_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Var);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Var other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (VarStr != other.VarStr) return false;
          if (VarInternedStr != other.VarInternedStr) return false;
          if(!args_.Equals(other.args_)) return false;
          if (VarCase != other.VarCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (varCase_ == VarOneofCase.VarStr) hash ^= VarStr.GetHashCode();
          if (varCase_ == VarOneofCase.VarInternedStr) hash ^= VarInternedStr.GetHashCode();
          hash ^= args_.GetHashCode();
          hash ^= (int) varCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (varCase_ == VarOneofCase.VarStr) {
            output.WriteRawTag(10);
            output.WriteString(VarStr);
          }
          args_.WriteTo(output, _repeated_args_codec);
          if (varCase_ == VarOneofCase.VarInternedStr) {
            output.WriteRawTag(24);
            output.WriteInt32(VarInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (varCase_ == VarOneofCase.VarStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VarStr);
          }
          if (varCase_ == VarOneofCase.VarInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarInternedStr);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Var other) {
          if (other == null) {
            return;
          }
          args_.Add(other.args_);
          switch (other.VarCase) {
            case VarOneofCase.VarStr:
              VarStr = other.VarStr;
              break;
            case VarOneofCase.VarInternedStr:
              VarInternedStr = other.VarInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                VarStr = input.ReadString();
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
              case 24: {
                VarInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Possibly applied type constructor 'TyCon'
      /// </summary>
      public sealed partial class Con : pb::IMessage<Con> {
        private static readonly pb::MessageParser<Con> _parser = new pb::MessageParser<Con>(() => new Con());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Con> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Con() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Con(Con other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          args_ = other.args_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Con Clone() {
          return new Con(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName tycon_;
        /// <summary>
        /// Name of the type constructor name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> _repeated_args_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> args_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type>();
        /// <summary>
        /// Type to which the constructor name is applied.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> Args {
          get { return args_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Con);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Con other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if(!args_.Equals(other.args_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          hash ^= args_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          args_.WriteTo(output, _repeated_args_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Con other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          args_.Add(other.args_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Possibly applied builtin types
      /// </summary>
      public sealed partial class Prim : pb::IMessage<Prim> {
        private static readonly pb::MessageParser<Prim> _parser = new pb::MessageParser<Prim>(() => new Prim());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Prim> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prim() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prim(Prim other) : this() {
          prim_ = other.prim_;
          args_ = other.args_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prim Clone() {
          return new Prim(this);
        }

        /// <summary>Field number for the "prim" field.</summary>
        public const int Prim_FieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimType prim_ = 0;
        /// <summary>
        /// Builtin type
        /// FixMe: Rename
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimType Prim_ {
          get { return prim_; }
          set {
            prim_ = value;
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> _repeated_args_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> args_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type>();
        /// <summary>
        /// Types to which the builtin type is applied.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> Args {
          get { return args_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Prim);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Prim other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Prim_ != other.Prim_) return false;
          if(!args_.Equals(other.args_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Prim_ != 0) hash ^= Prim_.GetHashCode();
          hash ^= args_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Prim_ != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Prim_);
          }
          args_.WriteTo(output, _repeated_args_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Prim_ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Prim_);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Prim other) {
          if (other == null) {
            return;
          }
          if (other.Prim_ != 0) {
            Prim_ = other.Prim_;
          }
          args_.Add(other.args_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Prim_ = (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimType) input.ReadEnum();
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// n-ary function type
      /// *Available in versions &lt; 1.2*
      /// </summary>
      public sealed partial class Fun : pb::IMessage<Fun> {
        private static readonly pb::MessageParser<Fun> _parser = new pb::MessageParser<Fun>(() => new Fun());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Fun> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fun() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fun(Fun other) : this() {
          params_ = other.params_.Clone();
          result_ = other.result_ != null ? other.result_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fun Clone() {
          return new Fun(this);
        }

        /// <summary>Field number for the "params" field.</summary>
        public const int ParamsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> _repeated_params_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> params_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type>();
        /// <summary>
        /// type of the arguments
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> Params {
          get { return params_; }
        }

        /// <summary>Field number for the "result" field.</summary>
        public const int ResultFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type result_;
        /// <summary>
        /// type of the result
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Result {
          get { return result_; }
          set {
            result_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Fun);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Fun other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!params_.Equals(other.params_)) return false;
          if (!object.Equals(Result, other.Result)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= params_.GetHashCode();
          if (result_ != null) hash ^= Result.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          params_.WriteTo(output, _repeated_params_codec);
          if (result_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Result);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += params_.CalculateSize(_repeated_params_codec);
          if (result_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Fun other) {
          if (other == null) {
            return;
          }
          params_.Add(other.params_);
          if (other.result_ != null) {
            if (result_ == null) {
              Result = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Result.MergeFrom(other.Result);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                params_.AddEntriesFrom(input, _repeated_params_codec);
                break;
              }
              case 18: {
                if (result_ == null) {
                  Result = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Result);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Universal quantification 'TyForAll'
      /// </summary>
      public sealed partial class Forall : pb::IMessage<Forall> {
        private static readonly pb::MessageParser<Forall> _parser = new pb::MessageParser<Forall>(() => new Forall());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Forall> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Forall() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Forall(Forall other) : this() {
          vars_ = other.vars_.Clone();
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Forall Clone() {
          return new Forall(this);
        }

        /// <summary>Field number for the "vars" field.</summary>
        public const int VarsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind> _repeated_vars_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind> vars_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind>();
        /// <summary>
        /// binders of the quantification
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind> Vars {
          get { return vars_; }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type body_;
        /// <summary>
        /// Body of the quantification
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Forall);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Forall other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!vars_.Equals(other.vars_)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= vars_.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          vars_.WriteTo(output, _repeated_vars_codec);
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += vars_.CalculateSize(_repeated_vars_codec);
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Forall other) {
          if (other == null) {
            return;
          }
          vars_.Add(other.vars_);
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                vars_.AddEntriesFrom(input, _repeated_vars_codec);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Tuple type
      /// </summary>
      public sealed partial class Tuple : pb::IMessage<Tuple> {
        private static readonly pb::MessageParser<Tuple> _parser = new pb::MessageParser<Tuple>(() => new Tuple());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tuple> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple(Tuple other) : this() {
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple Clone() {
          return new Tuple(this);
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType> fields_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType>();
        /// <summary>
        /// name of the field with their types.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tuple);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tuple other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tuple other) {
          if (other == null) {
            return;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Builtin literals
  /// FixMe: Renamed
  /// </summary>
  public sealed partial class PrimLit : pb::IMessage<PrimLit> {
    private static readonly pb::MessageParser<PrimLit> _parser = new pb::MessageParser<PrimLit>(() => new PrimLit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimLit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimLit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimLit(PrimLit other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Int64:
          Int64 = other.Int64;
          break;
        case SumOneofCase.DecimalStr:
          DecimalStr = other.DecimalStr;
          break;
        case SumOneofCase.NumericInternedStr:
          NumericInternedStr = other.NumericInternedStr;
          break;
        case SumOneofCase.TextStr:
          TextStr = other.TextStr;
          break;
        case SumOneofCase.TextInternedStr:
          TextInternedStr = other.TextInternedStr;
          break;
        case SumOneofCase.Timestamp:
          Timestamp = other.Timestamp;
          break;
        case SumOneofCase.PartyStr:
          PartyStr = other.PartyStr;
          break;
        case SumOneofCase.PartyInternedStr:
          PartyInternedStr = other.PartyInternedStr;
          break;
        case SumOneofCase.Date:
          Date = other.Date;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimLit Clone() {
      return new PrimLit(this);
    }

    /// <summary>Field number for the "int64" field.</summary>
    public const int Int64FieldNumber = 1;
    /// <summary>
    ///  64-bit integer literal ('LitInt64')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64 {
      get { return sumCase_ == SumOneofCase.Int64 ? (long) sum_ : 0L; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.Int64;
      }
    }

    /// <summary>Field number for the "decimal_str" field.</summary>
    public const int DecimalStrFieldNumber = 2;
    /// <summary>
    /// *Must be a valid representation of decimal*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DecimalStr {
      get { return sumCase_ == SumOneofCase.DecimalStr ? (string) sum_ : ""; }
      set {
        sum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sumCase_ = SumOneofCase.DecimalStr;
      }
    }

    /// <summary>Field number for the "numeric_interned_str" field.</summary>
    public const int NumericInternedStrFieldNumber = 10;
    /// <summary>
    /// *Must be a valid interned numeric */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumericInternedStr {
      get { return sumCase_ == SumOneofCase.NumericInternedStr ? (int) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.NumericInternedStr;
      }
    }

    /// <summary>Field number for the "text_str" field.</summary>
    public const int TextStrFieldNumber = 4;
    /// <summary>
    /// *Available in version &lt; 1.7*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextStr {
      get { return sumCase_ == SumOneofCase.TextStr ? (string) sum_ : ""; }
      set {
        sum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sumCase_ = SumOneofCase.TextStr;
      }
    }

    /// <summary>Field number for the "text_interned_str" field.</summary>
    public const int TextInternedStrFieldNumber = 11;
    /// <summary>
    /// *Must be a valid interned text*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TextInternedStr {
      get { return sumCase_ == SumOneofCase.TextInternedStr ? (int) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.TextInternedStr;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    /// <summary>
    /// *Must be a valid timestamp*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return sumCase_ == SumOneofCase.Timestamp ? (long) sum_ : 0L; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.Timestamp;
      }
    }

    /// <summary>Field number for the "party_str" field.</summary>
    public const int PartyStrFieldNumber = 7;
    /// <summary>
    /// *Must be a valid PartyId string*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartyStr {
      get { return sumCase_ == SumOneofCase.PartyStr ? (string) sum_ : ""; }
      set {
        sum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sumCase_ = SumOneofCase.PartyStr;
      }
    }

    /// <summary>Field number for the "party_interned_str" field.</summary>
    public const int PartyInternedStrFieldNumber = 12;
    /// <summary>
    /// *Must be a valid interned PartyId string*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PartyInternedStr {
      get { return sumCase_ == SumOneofCase.PartyInternedStr ? (int) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.PartyInternedStr;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 8;
    /// <summary>
    /// *Must be a valid date*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Date {
      get { return sumCase_ == SumOneofCase.Date ? (int) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.Date;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Int64 = 1,
      DecimalStr = 2,
      NumericInternedStr = 10,
      TextStr = 4,
      TextInternedStr = 11,
      Timestamp = 5,
      PartyStr = 7,
      PartyInternedStr = 12,
      Date = 8,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimLit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimLit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Int64 != other.Int64) return false;
      if (DecimalStr != other.DecimalStr) return false;
      if (NumericInternedStr != other.NumericInternedStr) return false;
      if (TextStr != other.TextStr) return false;
      if (TextInternedStr != other.TextInternedStr) return false;
      if (Timestamp != other.Timestamp) return false;
      if (PartyStr != other.PartyStr) return false;
      if (PartyInternedStr != other.PartyInternedStr) return false;
      if (Date != other.Date) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Int64) hash ^= Int64.GetHashCode();
      if (sumCase_ == SumOneofCase.DecimalStr) hash ^= DecimalStr.GetHashCode();
      if (sumCase_ == SumOneofCase.NumericInternedStr) hash ^= NumericInternedStr.GetHashCode();
      if (sumCase_ == SumOneofCase.TextStr) hash ^= TextStr.GetHashCode();
      if (sumCase_ == SumOneofCase.TextInternedStr) hash ^= TextInternedStr.GetHashCode();
      if (sumCase_ == SumOneofCase.Timestamp) hash ^= Timestamp.GetHashCode();
      if (sumCase_ == SumOneofCase.PartyStr) hash ^= PartyStr.GetHashCode();
      if (sumCase_ == SumOneofCase.PartyInternedStr) hash ^= PartyInternedStr.GetHashCode();
      if (sumCase_ == SumOneofCase.Date) hash ^= Date.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Int64) {
        output.WriteRawTag(8);
        output.WriteSInt64(Int64);
      }
      if (sumCase_ == SumOneofCase.DecimalStr) {
        output.WriteRawTag(18);
        output.WriteString(DecimalStr);
      }
      if (sumCase_ == SumOneofCase.TextStr) {
        output.WriteRawTag(34);
        output.WriteString(TextStr);
      }
      if (sumCase_ == SumOneofCase.Timestamp) {
        output.WriteRawTag(41);
        output.WriteSFixed64(Timestamp);
      }
      if (sumCase_ == SumOneofCase.PartyStr) {
        output.WriteRawTag(58);
        output.WriteString(PartyStr);
      }
      if (sumCase_ == SumOneofCase.Date) {
        output.WriteRawTag(64);
        output.WriteInt32(Date);
      }
      if (sumCase_ == SumOneofCase.NumericInternedStr) {
        output.WriteRawTag(80);
        output.WriteInt32(NumericInternedStr);
      }
      if (sumCase_ == SumOneofCase.TextInternedStr) {
        output.WriteRawTag(88);
        output.WriteInt32(TextInternedStr);
      }
      if (sumCase_ == SumOneofCase.PartyInternedStr) {
        output.WriteRawTag(96);
        output.WriteInt32(PartyInternedStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Int64) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Int64);
      }
      if (sumCase_ == SumOneofCase.DecimalStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DecimalStr);
      }
      if (sumCase_ == SumOneofCase.NumericInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumericInternedStr);
      }
      if (sumCase_ == SumOneofCase.TextStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextStr);
      }
      if (sumCase_ == SumOneofCase.TextInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TextInternedStr);
      }
      if (sumCase_ == SumOneofCase.Timestamp) {
        size += 1 + 8;
      }
      if (sumCase_ == SumOneofCase.PartyStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartyStr);
      }
      if (sumCase_ == SumOneofCase.PartyInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartyInternedStr);
      }
      if (sumCase_ == SumOneofCase.Date) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Date);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimLit other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Int64:
          Int64 = other.Int64;
          break;
        case SumOneofCase.DecimalStr:
          DecimalStr = other.DecimalStr;
          break;
        case SumOneofCase.NumericInternedStr:
          NumericInternedStr = other.NumericInternedStr;
          break;
        case SumOneofCase.TextStr:
          TextStr = other.TextStr;
          break;
        case SumOneofCase.TextInternedStr:
          TextInternedStr = other.TextInternedStr;
          break;
        case SumOneofCase.Timestamp:
          Timestamp = other.Timestamp;
          break;
        case SumOneofCase.PartyStr:
          PartyStr = other.PartyStr;
          break;
        case SumOneofCase.PartyInternedStr:
          PartyInternedStr = other.PartyInternedStr;
          break;
        case SumOneofCase.Date:
          Date = other.Date;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Int64 = input.ReadSInt64();
            break;
          }
          case 18: {
            DecimalStr = input.ReadString();
            break;
          }
          case 34: {
            TextStr = input.ReadString();
            break;
          }
          case 41: {
            Timestamp = input.ReadSFixed64();
            break;
          }
          case 58: {
            PartyStr = input.ReadString();
            break;
          }
          case 64: {
            Date = input.ReadInt32();
            break;
          }
          case 80: {
            NumericInternedStr = input.ReadInt32();
            break;
          }
          case 88: {
            TextInternedStr = input.ReadInt32();
            break;
          }
          case 96: {
            PartyInternedStr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Source code locations
  /// </summary>
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      module_ = other.module_ != null ? other.module_.Clone() : null;
      range_ = other.range_ != null ? other.range_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef module_;
    /// <summary>
    /// (*optional*), if missing the line is within the current module.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef Module {
      get { return module_; }
      set {
        module_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location.Types.Range range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location.Types.Range Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Module, other.Module)) return false;
      if (!object.Equals(Range, other.Range)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (module_ != null) hash ^= Module.GetHashCode();
      if (range_ != null) hash ^= Range.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (module_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Module);
      }
      if (range_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Range);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (module_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Module);
      }
      if (range_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.module_ != null) {
        if (module_ == null) {
          Module = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef();
        }
        Module.MergeFrom(other.Module);
      }
      if (other.range_ != null) {
        if (range_ == null) {
          Range = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location.Types.Range();
        }
        Range.MergeFrom(other.Range);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (module_ == null) {
              Module = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ModuleRef();
            }
            input.ReadMessage(Module);
            break;
          }
          case 18: {
            if (range_ == null) {
              Range = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location.Types.Range();
            }
            input.ReadMessage(Range);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Location message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 0-indexed start and end line and column numbers.
      /// </summary>
      public sealed partial class Range : pb::IMessage<Range> {
        private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Range> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range(Range other) : this() {
          startLine_ = other.startLine_;
          startCol_ = other.startCol_;
          endLine_ = other.endLine_;
          endCol_ = other.endCol_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range Clone() {
          return new Range(this);
        }

        /// <summary>Field number for the "start_line" field.</summary>
        public const int StartLineFieldNumber = 1;
        private int startLine_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int StartLine {
          get { return startLine_; }
          set {
            startLine_ = value;
          }
        }

        /// <summary>Field number for the "start_col" field.</summary>
        public const int StartColFieldNumber = 2;
        private int startCol_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int StartCol {
          get { return startCol_; }
          set {
            startCol_ = value;
          }
        }

        /// <summary>Field number for the "end_line" field.</summary>
        public const int EndLineFieldNumber = 3;
        private int endLine_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EndLine {
          get { return endLine_; }
          set {
            endLine_ = value;
          }
        }

        /// <summary>Field number for the "end_col" field.</summary>
        public const int EndColFieldNumber = 4;
        private int endCol_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EndCol {
          get { return endCol_; }
          set {
            endCol_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Range);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Range other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StartLine != other.StartLine) return false;
          if (StartCol != other.StartCol) return false;
          if (EndLine != other.EndLine) return false;
          if (EndCol != other.EndCol) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StartLine != 0) hash ^= StartLine.GetHashCode();
          if (StartCol != 0) hash ^= StartCol.GetHashCode();
          if (EndLine != 0) hash ^= EndLine.GetHashCode();
          if (EndCol != 0) hash ^= EndCol.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StartLine != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(StartLine);
          }
          if (StartCol != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(StartCol);
          }
          if (EndLine != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(EndLine);
          }
          if (EndCol != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(EndCol);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StartLine != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartLine);
          }
          if (StartCol != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartCol);
          }
          if (EndLine != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndLine);
          }
          if (EndCol != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndCol);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Range other) {
          if (other == null) {
            return;
          }
          if (other.StartLine != 0) {
            StartLine = other.StartLine;
          }
          if (other.StartCol != 0) {
            StartCol = other.StartCol;
          }
          if (other.EndLine != 0) {
            EndLine = other.EndLine;
          }
          if (other.EndCol != 0) {
            EndCol = other.EndCol;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                StartLine = input.ReadInt32();
                break;
              }
              case 16: {
                StartCol = input.ReadInt32();
                break;
              }
              case 24: {
                EndLine = input.ReadInt32();
                break;
              }
              case 32: {
                EndCol = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Expressions
  /// </summary>
  public sealed partial class Expr : pb::IMessage<Expr> {
    private static readonly pb::MessageParser<Expr> _parser = new pb::MessageParser<Expr>(() => new Expr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Expr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expr(Expr other) : this() {
      location_ = other.location_ != null ? other.location_.Clone() : null;
      switch (other.SumCase) {
        case SumOneofCase.VarStr:
          VarStr = other.VarStr;
          break;
        case SumOneofCase.VarInternedStr:
          VarInternedStr = other.VarInternedStr;
          break;
        case SumOneofCase.Val:
          Val = other.Val.Clone();
          break;
        case SumOneofCase.Builtin:
          Builtin = other.Builtin;
          break;
        case SumOneofCase.PrimCon:
          PrimCon = other.PrimCon;
          break;
        case SumOneofCase.PrimLit:
          PrimLit = other.PrimLit.Clone();
          break;
        case SumOneofCase.RecCon:
          RecCon = other.RecCon.Clone();
          break;
        case SumOneofCase.RecProj:
          RecProj = other.RecProj.Clone();
          break;
        case SumOneofCase.RecUpd:
          RecUpd = other.RecUpd.Clone();
          break;
        case SumOneofCase.VariantCon:
          VariantCon = other.VariantCon.Clone();
          break;
        case SumOneofCase.EnumCon:
          EnumCon = other.EnumCon.Clone();
          break;
        case SumOneofCase.TupleCon:
          TupleCon = other.TupleCon.Clone();
          break;
        case SumOneofCase.TupleProj:
          TupleProj = other.TupleProj.Clone();
          break;
        case SumOneofCase.TupleUpd:
          TupleUpd = other.TupleUpd.Clone();
          break;
        case SumOneofCase.App:
          App = other.App.Clone();
          break;
        case SumOneofCase.TyApp:
          TyApp = other.TyApp.Clone();
          break;
        case SumOneofCase.Abs:
          Abs = other.Abs.Clone();
          break;
        case SumOneofCase.TyAbs:
          TyAbs = other.TyAbs.Clone();
          break;
        case SumOneofCase.Case:
          Case = other.Case.Clone();
          break;
        case SumOneofCase.Let:
          Let = other.Let.Clone();
          break;
        case SumOneofCase.Nil:
          Nil = other.Nil.Clone();
          break;
        case SumOneofCase.Cons:
          Cons = other.Cons.Clone();
          break;
        case SumOneofCase.Update:
          Update = other.Update.Clone();
          break;
        case SumOneofCase.Scenario:
          Scenario = other.Scenario.Clone();
          break;
        case SumOneofCase.OptionalNone:
          OptionalNone = other.OptionalNone.Clone();
          break;
        case SumOneofCase.OptionalSome:
          OptionalSome = other.OptionalSome.Clone();
          break;
        case SumOneofCase.ToAny:
          ToAny = other.ToAny.Clone();
          break;
        case SumOneofCase.FromAny:
          FromAny = other.FromAny.Clone();
          break;
        case SumOneofCase.TypeRep:
          TypeRep = other.TypeRep.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expr Clone() {
      return new Expr(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 25;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location location_;
    /// <summary>
    /// Location of the expression in the DAML code source.
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "var_str" field.</summary>
    public const int VarStrFieldNumber = 1;
    /// <summary>
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VarStr {
      get { return sumCase_ == SumOneofCase.VarStr ? (string) sum_ : ""; }
      set {
        sum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sumCase_ = SumOneofCase.VarStr;
      }
    }

    /// <summary>Field number for the "var_interned_str" field.</summary>
    public const int VarInternedStrFieldNumber = 29;
    /// <summary>
    /// *Must be a valid interned identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VarInternedStr {
      get { return sumCase_ == SumOneofCase.VarInternedStr ? (int) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.VarInternedStr;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 2;
    /// <summary>
    /// Defined value ('ExpVal')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ValName Val {
      get { return sumCase_ == SumOneofCase.Val ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ValName) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Val;
      }
    }

    /// <summary>Field number for the "builtin" field.</summary>
    public const int BuiltinFieldNumber = 3;
    /// <summary>
    /// Builtin function ('ExpBuiltin')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.BuiltinFunction Builtin {
      get { return sumCase_ == SumOneofCase.Builtin ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.BuiltinFunction) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.Builtin;
      }
    }

    /// <summary>Field number for the "prim_con" field.</summary>
    public const int PrimConFieldNumber = 4;
    /// <summary>
    /// Primitive constructor ('()', 'False' or 'True')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimCon PrimCon {
      get { return sumCase_ == SumOneofCase.PrimCon ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimCon) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.PrimCon;
      }
    }

    /// <summary>Field number for the "prim_lit" field.</summary>
    public const int PrimLitFieldNumber = 5;
    /// <summary>
    /// Builtin literal ('ExpBuiltin')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimLit PrimLit {
      get { return sumCase_ == SumOneofCase.PrimLit ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimLit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.PrimLit;
      }
    }

    /// <summary>Field number for the "rec_con" field.</summary>
    public const int RecConFieldNumber = 6;
    /// <summary>
    /// Record construction ('ExpRecCon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecCon RecCon {
      get { return sumCase_ == SumOneofCase.RecCon ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecCon) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.RecCon;
      }
    }

    /// <summary>Field number for the "rec_proj" field.</summary>
    public const int RecProjFieldNumber = 7;
    /// <summary>
    /// Record projection ('ExpRecProj')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecProj RecProj {
      get { return sumCase_ == SumOneofCase.RecProj ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecProj) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.RecProj;
      }
    }

    /// <summary>Field number for the "rec_upd" field.</summary>
    public const int RecUpdFieldNumber = 22;
    /// <summary>
    /// Record udpate ('ExpRecUpdate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecUpd RecUpd {
      get { return sumCase_ == SumOneofCase.RecUpd ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecUpd) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.RecUpd;
      }
    }

    /// <summary>Field number for the "variant_con" field.</summary>
    public const int VariantConFieldNumber = 8;
    /// <summary>
    /// Variant construction ('ExpVariantCon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.VariantCon VariantCon {
      get { return sumCase_ == SumOneofCase.VariantCon ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.VariantCon) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.VariantCon;
      }
    }

    /// <summary>Field number for the "enum_con" field.</summary>
    public const int EnumConFieldNumber = 28;
    /// <summary>
    /// Enum construction ('ExpEnumCon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.EnumCon EnumCon {
      get { return sumCase_ == SumOneofCase.EnumCon ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.EnumCon) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.EnumCon;
      }
    }

    /// <summary>Field number for the "tuple_con" field.</summary>
    public const int TupleConFieldNumber = 9;
    /// <summary>
    /// Tuple construction ('ExpTupleCon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleCon TupleCon {
      get { return sumCase_ == SumOneofCase.TupleCon ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleCon) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TupleCon;
      }
    }

    /// <summary>Field number for the "tuple_proj" field.</summary>
    public const int TupleProjFieldNumber = 10;
    /// <summary>
    /// Tuple project ('ExpTupleProj')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleProj TupleProj {
      get { return sumCase_ == SumOneofCase.TupleProj ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleProj) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TupleProj;
      }
    }

    /// <summary>Field number for the "tuple_upd" field.</summary>
    public const int TupleUpdFieldNumber = 23;
    /// <summary>
    /// Tuple update ('ExpTupleUpdate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleUpd TupleUpd {
      get { return sumCase_ == SumOneofCase.TupleUpd ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleUpd) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TupleUpd;
      }
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 11;
    /// <summary>
    /// Application ('ExpApp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.App App {
      get { return sumCase_ == SumOneofCase.App ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.App) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.App;
      }
    }

    /// <summary>Field number for the "ty_app" field.</summary>
    public const int TyAppFieldNumber = 12;
    /// <summary>
    /// Type Application ('ExpTyApp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyApp TyApp {
      get { return sumCase_ == SumOneofCase.TyApp ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyApp) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TyApp;
      }
    }

    /// <summary>Field number for the "abs" field.</summary>
    public const int AbsFieldNumber = 13;
    /// <summary>
    /// Abstraction ('ExpAbs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Abs Abs {
      get { return sumCase_ == SumOneofCase.Abs ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Abs) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Abs;
      }
    }

    /// <summary>Field number for the "ty_abs" field.</summary>
    public const int TyAbsFieldNumber = 14;
    /// <summary>
    /// Type Abstraction ('ExpTyAbs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyAbs TyAbs {
      get { return sumCase_ == SumOneofCase.TyAbs ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyAbs) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TyAbs;
      }
    }

    /// <summary>Field number for the "case" field.</summary>
    public const int CaseFieldNumber = 15;
    /// <summary>
    /// Pattern Matching ('ExpCase')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Case Case {
      get { return sumCase_ == SumOneofCase.Case ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Case) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Case;
      }
    }

    /// <summary>Field number for the "let" field.</summary>
    public const int LetFieldNumber = 16;
    /// <summary>
    /// Let block ('ExpLet')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block Let {
      get { return sumCase_ == SumOneofCase.Let ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Let;
      }
    }

    /// <summary>Field number for the "nil" field.</summary>
    public const int NilFieldNumber = 17;
    /// <summary>
    /// Empty List ('ExpNil')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Nil Nil {
      get { return sumCase_ == SumOneofCase.Nil ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Nil) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Nil;
      }
    }

    /// <summary>Field number for the "cons" field.</summary>
    public const int ConsFieldNumber = 18;
    /// <summary>
    /// Non Empty list ('ExpCons')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Cons Cons {
      get { return sumCase_ == SumOneofCase.Cons ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Cons) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Cons;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 20;
    /// <summary>
    /// Update expression ('ExpUpdate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update Update {
      get { return sumCase_ == SumOneofCase.Update ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Update;
      }
    }

    /// <summary>Field number for the "scenario" field.</summary>
    public const int ScenarioFieldNumber = 21;
    /// <summary>
    /// Scenario Expression ('ExpScenario')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario Scenario {
      get { return sumCase_ == SumOneofCase.Scenario ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Scenario;
      }
    }

    /// <summary>Field number for the "optional_none" field.</summary>
    public const int OptionalNoneFieldNumber = 26;
    /// <summary>
    /// empty optional value ('ExpNone')
    /// *Available in versions >= 1.1*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalNone OptionalNone {
      get { return sumCase_ == SumOneofCase.OptionalNone ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalNone) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.OptionalNone;
      }
    }

    /// <summary>Field number for the "optional_some" field.</summary>
    public const int OptionalSomeFieldNumber = 27;
    /// <summary>
    /// non empty optional value ('ExpSome')
    /// *Available in versions >= 1.1*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalSome OptionalSome {
      get { return sumCase_ == SumOneofCase.OptionalSome ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalSome) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.OptionalSome;
      }
    }

    /// <summary>Field number for the "to_any" field.</summary>
    public const int ToAnyFieldNumber = 30;
    /// <summary>
    /// Wrap an arbitrary value in Any ('ExpToAny')
    /// *Available in versions >= 1.7*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.ToAny ToAny {
      get { return sumCase_ == SumOneofCase.ToAny ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.ToAny) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.ToAny;
      }
    }

    /// <summary>Field number for the "from_any" field.</summary>
    public const int FromAnyFieldNumber = 31;
    /// <summary>
    /// Extract the given type from Any or return None on type-mismatch ('ExpFromAny')
    /// *Available in versions >= 1.7*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.FromAny FromAny {
      get { return sumCase_ == SumOneofCase.FromAny ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.FromAny) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.FromAny;
      }
    }

    /// <summary>Field number for the "type_rep" field.</summary>
    public const int TypeRepFieldNumber = 32;
    /// <summary>
    /// A type representation
    /// *Available in versions >= 1.7*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type TypeRep {
      get { return sumCase_ == SumOneofCase.TypeRep ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.TypeRep;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      VarStr = 1,
      VarInternedStr = 29,
      Val = 2,
      Builtin = 3,
      PrimCon = 4,
      PrimLit = 5,
      RecCon = 6,
      RecProj = 7,
      RecUpd = 22,
      VariantCon = 8,
      EnumCon = 28,
      TupleCon = 9,
      TupleProj = 10,
      TupleUpd = 23,
      App = 11,
      TyApp = 12,
      Abs = 13,
      TyAbs = 14,
      Case = 15,
      Let = 16,
      Nil = 17,
      Cons = 18,
      Update = 20,
      Scenario = 21,
      OptionalNone = 26,
      OptionalSome = 27,
      ToAny = 30,
      FromAny = 31,
      TypeRep = 32,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Expr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Expr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (VarStr != other.VarStr) return false;
      if (VarInternedStr != other.VarInternedStr) return false;
      if (!object.Equals(Val, other.Val)) return false;
      if (Builtin != other.Builtin) return false;
      if (PrimCon != other.PrimCon) return false;
      if (!object.Equals(PrimLit, other.PrimLit)) return false;
      if (!object.Equals(RecCon, other.RecCon)) return false;
      if (!object.Equals(RecProj, other.RecProj)) return false;
      if (!object.Equals(RecUpd, other.RecUpd)) return false;
      if (!object.Equals(VariantCon, other.VariantCon)) return false;
      if (!object.Equals(EnumCon, other.EnumCon)) return false;
      if (!object.Equals(TupleCon, other.TupleCon)) return false;
      if (!object.Equals(TupleProj, other.TupleProj)) return false;
      if (!object.Equals(TupleUpd, other.TupleUpd)) return false;
      if (!object.Equals(App, other.App)) return false;
      if (!object.Equals(TyApp, other.TyApp)) return false;
      if (!object.Equals(Abs, other.Abs)) return false;
      if (!object.Equals(TyAbs, other.TyAbs)) return false;
      if (!object.Equals(Case, other.Case)) return false;
      if (!object.Equals(Let, other.Let)) return false;
      if (!object.Equals(Nil, other.Nil)) return false;
      if (!object.Equals(Cons, other.Cons)) return false;
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(Scenario, other.Scenario)) return false;
      if (!object.Equals(OptionalNone, other.OptionalNone)) return false;
      if (!object.Equals(OptionalSome, other.OptionalSome)) return false;
      if (!object.Equals(ToAny, other.ToAny)) return false;
      if (!object.Equals(FromAny, other.FromAny)) return false;
      if (!object.Equals(TypeRep, other.TypeRep)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (sumCase_ == SumOneofCase.VarStr) hash ^= VarStr.GetHashCode();
      if (sumCase_ == SumOneofCase.VarInternedStr) hash ^= VarInternedStr.GetHashCode();
      if (sumCase_ == SumOneofCase.Val) hash ^= Val.GetHashCode();
      if (sumCase_ == SumOneofCase.Builtin) hash ^= Builtin.GetHashCode();
      if (sumCase_ == SumOneofCase.PrimCon) hash ^= PrimCon.GetHashCode();
      if (sumCase_ == SumOneofCase.PrimLit) hash ^= PrimLit.GetHashCode();
      if (sumCase_ == SumOneofCase.RecCon) hash ^= RecCon.GetHashCode();
      if (sumCase_ == SumOneofCase.RecProj) hash ^= RecProj.GetHashCode();
      if (sumCase_ == SumOneofCase.RecUpd) hash ^= RecUpd.GetHashCode();
      if (sumCase_ == SumOneofCase.VariantCon) hash ^= VariantCon.GetHashCode();
      if (sumCase_ == SumOneofCase.EnumCon) hash ^= EnumCon.GetHashCode();
      if (sumCase_ == SumOneofCase.TupleCon) hash ^= TupleCon.GetHashCode();
      if (sumCase_ == SumOneofCase.TupleProj) hash ^= TupleProj.GetHashCode();
      if (sumCase_ == SumOneofCase.TupleUpd) hash ^= TupleUpd.GetHashCode();
      if (sumCase_ == SumOneofCase.App) hash ^= App.GetHashCode();
      if (sumCase_ == SumOneofCase.TyApp) hash ^= TyApp.GetHashCode();
      if (sumCase_ == SumOneofCase.Abs) hash ^= Abs.GetHashCode();
      if (sumCase_ == SumOneofCase.TyAbs) hash ^= TyAbs.GetHashCode();
      if (sumCase_ == SumOneofCase.Case) hash ^= Case.GetHashCode();
      if (sumCase_ == SumOneofCase.Let) hash ^= Let.GetHashCode();
      if (sumCase_ == SumOneofCase.Nil) hash ^= Nil.GetHashCode();
      if (sumCase_ == SumOneofCase.Cons) hash ^= Cons.GetHashCode();
      if (sumCase_ == SumOneofCase.Update) hash ^= Update.GetHashCode();
      if (sumCase_ == SumOneofCase.Scenario) hash ^= Scenario.GetHashCode();
      if (sumCase_ == SumOneofCase.OptionalNone) hash ^= OptionalNone.GetHashCode();
      if (sumCase_ == SumOneofCase.OptionalSome) hash ^= OptionalSome.GetHashCode();
      if (sumCase_ == SumOneofCase.ToAny) hash ^= ToAny.GetHashCode();
      if (sumCase_ == SumOneofCase.FromAny) hash ^= FromAny.GetHashCode();
      if (sumCase_ == SumOneofCase.TypeRep) hash ^= TypeRep.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.VarStr) {
        output.WriteRawTag(10);
        output.WriteString(VarStr);
      }
      if (sumCase_ == SumOneofCase.Val) {
        output.WriteRawTag(18);
        output.WriteMessage(Val);
      }
      if (sumCase_ == SumOneofCase.Builtin) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Builtin);
      }
      if (sumCase_ == SumOneofCase.PrimCon) {
        output.WriteRawTag(32);
        output.WriteEnum((int) PrimCon);
      }
      if (sumCase_ == SumOneofCase.PrimLit) {
        output.WriteRawTag(42);
        output.WriteMessage(PrimLit);
      }
      if (sumCase_ == SumOneofCase.RecCon) {
        output.WriteRawTag(50);
        output.WriteMessage(RecCon);
      }
      if (sumCase_ == SumOneofCase.RecProj) {
        output.WriteRawTag(58);
        output.WriteMessage(RecProj);
      }
      if (sumCase_ == SumOneofCase.VariantCon) {
        output.WriteRawTag(66);
        output.WriteMessage(VariantCon);
      }
      if (sumCase_ == SumOneofCase.TupleCon) {
        output.WriteRawTag(74);
        output.WriteMessage(TupleCon);
      }
      if (sumCase_ == SumOneofCase.TupleProj) {
        output.WriteRawTag(82);
        output.WriteMessage(TupleProj);
      }
      if (sumCase_ == SumOneofCase.App) {
        output.WriteRawTag(90);
        output.WriteMessage(App);
      }
      if (sumCase_ == SumOneofCase.TyApp) {
        output.WriteRawTag(98);
        output.WriteMessage(TyApp);
      }
      if (sumCase_ == SumOneofCase.Abs) {
        output.WriteRawTag(106);
        output.WriteMessage(Abs);
      }
      if (sumCase_ == SumOneofCase.TyAbs) {
        output.WriteRawTag(114);
        output.WriteMessage(TyAbs);
      }
      if (sumCase_ == SumOneofCase.Case) {
        output.WriteRawTag(122);
        output.WriteMessage(Case);
      }
      if (sumCase_ == SumOneofCase.Let) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Let);
      }
      if (sumCase_ == SumOneofCase.Nil) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Nil);
      }
      if (sumCase_ == SumOneofCase.Cons) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Cons);
      }
      if (sumCase_ == SumOneofCase.Update) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Update);
      }
      if (sumCase_ == SumOneofCase.Scenario) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Scenario);
      }
      if (sumCase_ == SumOneofCase.RecUpd) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RecUpd);
      }
      if (sumCase_ == SumOneofCase.TupleUpd) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(TupleUpd);
      }
      if (location_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Location);
      }
      if (sumCase_ == SumOneofCase.OptionalNone) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(OptionalNone);
      }
      if (sumCase_ == SumOneofCase.OptionalSome) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(OptionalSome);
      }
      if (sumCase_ == SumOneofCase.EnumCon) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(EnumCon);
      }
      if (sumCase_ == SumOneofCase.VarInternedStr) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(VarInternedStr);
      }
      if (sumCase_ == SumOneofCase.ToAny) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(ToAny);
      }
      if (sumCase_ == SumOneofCase.FromAny) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(FromAny);
      }
      if (sumCase_ == SumOneofCase.TypeRep) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(TypeRep);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (sumCase_ == SumOneofCase.VarStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VarStr);
      }
      if (sumCase_ == SumOneofCase.VarInternedStr) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VarInternedStr);
      }
      if (sumCase_ == SumOneofCase.Val) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Val);
      }
      if (sumCase_ == SumOneofCase.Builtin) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Builtin);
      }
      if (sumCase_ == SumOneofCase.PrimCon) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrimCon);
      }
      if (sumCase_ == SumOneofCase.PrimLit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimLit);
      }
      if (sumCase_ == SumOneofCase.RecCon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecCon);
      }
      if (sumCase_ == SumOneofCase.RecProj) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecProj);
      }
      if (sumCase_ == SumOneofCase.RecUpd) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RecUpd);
      }
      if (sumCase_ == SumOneofCase.VariantCon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VariantCon);
      }
      if (sumCase_ == SumOneofCase.EnumCon) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnumCon);
      }
      if (sumCase_ == SumOneofCase.TupleCon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TupleCon);
      }
      if (sumCase_ == SumOneofCase.TupleProj) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TupleProj);
      }
      if (sumCase_ == SumOneofCase.TupleUpd) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TupleUpd);
      }
      if (sumCase_ == SumOneofCase.App) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(App);
      }
      if (sumCase_ == SumOneofCase.TyApp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TyApp);
      }
      if (sumCase_ == SumOneofCase.Abs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abs);
      }
      if (sumCase_ == SumOneofCase.TyAbs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TyAbs);
      }
      if (sumCase_ == SumOneofCase.Case) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Case);
      }
      if (sumCase_ == SumOneofCase.Let) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Let);
      }
      if (sumCase_ == SumOneofCase.Nil) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nil);
      }
      if (sumCase_ == SumOneofCase.Cons) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cons);
      }
      if (sumCase_ == SumOneofCase.Update) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (sumCase_ == SumOneofCase.Scenario) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Scenario);
      }
      if (sumCase_ == SumOneofCase.OptionalNone) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OptionalNone);
      }
      if (sumCase_ == SumOneofCase.OptionalSome) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OptionalSome);
      }
      if (sumCase_ == SumOneofCase.ToAny) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ToAny);
      }
      if (sumCase_ == SumOneofCase.FromAny) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FromAny);
      }
      if (sumCase_ == SumOneofCase.TypeRep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TypeRep);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Expr other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      switch (other.SumCase) {
        case SumOneofCase.VarStr:
          VarStr = other.VarStr;
          break;
        case SumOneofCase.VarInternedStr:
          VarInternedStr = other.VarInternedStr;
          break;
        case SumOneofCase.Val:
          if (Val == null) {
            Val = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ValName();
          }
          Val.MergeFrom(other.Val);
          break;
        case SumOneofCase.Builtin:
          Builtin = other.Builtin;
          break;
        case SumOneofCase.PrimCon:
          PrimCon = other.PrimCon;
          break;
        case SumOneofCase.PrimLit:
          if (PrimLit == null) {
            PrimLit = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimLit();
          }
          PrimLit.MergeFrom(other.PrimLit);
          break;
        case SumOneofCase.RecCon:
          if (RecCon == null) {
            RecCon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecCon();
          }
          RecCon.MergeFrom(other.RecCon);
          break;
        case SumOneofCase.RecProj:
          if (RecProj == null) {
            RecProj = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecProj();
          }
          RecProj.MergeFrom(other.RecProj);
          break;
        case SumOneofCase.RecUpd:
          if (RecUpd == null) {
            RecUpd = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecUpd();
          }
          RecUpd.MergeFrom(other.RecUpd);
          break;
        case SumOneofCase.VariantCon:
          if (VariantCon == null) {
            VariantCon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.VariantCon();
          }
          VariantCon.MergeFrom(other.VariantCon);
          break;
        case SumOneofCase.EnumCon:
          if (EnumCon == null) {
            EnumCon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.EnumCon();
          }
          EnumCon.MergeFrom(other.EnumCon);
          break;
        case SumOneofCase.TupleCon:
          if (TupleCon == null) {
            TupleCon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleCon();
          }
          TupleCon.MergeFrom(other.TupleCon);
          break;
        case SumOneofCase.TupleProj:
          if (TupleProj == null) {
            TupleProj = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleProj();
          }
          TupleProj.MergeFrom(other.TupleProj);
          break;
        case SumOneofCase.TupleUpd:
          if (TupleUpd == null) {
            TupleUpd = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleUpd();
          }
          TupleUpd.MergeFrom(other.TupleUpd);
          break;
        case SumOneofCase.App:
          if (App == null) {
            App = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.App();
          }
          App.MergeFrom(other.App);
          break;
        case SumOneofCase.TyApp:
          if (TyApp == null) {
            TyApp = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyApp();
          }
          TyApp.MergeFrom(other.TyApp);
          break;
        case SumOneofCase.Abs:
          if (Abs == null) {
            Abs = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Abs();
          }
          Abs.MergeFrom(other.Abs);
          break;
        case SumOneofCase.TyAbs:
          if (TyAbs == null) {
            TyAbs = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyAbs();
          }
          TyAbs.MergeFrom(other.TyAbs);
          break;
        case SumOneofCase.Case:
          if (Case == null) {
            Case = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Case();
          }
          Case.MergeFrom(other.Case);
          break;
        case SumOneofCase.Let:
          if (Let == null) {
            Let = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block();
          }
          Let.MergeFrom(other.Let);
          break;
        case SumOneofCase.Nil:
          if (Nil == null) {
            Nil = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Nil();
          }
          Nil.MergeFrom(other.Nil);
          break;
        case SumOneofCase.Cons:
          if (Cons == null) {
            Cons = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Cons();
          }
          Cons.MergeFrom(other.Cons);
          break;
        case SumOneofCase.Update:
          if (Update == null) {
            Update = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update();
          }
          Update.MergeFrom(other.Update);
          break;
        case SumOneofCase.Scenario:
          if (Scenario == null) {
            Scenario = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario();
          }
          Scenario.MergeFrom(other.Scenario);
          break;
        case SumOneofCase.OptionalNone:
          if (OptionalNone == null) {
            OptionalNone = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalNone();
          }
          OptionalNone.MergeFrom(other.OptionalNone);
          break;
        case SumOneofCase.OptionalSome:
          if (OptionalSome == null) {
            OptionalSome = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalSome();
          }
          OptionalSome.MergeFrom(other.OptionalSome);
          break;
        case SumOneofCase.ToAny:
          if (ToAny == null) {
            ToAny = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.ToAny();
          }
          ToAny.MergeFrom(other.ToAny);
          break;
        case SumOneofCase.FromAny:
          if (FromAny == null) {
            FromAny = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.FromAny();
          }
          FromAny.MergeFrom(other.FromAny);
          break;
        case SumOneofCase.TypeRep:
          if (TypeRep == null) {
            TypeRep = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
          }
          TypeRep.MergeFrom(other.TypeRep);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VarStr = input.ReadString();
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ValName subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.ValName();
            if (sumCase_ == SumOneofCase.Val) {
              subBuilder.MergeFrom(Val);
            }
            input.ReadMessage(subBuilder);
            Val = subBuilder;
            break;
          }
          case 24: {
            sum_ = input.ReadEnum();
            sumCase_ = SumOneofCase.Builtin;
            break;
          }
          case 32: {
            sum_ = input.ReadEnum();
            sumCase_ = SumOneofCase.PrimCon;
            break;
          }
          case 42: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimLit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimLit();
            if (sumCase_ == SumOneofCase.PrimLit) {
              subBuilder.MergeFrom(PrimLit);
            }
            input.ReadMessage(subBuilder);
            PrimLit = subBuilder;
            break;
          }
          case 50: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecCon subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecCon();
            if (sumCase_ == SumOneofCase.RecCon) {
              subBuilder.MergeFrom(RecCon);
            }
            input.ReadMessage(subBuilder);
            RecCon = subBuilder;
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecProj subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecProj();
            if (sumCase_ == SumOneofCase.RecProj) {
              subBuilder.MergeFrom(RecProj);
            }
            input.ReadMessage(subBuilder);
            RecProj = subBuilder;
            break;
          }
          case 66: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.VariantCon subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.VariantCon();
            if (sumCase_ == SumOneofCase.VariantCon) {
              subBuilder.MergeFrom(VariantCon);
            }
            input.ReadMessage(subBuilder);
            VariantCon = subBuilder;
            break;
          }
          case 74: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleCon subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleCon();
            if (sumCase_ == SumOneofCase.TupleCon) {
              subBuilder.MergeFrom(TupleCon);
            }
            input.ReadMessage(subBuilder);
            TupleCon = subBuilder;
            break;
          }
          case 82: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleProj subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleProj();
            if (sumCase_ == SumOneofCase.TupleProj) {
              subBuilder.MergeFrom(TupleProj);
            }
            input.ReadMessage(subBuilder);
            TupleProj = subBuilder;
            break;
          }
          case 90: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.App subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.App();
            if (sumCase_ == SumOneofCase.App) {
              subBuilder.MergeFrom(App);
            }
            input.ReadMessage(subBuilder);
            App = subBuilder;
            break;
          }
          case 98: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyApp subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyApp();
            if (sumCase_ == SumOneofCase.TyApp) {
              subBuilder.MergeFrom(TyApp);
            }
            input.ReadMessage(subBuilder);
            TyApp = subBuilder;
            break;
          }
          case 106: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Abs subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Abs();
            if (sumCase_ == SumOneofCase.Abs) {
              subBuilder.MergeFrom(Abs);
            }
            input.ReadMessage(subBuilder);
            Abs = subBuilder;
            break;
          }
          case 114: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyAbs subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TyAbs();
            if (sumCase_ == SumOneofCase.TyAbs) {
              subBuilder.MergeFrom(TyAbs);
            }
            input.ReadMessage(subBuilder);
            TyAbs = subBuilder;
            break;
          }
          case 122: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Case subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Case();
            if (sumCase_ == SumOneofCase.Case) {
              subBuilder.MergeFrom(Case);
            }
            input.ReadMessage(subBuilder);
            Case = subBuilder;
            break;
          }
          case 130: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block();
            if (sumCase_ == SumOneofCase.Let) {
              subBuilder.MergeFrom(Let);
            }
            input.ReadMessage(subBuilder);
            Let = subBuilder;
            break;
          }
          case 138: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Nil subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Nil();
            if (sumCase_ == SumOneofCase.Nil) {
              subBuilder.MergeFrom(Nil);
            }
            input.ReadMessage(subBuilder);
            Nil = subBuilder;
            break;
          }
          case 146: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Cons subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.Cons();
            if (sumCase_ == SumOneofCase.Cons) {
              subBuilder.MergeFrom(Cons);
            }
            input.ReadMessage(subBuilder);
            Cons = subBuilder;
            break;
          }
          case 162: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update();
            if (sumCase_ == SumOneofCase.Update) {
              subBuilder.MergeFrom(Update);
            }
            input.ReadMessage(subBuilder);
            Update = subBuilder;
            break;
          }
          case 170: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario();
            if (sumCase_ == SumOneofCase.Scenario) {
              subBuilder.MergeFrom(Scenario);
            }
            input.ReadMessage(subBuilder);
            Scenario = subBuilder;
            break;
          }
          case 178: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecUpd subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.RecUpd();
            if (sumCase_ == SumOneofCase.RecUpd) {
              subBuilder.MergeFrom(RecUpd);
            }
            input.ReadMessage(subBuilder);
            RecUpd = subBuilder;
            break;
          }
          case 186: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleUpd subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.TupleUpd();
            if (sumCase_ == SumOneofCase.TupleUpd) {
              subBuilder.MergeFrom(TupleUpd);
            }
            input.ReadMessage(subBuilder);
            TupleUpd = subBuilder;
            break;
          }
          case 202: {
            if (location_ == null) {
              Location = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 210: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalNone subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalNone();
            if (sumCase_ == SumOneofCase.OptionalNone) {
              subBuilder.MergeFrom(OptionalNone);
            }
            input.ReadMessage(subBuilder);
            OptionalNone = subBuilder;
            break;
          }
          case 218: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalSome subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.OptionalSome();
            if (sumCase_ == SumOneofCase.OptionalSome) {
              subBuilder.MergeFrom(OptionalSome);
            }
            input.ReadMessage(subBuilder);
            OptionalSome = subBuilder;
            break;
          }
          case 226: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.EnumCon subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.EnumCon();
            if (sumCase_ == SumOneofCase.EnumCon) {
              subBuilder.MergeFrom(EnumCon);
            }
            input.ReadMessage(subBuilder);
            EnumCon = subBuilder;
            break;
          }
          case 232: {
            VarInternedStr = input.ReadInt32();
            break;
          }
          case 242: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.ToAny subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.ToAny();
            if (sumCase_ == SumOneofCase.ToAny) {
              subBuilder.MergeFrom(ToAny);
            }
            input.ReadMessage(subBuilder);
            ToAny = subBuilder;
            break;
          }
          case 250: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.FromAny subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Types.FromAny();
            if (sumCase_ == SumOneofCase.FromAny) {
              subBuilder.MergeFrom(FromAny);
            }
            input.ReadMessage(subBuilder);
            FromAny = subBuilder;
            break;
          }
          case 258: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            if (sumCase_ == SumOneofCase.TypeRep) {
              subBuilder.MergeFrom(TypeRep);
            }
            input.ReadMessage(subBuilder);
            TypeRep = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Expr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Record construction ('ExpRecCon')
      /// </summary>
      public sealed partial class RecCon : pb::IMessage<RecCon> {
        private static readonly pb::MessageParser<RecCon> _parser = new pb::MessageParser<RecCon>(() => new RecCon());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecCon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecCon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecCon(RecCon other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecCon Clone() {
          return new RecCon(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// type of the record being constructed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr> fields_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr>();
        /// <summary>
        /// Field names and the associated values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecCon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecCon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecCon other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Record projection (ExpRecProj)
      /// </summary>
      public sealed partial class RecProj : pb::IMessage<RecProj> {
        private static readonly pb::MessageParser<RecProj> _parser = new pb::MessageParser<RecProj>(() => new RecProj());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecProj> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecProj() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecProj(RecProj other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          record_ = other.record_ != null ? other.record_.Clone() : null;
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecProj Clone() {
          return new RecProj(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// type of the record being projected.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "field_str" field.</summary>
        public const int FieldStrFieldNumber = 2;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldStr {
          get { return fieldCase_ == FieldOneofCase.FieldStr ? (string) field_ : ""; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            fieldCase_ = FieldOneofCase.FieldStr;
          }
        }

        /// <summary>Field number for the "field_interned_str" field.</summary>
        public const int FieldInternedStrFieldNumber = 4;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FieldInternedStr {
          get { return fieldCase_ == FieldOneofCase.FieldInternedStr ? (int) field_ : 0; }
          set {
            field_ = value;
            fieldCase_ = FieldOneofCase.FieldInternedStr;
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr record_;
        /// <summary>
        /// projected expression
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Record {
          get { return record_; }
          set {
            record_ = value;
          }
        }

        private object field_;
        /// <summary>Enum of possible cases for the "field" oneof.</summary>
        public enum FieldOneofCase {
          None = 0,
          FieldStr = 2,
          FieldInternedStr = 4,
        }
        private FieldOneofCase fieldCase_ = FieldOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldOneofCase FieldCase {
          get { return fieldCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearField() {
          fieldCase_ = FieldOneofCase.None;
          field_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecProj);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecProj other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if (FieldStr != other.FieldStr) return false;
          if (FieldInternedStr != other.FieldInternedStr) return false;
          if (!object.Equals(Record, other.Record)) return false;
          if (FieldCase != other.FieldCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          if (fieldCase_ == FieldOneofCase.FieldStr) hash ^= FieldStr.GetHashCode();
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) hash ^= FieldInternedStr.GetHashCode();
          if (record_ != null) hash ^= Record.GetHashCode();
          hash ^= (int) fieldCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            output.WriteRawTag(18);
            output.WriteString(FieldStr);
          }
          if (record_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Record);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            output.WriteRawTag(32);
            output.WriteInt32(FieldInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldStr);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldInternedStr);
          }
          if (record_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecProj other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          if (other.record_ != null) {
            if (record_ == null) {
              Record = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Record.MergeFrom(other.Record);
          }
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                FieldStr = input.ReadString();
                break;
              }
              case 26: {
                if (record_ == null) {
                  Record = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Record);
                break;
              }
              case 32: {
                FieldInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Record update ('ExpRecUp')
      /// </summary>
      public sealed partial class RecUpd : pb::IMessage<RecUpd> {
        private static readonly pb::MessageParser<RecUpd> _parser = new pb::MessageParser<RecUpd>(() => new RecUpd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecUpd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecUpd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecUpd(RecUpd other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          record_ = other.record_ != null ? other.record_.Clone() : null;
          update_ = other.update_ != null ? other.update_.Clone() : null;
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecUpd Clone() {
          return new RecUpd(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// type of the record being updated
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "field_str" field.</summary>
        public const int FieldStrFieldNumber = 2;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldStr {
          get { return fieldCase_ == FieldOneofCase.FieldStr ? (string) field_ : ""; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            fieldCase_ = FieldOneofCase.FieldStr;
          }
        }

        /// <summary>Field number for the "field_interned_str" field.</summary>
        public const int FieldInternedStrFieldNumber = 5;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FieldInternedStr {
          get { return fieldCase_ == FieldOneofCase.FieldInternedStr ? (int) field_ : 0; }
          set {
            field_ = value;
            fieldCase_ = FieldOneofCase.FieldInternedStr;
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr record_;
        /// <summary>
        /// Actual record being updated
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Record {
          get { return record_; }
          set {
            record_ = value;
          }
        }

        /// <summary>Field number for the "update" field.</summary>
        public const int UpdateFieldNumber = 4;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr update_;
        /// <summary>
        /// Value to wich the record is udpated
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Update {
          get { return update_; }
          set {
            update_ = value;
          }
        }

        private object field_;
        /// <summary>Enum of possible cases for the "field" oneof.</summary>
        public enum FieldOneofCase {
          None = 0,
          FieldStr = 2,
          FieldInternedStr = 5,
        }
        private FieldOneofCase fieldCase_ = FieldOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldOneofCase FieldCase {
          get { return fieldCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearField() {
          fieldCase_ = FieldOneofCase.None;
          field_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecUpd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecUpd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if (FieldStr != other.FieldStr) return false;
          if (FieldInternedStr != other.FieldInternedStr) return false;
          if (!object.Equals(Record, other.Record)) return false;
          if (!object.Equals(Update, other.Update)) return false;
          if (FieldCase != other.FieldCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          if (fieldCase_ == FieldOneofCase.FieldStr) hash ^= FieldStr.GetHashCode();
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) hash ^= FieldInternedStr.GetHashCode();
          if (record_ != null) hash ^= Record.GetHashCode();
          if (update_ != null) hash ^= Update.GetHashCode();
          hash ^= (int) fieldCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            output.WriteRawTag(18);
            output.WriteString(FieldStr);
          }
          if (record_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Record);
          }
          if (update_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Update);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            output.WriteRawTag(40);
            output.WriteInt32(FieldInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldStr);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldInternedStr);
          }
          if (record_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
          }
          if (update_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecUpd other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          if (other.record_ != null) {
            if (record_ == null) {
              Record = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Record.MergeFrom(other.Record);
          }
          if (other.update_ != null) {
            if (update_ == null) {
              Update = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Update.MergeFrom(other.Update);
          }
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                FieldStr = input.ReadString();
                break;
              }
              case 26: {
                if (record_ == null) {
                  Record = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Record);
                break;
              }
              case 34: {
                if (update_ == null) {
                  Update = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Update);
                break;
              }
              case 40: {
                FieldInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Variant construction ('ExpVariantCon')
      /// </summary>
      public sealed partial class VariantCon : pb::IMessage<VariantCon> {
        private static readonly pb::MessageParser<VariantCon> _parser = new pb::MessageParser<VariantCon>(() => new VariantCon());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VariantCon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantCon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantCon(VariantCon other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          variantArg_ = other.variantArg_ != null ? other.variantArg_.Clone() : null;
          switch (other.VariantConCase) {
            case VariantConOneofCase.VariantConStr:
              VariantConStr = other.VariantConStr;
              break;
            case VariantConOneofCase.VariantConInternedStr:
              VariantConInternedStr = other.VariantConInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantCon Clone() {
          return new VariantCon(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// type of the variant being constructed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "variant_con_str" field.</summary>
        public const int VariantConStrFieldNumber = 2;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VariantConStr {
          get { return variantConCase_ == VariantConOneofCase.VariantConStr ? (string) variantCon_ : ""; }
          set {
            variantCon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            variantConCase_ = VariantConOneofCase.VariantConStr;
          }
        }

        /// <summary>Field number for the "variant_con_interned_str" field.</summary>
        public const int VariantConInternedStrFieldNumber = 4;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VariantConInternedStr {
          get { return variantConCase_ == VariantConOneofCase.VariantConInternedStr ? (int) variantCon_ : 0; }
          set {
            variantCon_ = value;
            variantConCase_ = VariantConOneofCase.VariantConInternedStr;
          }
        }

        /// <summary>Field number for the "variant_arg" field.</summary>
        public const int VariantArgFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr variantArg_;
        /// <summary>
        /// Argument of the variant.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr VariantArg {
          get { return variantArg_; }
          set {
            variantArg_ = value;
          }
        }

        private object variantCon_;
        /// <summary>Enum of possible cases for the "variant_con" oneof.</summary>
        public enum VariantConOneofCase {
          None = 0,
          VariantConStr = 2,
          VariantConInternedStr = 4,
        }
        private VariantConOneofCase variantConCase_ = VariantConOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantConOneofCase VariantConCase {
          get { return variantConCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVariantCon() {
          variantConCase_ = VariantConOneofCase.None;
          variantCon_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as VariantCon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(VariantCon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if (VariantConStr != other.VariantConStr) return false;
          if (VariantConInternedStr != other.VariantConInternedStr) return false;
          if (!object.Equals(VariantArg, other.VariantArg)) return false;
          if (VariantConCase != other.VariantConCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          if (variantConCase_ == VariantConOneofCase.VariantConStr) hash ^= VariantConStr.GetHashCode();
          if (variantConCase_ == VariantConOneofCase.VariantConInternedStr) hash ^= VariantConInternedStr.GetHashCode();
          if (variantArg_ != null) hash ^= VariantArg.GetHashCode();
          hash ^= (int) variantConCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          if (variantConCase_ == VariantConOneofCase.VariantConStr) {
            output.WriteRawTag(18);
            output.WriteString(VariantConStr);
          }
          if (variantArg_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(VariantArg);
          }
          if (variantConCase_ == VariantConOneofCase.VariantConInternedStr) {
            output.WriteRawTag(32);
            output.WriteInt32(VariantConInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          if (variantConCase_ == VariantConOneofCase.VariantConStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantConStr);
          }
          if (variantConCase_ == VariantConOneofCase.VariantConInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VariantConInternedStr);
          }
          if (variantArg_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(VariantArg);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(VariantCon other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          if (other.variantArg_ != null) {
            if (variantArg_ == null) {
              VariantArg = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            VariantArg.MergeFrom(other.VariantArg);
          }
          switch (other.VariantConCase) {
            case VariantConOneofCase.VariantConStr:
              VariantConStr = other.VariantConStr;
              break;
            case VariantConOneofCase.VariantConInternedStr:
              VariantConInternedStr = other.VariantConInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                VariantConStr = input.ReadString();
                break;
              }
              case 26: {
                if (variantArg_ == null) {
                  VariantArg = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(VariantArg);
                break;
              }
              case 32: {
                VariantConInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Enum construction ('ExpEnumCon')
      /// *Available in versions >= 1.6*
      /// </summary>
      public sealed partial class EnumCon : pb::IMessage<EnumCon> {
        private static readonly pb::MessageParser<EnumCon> _parser = new pb::MessageParser<EnumCon>(() => new EnumCon());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EnumCon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumCon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumCon(EnumCon other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          switch (other.EnumConCase) {
            case EnumConOneofCase.EnumConStr:
              EnumConStr = other.EnumConStr;
              break;
            case EnumConOneofCase.EnumConInternedStr:
              EnumConInternedStr = other.EnumConInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumCon Clone() {
          return new EnumCon(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName tycon_;
        /// <summary>
        /// Name of the type constructor name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "enum_con_str" field.</summary>
        public const int EnumConStrFieldNumber = 2;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EnumConStr {
          get { return enumConCase_ == EnumConOneofCase.EnumConStr ? (string) enumCon_ : ""; }
          set {
            enumCon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            enumConCase_ = EnumConOneofCase.EnumConStr;
          }
        }

        /// <summary>Field number for the "enum_con_interned_str" field.</summary>
        public const int EnumConInternedStrFieldNumber = 3;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EnumConInternedStr {
          get { return enumConCase_ == EnumConOneofCase.EnumConInternedStr ? (int) enumCon_ : 0; }
          set {
            enumCon_ = value;
            enumConCase_ = EnumConOneofCase.EnumConInternedStr;
          }
        }

        private object enumCon_;
        /// <summary>Enum of possible cases for the "enum_con" oneof.</summary>
        public enum EnumConOneofCase {
          None = 0,
          EnumConStr = 2,
          EnumConInternedStr = 3,
        }
        private EnumConOneofCase enumConCase_ = EnumConOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumConOneofCase EnumConCase {
          get { return enumConCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEnumCon() {
          enumConCase_ = EnumConOneofCase.None;
          enumCon_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EnumCon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EnumCon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if (EnumConStr != other.EnumConStr) return false;
          if (EnumConInternedStr != other.EnumConInternedStr) return false;
          if (EnumConCase != other.EnumConCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          if (enumConCase_ == EnumConOneofCase.EnumConStr) hash ^= EnumConStr.GetHashCode();
          if (enumConCase_ == EnumConOneofCase.EnumConInternedStr) hash ^= EnumConInternedStr.GetHashCode();
          hash ^= (int) enumConCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          if (enumConCase_ == EnumConOneofCase.EnumConStr) {
            output.WriteRawTag(18);
            output.WriteString(EnumConStr);
          }
          if (enumConCase_ == EnumConOneofCase.EnumConInternedStr) {
            output.WriteRawTag(24);
            output.WriteInt32(EnumConInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          if (enumConCase_ == EnumConOneofCase.EnumConStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EnumConStr);
          }
          if (enumConCase_ == EnumConOneofCase.EnumConInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnumConInternedStr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EnumCon other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          switch (other.EnumConCase) {
            case EnumConOneofCase.EnumConStr:
              EnumConStr = other.EnumConStr;
              break;
            case EnumConOneofCase.EnumConInternedStr:
              EnumConInternedStr = other.EnumConInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                EnumConStr = input.ReadString();
                break;
              }
              case 24: {
                EnumConInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Tuple Construction ('ExpTupleCon')
      /// </summary>
      public sealed partial class TupleCon : pb::IMessage<TupleCon> {
        private static readonly pb::MessageParser<TupleCon> _parser = new pb::MessageParser<TupleCon>(() => new TupleCon());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TupleCon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleCon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleCon(TupleCon other) : this() {
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleCon Clone() {
          return new TupleCon(this);
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr> fields_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr>();
        /// <summary>
        /// Field names and their associated values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithExpr> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TupleCon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TupleCon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TupleCon other) {
          if (other == null) {
            return;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Tuple Projection ('ExpTupleProj')
      /// </summary>
      public sealed partial class TupleProj : pb::IMessage<TupleProj> {
        private static readonly pb::MessageParser<TupleProj> _parser = new pb::MessageParser<TupleProj>(() => new TupleProj());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TupleProj> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleProj() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleProj(TupleProj other) : this() {
          tuple_ = other.tuple_ != null ? other.tuple_.Clone() : null;
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleProj Clone() {
          return new TupleProj(this);
        }

        /// <summary>Field number for the "field_str" field.</summary>
        public const int FieldStrFieldNumber = 1;
        /// <summary>
        /// *Must be a valid Identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldStr {
          get { return fieldCase_ == FieldOneofCase.FieldStr ? (string) field_ : ""; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            fieldCase_ = FieldOneofCase.FieldStr;
          }
        }

        /// <summary>Field number for the "field_interned_str" field.</summary>
        public const int FieldInternedStrFieldNumber = 3;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FieldInternedStr {
          get { return fieldCase_ == FieldOneofCase.FieldInternedStr ? (int) field_ : 0; }
          set {
            field_ = value;
            fieldCase_ = FieldOneofCase.FieldInternedStr;
          }
        }

        /// <summary>Field number for the "tuple" field.</summary>
        public const int TupleFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr tuple_;
        /// <summary>
        /// tuple to be projected.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Tuple {
          get { return tuple_; }
          set {
            tuple_ = value;
          }
        }

        private object field_;
        /// <summary>Enum of possible cases for the "field" oneof.</summary>
        public enum FieldOneofCase {
          None = 0,
          FieldStr = 1,
          FieldInternedStr = 3,
        }
        private FieldOneofCase fieldCase_ = FieldOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldOneofCase FieldCase {
          get { return fieldCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearField() {
          fieldCase_ = FieldOneofCase.None;
          field_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TupleProj);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TupleProj other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FieldStr != other.FieldStr) return false;
          if (FieldInternedStr != other.FieldInternedStr) return false;
          if (!object.Equals(Tuple, other.Tuple)) return false;
          if (FieldCase != other.FieldCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (fieldCase_ == FieldOneofCase.FieldStr) hash ^= FieldStr.GetHashCode();
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) hash ^= FieldInternedStr.GetHashCode();
          if (tuple_ != null) hash ^= Tuple.GetHashCode();
          hash ^= (int) fieldCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            output.WriteRawTag(10);
            output.WriteString(FieldStr);
          }
          if (tuple_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Tuple);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            output.WriteRawTag(24);
            output.WriteInt32(FieldInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldStr);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldInternedStr);
          }
          if (tuple_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tuple);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TupleProj other) {
          if (other == null) {
            return;
          }
          if (other.tuple_ != null) {
            if (tuple_ == null) {
              Tuple = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Tuple.MergeFrom(other.Tuple);
          }
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FieldStr = input.ReadString();
                break;
              }
              case 18: {
                if (tuple_ == null) {
                  Tuple = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Tuple);
                break;
              }
              case 24: {
                FieldInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Tuple update ('ExpTuplUpdate')
      /// </summary>
      public sealed partial class TupleUpd : pb::IMessage<TupleUpd> {
        private static readonly pb::MessageParser<TupleUpd> _parser = new pb::MessageParser<TupleUpd>(() => new TupleUpd());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TupleUpd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleUpd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleUpd(TupleUpd other) : this() {
          tuple_ = other.tuple_ != null ? other.tuple_.Clone() : null;
          update_ = other.update_ != null ? other.update_.Clone() : null;
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleUpd Clone() {
          return new TupleUpd(this);
        }

        /// <summary>Field number for the "field_str" field.</summary>
        public const int FieldStrFieldNumber = 1;
        /// <summary>
        /// *Must be a valid identifier*.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldStr {
          get { return fieldCase_ == FieldOneofCase.FieldStr ? (string) field_ : ""; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            fieldCase_ = FieldOneofCase.FieldStr;
          }
        }

        /// <summary>Field number for the "field_interned_str" field.</summary>
        public const int FieldInternedStrFieldNumber = 4;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FieldInternedStr {
          get { return fieldCase_ == FieldOneofCase.FieldInternedStr ? (int) field_ : 0; }
          set {
            field_ = value;
            fieldCase_ = FieldOneofCase.FieldInternedStr;
          }
        }

        /// <summary>Field number for the "tuple" field.</summary>
        public const int TupleFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr tuple_;
        /// <summary>
        /// Actual tuple being updated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Tuple {
          get { return tuple_; }
          set {
            tuple_ = value;
          }
        }

        /// <summary>Field number for the "update" field.</summary>
        public const int UpdateFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr update_;
        /// <summary>
        /// Value to which the record is udpated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Update {
          get { return update_; }
          set {
            update_ = value;
          }
        }

        private object field_;
        /// <summary>Enum of possible cases for the "field" oneof.</summary>
        public enum FieldOneofCase {
          None = 0,
          FieldStr = 1,
          FieldInternedStr = 4,
        }
        private FieldOneofCase fieldCase_ = FieldOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldOneofCase FieldCase {
          get { return fieldCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearField() {
          fieldCase_ = FieldOneofCase.None;
          field_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TupleUpd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TupleUpd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FieldStr != other.FieldStr) return false;
          if (FieldInternedStr != other.FieldInternedStr) return false;
          if (!object.Equals(Tuple, other.Tuple)) return false;
          if (!object.Equals(Update, other.Update)) return false;
          if (FieldCase != other.FieldCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (fieldCase_ == FieldOneofCase.FieldStr) hash ^= FieldStr.GetHashCode();
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) hash ^= FieldInternedStr.GetHashCode();
          if (tuple_ != null) hash ^= Tuple.GetHashCode();
          if (update_ != null) hash ^= Update.GetHashCode();
          hash ^= (int) fieldCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            output.WriteRawTag(10);
            output.WriteString(FieldStr);
          }
          if (tuple_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Tuple);
          }
          if (update_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Update);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            output.WriteRawTag(32);
            output.WriteInt32(FieldInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldStr);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldInternedStr);
          }
          if (tuple_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tuple);
          }
          if (update_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TupleUpd other) {
          if (other == null) {
            return;
          }
          if (other.tuple_ != null) {
            if (tuple_ == null) {
              Tuple = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Tuple.MergeFrom(other.Tuple);
          }
          if (other.update_ != null) {
            if (update_ == null) {
              Update = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Update.MergeFrom(other.Update);
          }
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FieldStr = input.ReadString();
                break;
              }
              case 18: {
                if (tuple_ == null) {
                  Tuple = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Tuple);
                break;
              }
              case 26: {
                if (update_ == null) {
                  Update = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Update);
                break;
              }
              case 32: {
                FieldInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Application ('ExpApp')
      /// </summary>
      public sealed partial class App : pb::IMessage<App> {
        private static readonly pb::MessageParser<App> _parser = new pb::MessageParser<App>(() => new App());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<App> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public App() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public App(App other) : this() {
          fun_ = other.fun_ != null ? other.fun_.Clone() : null;
          args_ = other.args_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public App Clone() {
          return new App(this);
        }

        /// <summary>Field number for the "fun" field.</summary>
        public const int FunFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr fun_;
        /// <summary>
        /// Function
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Fun {
          get { return fun_; }
          set {
            fun_ = value;
          }
        }

        /// <summary>Field number for the "args" field.</summary>
        public const int ArgsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr> _repeated_args_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr> args_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr>();
        /// <summary>
        /// Arguments of the function.
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr> Args {
          get { return args_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as App);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(App other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Fun, other.Fun)) return false;
          if(!args_.Equals(other.args_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (fun_ != null) hash ^= Fun.GetHashCode();
          hash ^= args_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (fun_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Fun);
          }
          args_.WriteTo(output, _repeated_args_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (fun_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fun);
          }
          size += args_.CalculateSize(_repeated_args_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(App other) {
          if (other == null) {
            return;
          }
          if (other.fun_ != null) {
            if (fun_ == null) {
              Fun = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Fun.MergeFrom(other.Fun);
          }
          args_.Add(other.args_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (fun_ == null) {
                  Fun = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Fun);
                break;
              }
              case 18: {
                args_.AddEntriesFrom(input, _repeated_args_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Type application ('ExpTyApp')
      /// </summary>
      public sealed partial class TyApp : pb::IMessage<TyApp> {
        private static readonly pb::MessageParser<TyApp> _parser = new pb::MessageParser<TyApp>(() => new TyApp());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TyApp> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyApp() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyApp(TyApp other) : this() {
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          types_ = other.types_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyApp Clone() {
          return new TyApp(this);
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr expr_;
        /// <summary>
        /// Polymorphic expression
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        /// <summary>Field number for the "types" field.</summary>
        public const int Types_FieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> _repeated_types_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> types_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type>();
        /// <summary>
        /// Arguments of the function.
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type> Types_ {
          get { return types_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TyApp);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TyApp other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Expr, other.Expr)) return false;
          if(!types_.Equals(other.types_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (expr_ != null) hash ^= Expr.GetHashCode();
          hash ^= types_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (expr_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Expr);
          }
          types_.WriteTo(output, _repeated_types_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          size += types_.CalculateSize(_repeated_types_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TyApp other) {
          if (other == null) {
            return;
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Expr.MergeFrom(other.Expr);
          }
          types_.Add(other.types_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (expr_ == null) {
                  Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 18: {
                types_.AddEntriesFrom(input, _repeated_types_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Abstraction ('ExpAbs')
      /// </summary>
      public sealed partial class Abs : pb::IMessage<Abs> {
        private static readonly pb::MessageParser<Abs> _parser = new pb::MessageParser<Abs>(() => new Abs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Abs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Abs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Abs(Abs other) : this() {
          param_ = other.param_.Clone();
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Abs Clone() {
          return new Abs(this);
        }

        /// <summary>Field number for the "param" field.</summary>
        public const int ParamFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType> _repeated_param_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType> param_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType>();
        /// <summary>
        /// Abstracted Variables with their kind
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType> Param {
          get { return param_; }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr body_;
        /// <summary>
        /// Abstracted value
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Abs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Abs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!param_.Equals(other.param_)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= param_.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          param_.WriteTo(output, _repeated_param_codec);
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += param_.CalculateSize(_repeated_param_codec);
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Abs other) {
          if (other == null) {
            return;
          }
          param_.Add(other.param_);
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                param_.AddEntriesFrom(input, _repeated_param_codec);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

      public sealed partial class TyAbs : pb::IMessage<TyAbs> {
        private static readonly pb::MessageParser<TyAbs> _parser = new pb::MessageParser<TyAbs>(() => new TyAbs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TyAbs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyAbs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyAbs(TyAbs other) : this() {
          param_ = other.param_.Clone();
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TyAbs Clone() {
          return new TyAbs(this);
        }

        /// <summary>Field number for the "param" field.</summary>
        public const int ParamFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind> _repeated_param_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind> param_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind>();
        /// <summary>
        /// Abstracted Variables with their type
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind> Param {
          get { return param_; }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr body_;
        /// <summary>
        /// Abstracted value
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TyAbs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TyAbs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!param_.Equals(other.param_)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= param_.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          param_.WriteTo(output, _repeated_param_codec);
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += param_.CalculateSize(_repeated_param_codec);
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TyAbs other) {
          if (other == null) {
            return;
          }
          param_.Add(other.param_);
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                param_.AddEntriesFrom(input, _repeated_param_codec);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Empty list ('ExpNil')
      /// </summary>
      public sealed partial class Nil : pb::IMessage<Nil> {
        private static readonly pb::MessageParser<Nil> _parser = new pb::MessageParser<Nil>(() => new Nil());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Nil> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Nil() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Nil(Nil other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Nil Clone() {
          return new Nil(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
        /// <summary>
        /// type of the list elements.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Nil);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Nil other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Nil other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Non empty list
      /// </summary>
      public sealed partial class Cons : pb::IMessage<Cons> {
        private static readonly pb::MessageParser<Cons> _parser = new pb::MessageParser<Cons>(() => new Cons());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Cons> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons(Cons other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          front_ = other.front_.Clone();
          tail_ = other.tail_ != null ? other.tail_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons Clone() {
          return new Cons(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
        /// <summary>
        /// type of the list elements.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "front" field.</summary>
        public const int FrontFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr> _repeated_front_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr> front_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr>();
        /// <summary>
        /// Front element of the list.
        /// *Must be non-empty*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr> Front {
          get { return front_; }
        }

        /// <summary>Field number for the "tail" field.</summary>
        public const int TailFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr tail_;
        /// <summary>
        /// tail of the list
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Tail {
          get { return tail_; }
          set {
            tail_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Cons);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Cons other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if(!front_.Equals(other.front_)) return false;
          if (!object.Equals(Tail, other.Tail)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          hash ^= front_.GetHashCode();
          if (tail_ != null) hash ^= Tail.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          front_.WriteTo(output, _repeated_front_codec);
          if (tail_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Tail);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          size += front_.CalculateSize(_repeated_front_codec);
          if (tail_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tail);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Cons other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          front_.Add(other.front_);
          if (other.tail_ != null) {
            if (tail_ == null) {
              Tail = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Tail.MergeFrom(other.Tail);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                front_.AddEntriesFrom(input, _repeated_front_codec);
                break;
              }
              case 26: {
                if (tail_ == null) {
                  Tail = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Tail);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// (*Since version 1*)
      /// Empty optional value
      /// </summary>
      public sealed partial class OptionalNone : pb::IMessage<OptionalNone> {
        private static readonly pb::MessageParser<OptionalNone> _parser = new pb::MessageParser<OptionalNone>(() => new OptionalNone());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OptionalNone> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalNone() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalNone(OptionalNone other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalNone Clone() {
          return new OptionalNone(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
        /// <summary>
        /// type of the element
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OptionalNone);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OptionalNone other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OptionalNone other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// (*Since version 1*)
      /// Non empty optional value
      /// </summary>
      public sealed partial class OptionalSome : pb::IMessage<OptionalSome> {
        private static readonly pb::MessageParser<OptionalSome> _parser = new pb::MessageParser<OptionalSome>(() => new OptionalSome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OptionalSome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome(OptionalSome other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome Clone() {
          return new OptionalSome(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
        /// <summary>
        /// type of the element
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr body_;
        /// <summary>
        /// contained value
        /// FixMe: renamed to 'value'
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OptionalSome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OptionalSome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OptionalSome other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Wrap a value in Any
      /// *Available in versions >= 1.7*
      /// </summary>
      public sealed partial class ToAny : pb::IMessage<ToAny> {
        private static readonly pb::MessageParser<ToAny> _parser = new pb::MessageParser<ToAny>(() => new ToAny());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ToAny> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ToAny() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ToAny(ToAny other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ToAny Clone() {
          return new ToAny(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
        /// <summary>
        /// type of argument. Must be the TypeConName of a template.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr expr_;
        /// <summary>
        /// argument
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ToAny);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ToAny other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if (!object.Equals(Expr, other.Expr)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (expr_ != null) hash ^= Expr.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (expr_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ToAny other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Expr.MergeFrom(other.Expr);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                if (expr_ == null) {
                  Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Expr);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Extract the given type from Any or return None on type-mismatch
      /// *Available in versions >= 1.7*
      /// </summary>
      public sealed partial class FromAny : pb::IMessage<FromAny> {
        private static readonly pb::MessageParser<FromAny> _parser = new pb::MessageParser<FromAny>(() => new FromAny());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FromAny> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr.Descriptor.NestedTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FromAny() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FromAny(FromAny other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FromAny Clone() {
          return new FromAny(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
        /// <summary>
        /// type that should be extracted. Must be the TypeConName of a template.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr expr_;
        /// <summary>
        /// Value of type Any
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FromAny);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FromAny other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if (!object.Equals(Expr, other.Expr)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (expr_ != null) hash ^= Expr.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (expr_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FromAny other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Expr.MergeFrom(other.Expr);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                if (expr_ == null) {
                  Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Expr);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Case alternative
  /// </summary>
  public sealed partial class CaseAlt : pb::IMessage<CaseAlt> {
    private static readonly pb::MessageParser<CaseAlt> _parser = new pb::MessageParser<CaseAlt>(() => new CaseAlt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CaseAlt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaseAlt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaseAlt(CaseAlt other) : this() {
      body_ = other.body_ != null ? other.body_.Clone() : null;
      switch (other.SumCase) {
        case SumOneofCase.Default:
          Default = other.Default.Clone();
          break;
        case SumOneofCase.Variant:
          Variant = other.Variant.Clone();
          break;
        case SumOneofCase.PrimCon:
          PrimCon = other.PrimCon;
          break;
        case SumOneofCase.Nil:
          Nil = other.Nil.Clone();
          break;
        case SumOneofCase.Cons:
          Cons = other.Cons.Clone();
          break;
        case SumOneofCase.OptionalNone:
          OptionalNone = other.OptionalNone.Clone();
          break;
        case SumOneofCase.OptionalSome:
          OptionalSome = other.OptionalSome.Clone();
          break;
        case SumOneofCase.Enum:
          Enum = other.Enum.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaseAlt Clone() {
      return new CaseAlt(this);
    }

    /// <summary>Field number for the "default" field.</summary>
    public const int DefaultFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit Default {
      get { return sumCase_ == SumOneofCase.Default ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Default;
      }
    }

    /// <summary>Field number for the "variant" field.</summary>
    public const int VariantFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Variant Variant {
      get { return sumCase_ == SumOneofCase.Variant ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Variant) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Variant;
      }
    }

    /// <summary>Field number for the "prim_con" field.</summary>
    public const int PrimConFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimCon PrimCon {
      get { return sumCase_ == SumOneofCase.PrimCon ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.PrimCon) sum_ : 0; }
      set {
        sum_ = value;
        sumCase_ = SumOneofCase.PrimCon;
      }
    }

    /// <summary>Field number for the "nil" field.</summary>
    public const int NilFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit Nil {
      get { return sumCase_ == SumOneofCase.Nil ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Nil;
      }
    }

    /// <summary>Field number for the "cons" field.</summary>
    public const int ConsFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Cons Cons {
      get { return sumCase_ == SumOneofCase.Cons ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Cons) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Cons;
      }
    }

    /// <summary>Field number for the "optional_none" field.</summary>
    public const int OptionalNoneFieldNumber = 7;
    /// <summary>
    /// *Available in versions >= 1.1*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit OptionalNone {
      get { return sumCase_ == SumOneofCase.OptionalNone ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.OptionalNone;
      }
    }

    /// <summary>Field number for the "optional_some" field.</summary>
    public const int OptionalSomeFieldNumber = 8;
    /// <summary>
    /// *Available in versions >= 1.1*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.OptionalSome OptionalSome {
      get { return sumCase_ == SumOneofCase.OptionalSome ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.OptionalSome) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.OptionalSome;
      }
    }

    /// <summary>Field number for the "enum" field.</summary>
    public const int EnumFieldNumber = 9;
    /// <summary>
    /// *Available in versions >= 1.6*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Enum Enum {
      get { return sumCase_ == SumOneofCase.Enum ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Enum) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Enum;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 6;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Default = 1,
      Variant = 2,
      PrimCon = 3,
      Nil = 4,
      Cons = 5,
      OptionalNone = 7,
      OptionalSome = 8,
      Enum = 9,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CaseAlt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CaseAlt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Default, other.Default)) return false;
      if (!object.Equals(Variant, other.Variant)) return false;
      if (PrimCon != other.PrimCon) return false;
      if (!object.Equals(Nil, other.Nil)) return false;
      if (!object.Equals(Cons, other.Cons)) return false;
      if (!object.Equals(OptionalNone, other.OptionalNone)) return false;
      if (!object.Equals(OptionalSome, other.OptionalSome)) return false;
      if (!object.Equals(Enum, other.Enum)) return false;
      if (!object.Equals(Body, other.Body)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Default) hash ^= Default.GetHashCode();
      if (sumCase_ == SumOneofCase.Variant) hash ^= Variant.GetHashCode();
      if (sumCase_ == SumOneofCase.PrimCon) hash ^= PrimCon.GetHashCode();
      if (sumCase_ == SumOneofCase.Nil) hash ^= Nil.GetHashCode();
      if (sumCase_ == SumOneofCase.Cons) hash ^= Cons.GetHashCode();
      if (sumCase_ == SumOneofCase.OptionalNone) hash ^= OptionalNone.GetHashCode();
      if (sumCase_ == SumOneofCase.OptionalSome) hash ^= OptionalSome.GetHashCode();
      if (sumCase_ == SumOneofCase.Enum) hash ^= Enum.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Default) {
        output.WriteRawTag(10);
        output.WriteMessage(Default);
      }
      if (sumCase_ == SumOneofCase.Variant) {
        output.WriteRawTag(18);
        output.WriteMessage(Variant);
      }
      if (sumCase_ == SumOneofCase.PrimCon) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PrimCon);
      }
      if (sumCase_ == SumOneofCase.Nil) {
        output.WriteRawTag(34);
        output.WriteMessage(Nil);
      }
      if (sumCase_ == SumOneofCase.Cons) {
        output.WriteRawTag(42);
        output.WriteMessage(Cons);
      }
      if (body_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Body);
      }
      if (sumCase_ == SumOneofCase.OptionalNone) {
        output.WriteRawTag(58);
        output.WriteMessage(OptionalNone);
      }
      if (sumCase_ == SumOneofCase.OptionalSome) {
        output.WriteRawTag(66);
        output.WriteMessage(OptionalSome);
      }
      if (sumCase_ == SumOneofCase.Enum) {
        output.WriteRawTag(74);
        output.WriteMessage(Enum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Default) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Default);
      }
      if (sumCase_ == SumOneofCase.Variant) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variant);
      }
      if (sumCase_ == SumOneofCase.PrimCon) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrimCon);
      }
      if (sumCase_ == SumOneofCase.Nil) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nil);
      }
      if (sumCase_ == SumOneofCase.Cons) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cons);
      }
      if (sumCase_ == SumOneofCase.OptionalNone) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalNone);
      }
      if (sumCase_ == SumOneofCase.OptionalSome) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionalSome);
      }
      if (sumCase_ == SumOneofCase.Enum) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enum);
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CaseAlt other) {
      if (other == null) {
        return;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Body.MergeFrom(other.Body);
      }
      switch (other.SumCase) {
        case SumOneofCase.Default:
          if (Default == null) {
            Default = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
          }
          Default.MergeFrom(other.Default);
          break;
        case SumOneofCase.Variant:
          if (Variant == null) {
            Variant = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Variant();
          }
          Variant.MergeFrom(other.Variant);
          break;
        case SumOneofCase.PrimCon:
          PrimCon = other.PrimCon;
          break;
        case SumOneofCase.Nil:
          if (Nil == null) {
            Nil = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
          }
          Nil.MergeFrom(other.Nil);
          break;
        case SumOneofCase.Cons:
          if (Cons == null) {
            Cons = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Cons();
          }
          Cons.MergeFrom(other.Cons);
          break;
        case SumOneofCase.OptionalNone:
          if (OptionalNone == null) {
            OptionalNone = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
          }
          OptionalNone.MergeFrom(other.OptionalNone);
          break;
        case SumOneofCase.OptionalSome:
          if (OptionalSome == null) {
            OptionalSome = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.OptionalSome();
          }
          OptionalSome.MergeFrom(other.OptionalSome);
          break;
        case SumOneofCase.Enum:
          if (Enum == null) {
            Enum = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Enum();
          }
          Enum.MergeFrom(other.Enum);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.Default) {
              subBuilder.MergeFrom(Default);
            }
            input.ReadMessage(subBuilder);
            Default = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Variant subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Variant();
            if (sumCase_ == SumOneofCase.Variant) {
              subBuilder.MergeFrom(Variant);
            }
            input.ReadMessage(subBuilder);
            Variant = subBuilder;
            break;
          }
          case 24: {
            sum_ = input.ReadEnum();
            sumCase_ = SumOneofCase.PrimCon;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.Nil) {
              subBuilder.MergeFrom(Nil);
            }
            input.ReadMessage(subBuilder);
            Nil = subBuilder;
            break;
          }
          case 42: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Cons subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Cons();
            if (sumCase_ == SumOneofCase.Cons) {
              subBuilder.MergeFrom(Cons);
            }
            input.ReadMessage(subBuilder);
            Cons = subBuilder;
            break;
          }
          case 50: {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Body);
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.OptionalNone) {
              subBuilder.MergeFrom(OptionalNone);
            }
            input.ReadMessage(subBuilder);
            OptionalNone = subBuilder;
            break;
          }
          case 66: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.OptionalSome subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.OptionalSome();
            if (sumCase_ == SumOneofCase.OptionalSome) {
              subBuilder.MergeFrom(OptionalSome);
            }
            input.ReadMessage(subBuilder);
            OptionalSome = subBuilder;
            break;
          }
          case 74: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Enum subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Types.Enum();
            if (sumCase_ == SumOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CaseAlt message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Variant pattern
      /// </summary>
      public sealed partial class Variant : pb::IMessage<Variant> {
        private static readonly pb::MessageParser<Variant> _parser = new pb::MessageParser<Variant>(() => new Variant());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Variant> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Variant() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Variant(Variant other) : this() {
          con_ = other.con_ != null ? other.con_.Clone() : null;
          switch (other.VariantCase) {
            case VariantOneofCase.VariantStr:
              VariantStr = other.VariantStr;
              break;
            case VariantOneofCase.VariantInternedStr:
              VariantInternedStr = other.VariantInternedStr;
              break;
          }

          switch (other.BinderCase) {
            case BinderOneofCase.BinderStr:
              BinderStr = other.BinderStr;
              break;
            case BinderOneofCase.BinderInternedStr:
              BinderInternedStr = other.BinderInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Variant Clone() {
          return new Variant(this);
        }

        /// <summary>Field number for the "con" field.</summary>
        public const int ConFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName con_;
        /// <summary>
        /// name of the type constructor
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName Con {
          get { return con_; }
          set {
            con_ = value;
          }
        }

        /// <summary>Field number for the "variant_str" field.</summary>
        public const int VariantStrFieldNumber = 2;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VariantStr {
          get { return variantCase_ == VariantOneofCase.VariantStr ? (string) variant_ : ""; }
          set {
            variant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            variantCase_ = VariantOneofCase.VariantStr;
          }
        }

        /// <summary>Field number for the "variant_interned_str" field.</summary>
        public const int VariantInternedStrFieldNumber = 4;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VariantInternedStr {
          get { return variantCase_ == VariantOneofCase.VariantInternedStr ? (int) variant_ : 0; }
          set {
            variant_ = value;
            variantCase_ = VariantOneofCase.VariantInternedStr;
          }
        }

        /// <summary>Field number for the "binder_str" field.</summary>
        public const int BinderStrFieldNumber = 3;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BinderStr {
          get { return binderCase_ == BinderOneofCase.BinderStr ? (string) binder_ : ""; }
          set {
            binder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            binderCase_ = BinderOneofCase.BinderStr;
          }
        }

        /// <summary>Field number for the "binder_interned_str" field.</summary>
        public const int BinderInternedStrFieldNumber = 5;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BinderInternedStr {
          get { return binderCase_ == BinderOneofCase.BinderInternedStr ? (int) binder_ : 0; }
          set {
            binder_ = value;
            binderCase_ = BinderOneofCase.BinderInternedStr;
          }
        }

        private object variant_;
        /// <summary>Enum of possible cases for the "variant" oneof.</summary>
        public enum VariantOneofCase {
          None = 0,
          VariantStr = 2,
          VariantInternedStr = 4,
        }
        private VariantOneofCase variantCase_ = VariantOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VariantOneofCase VariantCase {
          get { return variantCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVariant() {
          variantCase_ = VariantOneofCase.None;
          variant_ = null;
        }

        private object binder_;
        /// <summary>Enum of possible cases for the "binder" oneof.</summary>
        public enum BinderOneofCase {
          None = 0,
          BinderStr = 3,
          BinderInternedStr = 5,
        }
        private BinderOneofCase binderCase_ = BinderOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BinderOneofCase BinderCase {
          get { return binderCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBinder() {
          binderCase_ = BinderOneofCase.None;
          binder_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Variant);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Variant other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Con, other.Con)) return false;
          if (VariantStr != other.VariantStr) return false;
          if (VariantInternedStr != other.VariantInternedStr) return false;
          if (BinderStr != other.BinderStr) return false;
          if (BinderInternedStr != other.BinderInternedStr) return false;
          if (VariantCase != other.VariantCase) return false;
          if (BinderCase != other.BinderCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (con_ != null) hash ^= Con.GetHashCode();
          if (variantCase_ == VariantOneofCase.VariantStr) hash ^= VariantStr.GetHashCode();
          if (variantCase_ == VariantOneofCase.VariantInternedStr) hash ^= VariantInternedStr.GetHashCode();
          if (binderCase_ == BinderOneofCase.BinderStr) hash ^= BinderStr.GetHashCode();
          if (binderCase_ == BinderOneofCase.BinderInternedStr) hash ^= BinderInternedStr.GetHashCode();
          hash ^= (int) variantCase_;
          hash ^= (int) binderCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (con_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Con);
          }
          if (variantCase_ == VariantOneofCase.VariantStr) {
            output.WriteRawTag(18);
            output.WriteString(VariantStr);
          }
          if (binderCase_ == BinderOneofCase.BinderStr) {
            output.WriteRawTag(26);
            output.WriteString(BinderStr);
          }
          if (variantCase_ == VariantOneofCase.VariantInternedStr) {
            output.WriteRawTag(32);
            output.WriteInt32(VariantInternedStr);
          }
          if (binderCase_ == BinderOneofCase.BinderInternedStr) {
            output.WriteRawTag(40);
            output.WriteInt32(BinderInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (con_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Con);
          }
          if (variantCase_ == VariantOneofCase.VariantStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantStr);
          }
          if (variantCase_ == VariantOneofCase.VariantInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VariantInternedStr);
          }
          if (binderCase_ == BinderOneofCase.BinderStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BinderStr);
          }
          if (binderCase_ == BinderOneofCase.BinderInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BinderInternedStr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Variant other) {
          if (other == null) {
            return;
          }
          if (other.con_ != null) {
            if (con_ == null) {
              Con = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
            }
            Con.MergeFrom(other.Con);
          }
          switch (other.VariantCase) {
            case VariantOneofCase.VariantStr:
              VariantStr = other.VariantStr;
              break;
            case VariantOneofCase.VariantInternedStr:
              VariantInternedStr = other.VariantInternedStr;
              break;
          }

          switch (other.BinderCase) {
            case BinderOneofCase.BinderStr:
              BinderStr = other.BinderStr;
              break;
            case BinderOneofCase.BinderInternedStr:
              BinderInternedStr = other.BinderInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (con_ == null) {
                  Con = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
                }
                input.ReadMessage(Con);
                break;
              }
              case 18: {
                VariantStr = input.ReadString();
                break;
              }
              case 26: {
                BinderStr = input.ReadString();
                break;
              }
              case 32: {
                VariantInternedStr = input.ReadInt32();
                break;
              }
              case 40: {
                BinderInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Enum pattern
      /// *Available in versions >= 1.6*
      /// </summary>
      public sealed partial class Enum : pb::IMessage<Enum> {
        private static readonly pb::MessageParser<Enum> _parser = new pb::MessageParser<Enum>(() => new Enum());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Enum> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Enum() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Enum(Enum other) : this() {
          con_ = other.con_ != null ? other.con_.Clone() : null;
          switch (other.ConstructorCase) {
            case ConstructorOneofCase.ConstructorStr:
              ConstructorStr = other.ConstructorStr;
              break;
            case ConstructorOneofCase.ConstructorInternedStr:
              ConstructorInternedStr = other.ConstructorInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Enum Clone() {
          return new Enum(this);
        }

        /// <summary>Field number for the "con" field.</summary>
        public const int ConFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName con_;
        /// <summary>
        /// name of the type constructor
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName Con {
          get { return con_; }
          set {
            con_ = value;
          }
        }

        /// <summary>Field number for the "constructor_str" field.</summary>
        public const int ConstructorStrFieldNumber = 2;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ConstructorStr {
          get { return constructorCase_ == ConstructorOneofCase.ConstructorStr ? (string) constructor_ : ""; }
          set {
            constructor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            constructorCase_ = ConstructorOneofCase.ConstructorStr;
          }
        }

        /// <summary>Field number for the "constructor_interned_str" field.</summary>
        public const int ConstructorInternedStrFieldNumber = 3;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ConstructorInternedStr {
          get { return constructorCase_ == ConstructorOneofCase.ConstructorInternedStr ? (int) constructor_ : 0; }
          set {
            constructor_ = value;
            constructorCase_ = ConstructorOneofCase.ConstructorInternedStr;
          }
        }

        private object constructor_;
        /// <summary>Enum of possible cases for the "constructor" oneof.</summary>
        public enum ConstructorOneofCase {
          None = 0,
          ConstructorStr = 2,
          ConstructorInternedStr = 3,
        }
        private ConstructorOneofCase constructorCase_ = ConstructorOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConstructorOneofCase ConstructorCase {
          get { return constructorCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearConstructor() {
          constructorCase_ = ConstructorOneofCase.None;
          constructor_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Enum);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Enum other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Con, other.Con)) return false;
          if (ConstructorStr != other.ConstructorStr) return false;
          if (ConstructorInternedStr != other.ConstructorInternedStr) return false;
          if (ConstructorCase != other.ConstructorCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (con_ != null) hash ^= Con.GetHashCode();
          if (constructorCase_ == ConstructorOneofCase.ConstructorStr) hash ^= ConstructorStr.GetHashCode();
          if (constructorCase_ == ConstructorOneofCase.ConstructorInternedStr) hash ^= ConstructorInternedStr.GetHashCode();
          hash ^= (int) constructorCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (con_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Con);
          }
          if (constructorCase_ == ConstructorOneofCase.ConstructorStr) {
            output.WriteRawTag(18);
            output.WriteString(ConstructorStr);
          }
          if (constructorCase_ == ConstructorOneofCase.ConstructorInternedStr) {
            output.WriteRawTag(24);
            output.WriteInt32(ConstructorInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (con_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Con);
          }
          if (constructorCase_ == ConstructorOneofCase.ConstructorStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ConstructorStr);
          }
          if (constructorCase_ == ConstructorOneofCase.ConstructorInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConstructorInternedStr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Enum other) {
          if (other == null) {
            return;
          }
          if (other.con_ != null) {
            if (con_ == null) {
              Con = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
            }
            Con.MergeFrom(other.Con);
          }
          switch (other.ConstructorCase) {
            case ConstructorOneofCase.ConstructorStr:
              ConstructorStr = other.ConstructorStr;
              break;
            case ConstructorOneofCase.ConstructorInternedStr:
              ConstructorInternedStr = other.ConstructorInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (con_ == null) {
                  Con = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
                }
                input.ReadMessage(Con);
                break;
              }
              case 18: {
                ConstructorStr = input.ReadString();
                break;
              }
              case 24: {
                ConstructorInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Non empty list pattern
      /// </summary>
      public sealed partial class Cons : pb::IMessage<Cons> {
        private static readonly pb::MessageParser<Cons> _parser = new pb::MessageParser<Cons>(() => new Cons());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Cons> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons(Cons other) : this() {
          switch (other.VarHeadCase) {
            case VarHeadOneofCase.VarHeadStr:
              VarHeadStr = other.VarHeadStr;
              break;
            case VarHeadOneofCase.VarHeadInternedStr:
              VarHeadInternedStr = other.VarHeadInternedStr;
              break;
          }

          switch (other.VarTailCase) {
            case VarTailOneofCase.VarTailStr:
              VarTailStr = other.VarTailStr;
              break;
            case VarTailOneofCase.VarTailInternedStr:
              VarTailInternedStr = other.VarTailInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cons Clone() {
          return new Cons(this);
        }

        /// <summary>Field number for the "var_head_str" field.</summary>
        public const int VarHeadStrFieldNumber = 1;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VarHeadStr {
          get { return varHeadCase_ == VarHeadOneofCase.VarHeadStr ? (string) varHead_ : ""; }
          set {
            varHead_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            varHeadCase_ = VarHeadOneofCase.VarHeadStr;
          }
        }

        /// <summary>Field number for the "var_head_interned_str" field.</summary>
        public const int VarHeadInternedStrFieldNumber = 3;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VarHeadInternedStr {
          get { return varHeadCase_ == VarHeadOneofCase.VarHeadInternedStr ? (int) varHead_ : 0; }
          set {
            varHead_ = value;
            varHeadCase_ = VarHeadOneofCase.VarHeadInternedStr;
          }
        }

        /// <summary>Field number for the "var_tail_str" field.</summary>
        public const int VarTailStrFieldNumber = 2;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VarTailStr {
          get { return varTailCase_ == VarTailOneofCase.VarTailStr ? (string) varTail_ : ""; }
          set {
            varTail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            varTailCase_ = VarTailOneofCase.VarTailStr;
          }
        }

        /// <summary>Field number for the "var_tail_interned_str" field.</summary>
        public const int VarTailInternedStrFieldNumber = 4;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VarTailInternedStr {
          get { return varTailCase_ == VarTailOneofCase.VarTailInternedStr ? (int) varTail_ : 0; }
          set {
            varTail_ = value;
            varTailCase_ = VarTailOneofCase.VarTailInternedStr;
          }
        }

        private object varHead_;
        /// <summary>Enum of possible cases for the "var_head" oneof.</summary>
        public enum VarHeadOneofCase {
          None = 0,
          VarHeadStr = 1,
          VarHeadInternedStr = 3,
        }
        private VarHeadOneofCase varHeadCase_ = VarHeadOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VarHeadOneofCase VarHeadCase {
          get { return varHeadCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVarHead() {
          varHeadCase_ = VarHeadOneofCase.None;
          varHead_ = null;
        }

        private object varTail_;
        /// <summary>Enum of possible cases for the "var_tail" oneof.</summary>
        public enum VarTailOneofCase {
          None = 0,
          VarTailStr = 2,
          VarTailInternedStr = 4,
        }
        private VarTailOneofCase varTailCase_ = VarTailOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VarTailOneofCase VarTailCase {
          get { return varTailCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVarTail() {
          varTailCase_ = VarTailOneofCase.None;
          varTail_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Cons);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Cons other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (VarHeadStr != other.VarHeadStr) return false;
          if (VarHeadInternedStr != other.VarHeadInternedStr) return false;
          if (VarTailStr != other.VarTailStr) return false;
          if (VarTailInternedStr != other.VarTailInternedStr) return false;
          if (VarHeadCase != other.VarHeadCase) return false;
          if (VarTailCase != other.VarTailCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (varHeadCase_ == VarHeadOneofCase.VarHeadStr) hash ^= VarHeadStr.GetHashCode();
          if (varHeadCase_ == VarHeadOneofCase.VarHeadInternedStr) hash ^= VarHeadInternedStr.GetHashCode();
          if (varTailCase_ == VarTailOneofCase.VarTailStr) hash ^= VarTailStr.GetHashCode();
          if (varTailCase_ == VarTailOneofCase.VarTailInternedStr) hash ^= VarTailInternedStr.GetHashCode();
          hash ^= (int) varHeadCase_;
          hash ^= (int) varTailCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (varHeadCase_ == VarHeadOneofCase.VarHeadStr) {
            output.WriteRawTag(10);
            output.WriteString(VarHeadStr);
          }
          if (varTailCase_ == VarTailOneofCase.VarTailStr) {
            output.WriteRawTag(18);
            output.WriteString(VarTailStr);
          }
          if (varHeadCase_ == VarHeadOneofCase.VarHeadInternedStr) {
            output.WriteRawTag(24);
            output.WriteInt32(VarHeadInternedStr);
          }
          if (varTailCase_ == VarTailOneofCase.VarTailInternedStr) {
            output.WriteRawTag(32);
            output.WriteInt32(VarTailInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (varHeadCase_ == VarHeadOneofCase.VarHeadStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VarHeadStr);
          }
          if (varHeadCase_ == VarHeadOneofCase.VarHeadInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarHeadInternedStr);
          }
          if (varTailCase_ == VarTailOneofCase.VarTailStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VarTailStr);
          }
          if (varTailCase_ == VarTailOneofCase.VarTailInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarTailInternedStr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Cons other) {
          if (other == null) {
            return;
          }
          switch (other.VarHeadCase) {
            case VarHeadOneofCase.VarHeadStr:
              VarHeadStr = other.VarHeadStr;
              break;
            case VarHeadOneofCase.VarHeadInternedStr:
              VarHeadInternedStr = other.VarHeadInternedStr;
              break;
          }

          switch (other.VarTailCase) {
            case VarTailOneofCase.VarTailStr:
              VarTailStr = other.VarTailStr;
              break;
            case VarTailOneofCase.VarTailInternedStr:
              VarTailInternedStr = other.VarTailInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                VarHeadStr = input.ReadString();
                break;
              }
              case 18: {
                VarTailStr = input.ReadString();
                break;
              }
              case 24: {
                VarHeadInternedStr = input.ReadInt32();
                break;
              }
              case 32: {
                VarTailInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Non empty option patterm
      /// *Available in versions >= 1.1*
      /// </summary>
      public sealed partial class OptionalSome : pb::IMessage<OptionalSome> {
        private static readonly pb::MessageParser<OptionalSome> _parser = new pb::MessageParser<OptionalSome>(() => new OptionalSome());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OptionalSome> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome(OptionalSome other) : this() {
          switch (other.VarBodyCase) {
            case VarBodyOneofCase.VarBodyStr:
              VarBodyStr = other.VarBodyStr;
              break;
            case VarBodyOneofCase.VarBodyInternedStr:
              VarBodyInternedStr = other.VarBodyInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionalSome Clone() {
          return new OptionalSome(this);
        }

        /// <summary>Field number for the "var_body_str" field.</summary>
        public const int VarBodyStrFieldNumber = 1;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VarBodyStr {
          get { return varBodyCase_ == VarBodyOneofCase.VarBodyStr ? (string) varBody_ : ""; }
          set {
            varBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            varBodyCase_ = VarBodyOneofCase.VarBodyStr;
          }
        }

        /// <summary>Field number for the "var_body_interned_str" field.</summary>
        public const int VarBodyInternedStrFieldNumber = 2;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VarBodyInternedStr {
          get { return varBodyCase_ == VarBodyOneofCase.VarBodyInternedStr ? (int) varBody_ : 0; }
          set {
            varBody_ = value;
            varBodyCase_ = VarBodyOneofCase.VarBodyInternedStr;
          }
        }

        private object varBody_;
        /// <summary>Enum of possible cases for the "var_body" oneof.</summary>
        public enum VarBodyOneofCase {
          None = 0,
          VarBodyStr = 1,
          VarBodyInternedStr = 2,
        }
        private VarBodyOneofCase varBodyCase_ = VarBodyOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public VarBodyOneofCase VarBodyCase {
          get { return varBodyCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVarBody() {
          varBodyCase_ = VarBodyOneofCase.None;
          varBody_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OptionalSome);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OptionalSome other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (VarBodyStr != other.VarBodyStr) return false;
          if (VarBodyInternedStr != other.VarBodyInternedStr) return false;
          if (VarBodyCase != other.VarBodyCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (varBodyCase_ == VarBodyOneofCase.VarBodyStr) hash ^= VarBodyStr.GetHashCode();
          if (varBodyCase_ == VarBodyOneofCase.VarBodyInternedStr) hash ^= VarBodyInternedStr.GetHashCode();
          hash ^= (int) varBodyCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (varBodyCase_ == VarBodyOneofCase.VarBodyStr) {
            output.WriteRawTag(10);
            output.WriteString(VarBodyStr);
          }
          if (varBodyCase_ == VarBodyOneofCase.VarBodyInternedStr) {
            output.WriteRawTag(16);
            output.WriteInt32(VarBodyInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (varBodyCase_ == VarBodyOneofCase.VarBodyStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(VarBodyStr);
          }
          if (varBodyCase_ == VarBodyOneofCase.VarBodyInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarBodyInternedStr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OptionalSome other) {
          if (other == null) {
            return;
          }
          switch (other.VarBodyCase) {
            case VarBodyOneofCase.VarBodyStr:
              VarBodyStr = other.VarBodyStr;
              break;
            case VarBodyOneofCase.VarBodyInternedStr:
              VarBodyInternedStr = other.VarBodyInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                VarBodyStr = input.ReadString();
                break;
              }
              case 16: {
                VarBodyInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Case : pb::IMessage<Case> {
    private static readonly pb::MessageParser<Case> _parser = new pb::MessageParser<Case>(() => new Case());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Case> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Case() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Case(Case other) : this() {
      scrut_ = other.scrut_ != null ? other.scrut_.Clone() : null;
      alts_ = other.alts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Case Clone() {
      return new Case(this);
    }

    /// <summary>Field number for the "scrut" field.</summary>
    public const int ScrutFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr scrut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Scrut {
      get { return scrut_; }
      set {
        scrut_ = value;
      }
    }

    /// <summary>Field number for the "alts" field.</summary>
    public const int AltsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt> _repeated_alts_codec
        = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt> alts_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.CaseAlt> Alts {
      get { return alts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Case);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Case other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scrut, other.Scrut)) return false;
      if(!alts_.Equals(other.alts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scrut_ != null) hash ^= Scrut.GetHashCode();
      hash ^= alts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scrut_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scrut);
      }
      alts_.WriteTo(output, _repeated_alts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scrut_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scrut);
      }
      size += alts_.CalculateSize(_repeated_alts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Case other) {
      if (other == null) {
        return;
      }
      if (other.scrut_ != null) {
        if (scrut_ == null) {
          Scrut = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Scrut.MergeFrom(other.Scrut);
      }
      alts_.Add(other.alts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (scrut_ == null) {
              Scrut = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Scrut);
            break;
          }
          case 18: {
            alts_.AddEntriesFrom(input, _repeated_alts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A block of bindings and an expression.
  /// Encodes a sequence of binds in e.g. a let or update block.
  /// </summary>
  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      bindings_ = other.bindings_.Clone();
      body_ = other.body_ != null ? other.body_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "bindings" field.</summary>
    public const int BindingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Binding> _repeated_bindings_codec
        = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Binding.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Binding> bindings_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Binding>();
    /// <summary>
    /// *Must be non-empty*
    /// Bindings
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Binding> Bindings {
      get { return bindings_; }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bindings_.Equals(other.bindings_)) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bindings_.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bindings_.WriteTo(output, _repeated_bindings_codec);
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bindings_.CalculateSize(_repeated_bindings_codec);
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      bindings_.Add(other.bindings_);
      if (other.body_ != null) {
        if (body_ == null) {
          Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Body.MergeFrom(other.Body);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bindings_.AddEntriesFrom(input, _repeated_bindings_codec);
            break;
          }
          case 18: {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Body);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Pure statement either scenario or update
  /// </summary>
  public sealed partial class Pure : pb::IMessage<Pure> {
    private static readonly pb::MessageParser<Pure> _parser = new pb::MessageParser<Pure>(() => new Pure());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pure(Pure other) : this() {
      type_ = other.type_ != null ? other.type_.Clone() : null;
      expr_ = other.expr_ != null ? other.expr_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pure Clone() {
      return new Pure(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "expr" field.</summary>
    public const int ExprFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr expr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Expr {
      get { return expr_; }
      set {
        expr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Type, other.Type)) return false;
      if (!object.Equals(Expr, other.Expr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (type_ != null) hash ^= Type.GetHashCode();
      if (expr_ != null) hash ^= Expr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (type_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Type);
      }
      if (expr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (expr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pure other) {
      if (other == null) {
        return;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.expr_ != null) {
        if (expr_ == null) {
          Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Expr.MergeFrom(other.Expr);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            input.ReadMessage(Type);
            break;
          }
          case 18: {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Expr);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Update : pb::IMessage<Update> {
    private static readonly pb::MessageParser<Update> _parser = new pb::MessageParser<Update>(() => new Update());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update(Update other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Pure:
          Pure = other.Pure.Clone();
          break;
        case SumOneofCase.Block:
          Block = other.Block.Clone();
          break;
        case SumOneofCase.Create:
          Create = other.Create.Clone();
          break;
        case SumOneofCase.Exercise:
          Exercise = other.Exercise.Clone();
          break;
        case SumOneofCase.Fetch:
          Fetch = other.Fetch.Clone();
          break;
        case SumOneofCase.GetTime:
          GetTime = other.GetTime.Clone();
          break;
        case SumOneofCase.LookupByKey:
          LookupByKey = other.LookupByKey.Clone();
          break;
        case SumOneofCase.FetchByKey:
          FetchByKey = other.FetchByKey.Clone();
          break;
        case SumOneofCase.EmbedExpr:
          EmbedExpr = other.EmbedExpr.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update Clone() {
      return new Update(this);
    }

    /// <summary>Field number for the "pure" field.</summary>
    public const int PureFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure Pure {
      get { return sumCase_ == SumOneofCase.Pure ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Pure;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block Block {
      get { return sumCase_ == SumOneofCase.Block ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Block;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Create Create {
      get { return sumCase_ == SumOneofCase.Create ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Create) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Create;
      }
    }

    /// <summary>Field number for the "exercise" field.</summary>
    public const int ExerciseFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Exercise Exercise {
      get { return sumCase_ == SumOneofCase.Exercise ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Exercise) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Exercise;
      }
    }

    /// <summary>Field number for the "fetch" field.</summary>
    public const int FetchFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Fetch Fetch {
      get { return sumCase_ == SumOneofCase.Fetch ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Fetch) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Fetch;
      }
    }

    /// <summary>Field number for the "get_time" field.</summary>
    public const int GetTimeFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit GetTime {
      get { return sumCase_ == SumOneofCase.GetTime ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.GetTime;
      }
    }

    /// <summary>Field number for the "lookup_by_key" field.</summary>
    public const int LookupByKeyFieldNumber = 8;
    /// <summary>
    /// *Available in versions >= 1.2*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey LookupByKey {
      get { return sumCase_ == SumOneofCase.LookupByKey ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.LookupByKey;
      }
    }

    /// <summary>Field number for the "fetch_by_key" field.</summary>
    public const int FetchByKeyFieldNumber = 9;
    /// <summary>
    /// *Available in versions >= 1.2*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey FetchByKey {
      get { return sumCase_ == SumOneofCase.FetchByKey ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.FetchByKey;
      }
    }

    /// <summary>Field number for the "embed_expr" field.</summary>
    public const int EmbedExprFieldNumber = 7;
    /// <summary>
    /// see similar constructor in `Scenario` on why this is useful.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.EmbedExpr EmbedExpr {
      get { return sumCase_ == SumOneofCase.EmbedExpr ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.EmbedExpr) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.EmbedExpr;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Pure = 1,
      Block = 2,
      Create = 3,
      Exercise = 4,
      Fetch = 5,
      GetTime = 6,
      LookupByKey = 8,
      FetchByKey = 9,
      EmbedExpr = 7,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pure, other.Pure)) return false;
      if (!object.Equals(Block, other.Block)) return false;
      if (!object.Equals(Create, other.Create)) return false;
      if (!object.Equals(Exercise, other.Exercise)) return false;
      if (!object.Equals(Fetch, other.Fetch)) return false;
      if (!object.Equals(GetTime, other.GetTime)) return false;
      if (!object.Equals(LookupByKey, other.LookupByKey)) return false;
      if (!object.Equals(FetchByKey, other.FetchByKey)) return false;
      if (!object.Equals(EmbedExpr, other.EmbedExpr)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Pure) hash ^= Pure.GetHashCode();
      if (sumCase_ == SumOneofCase.Block) hash ^= Block.GetHashCode();
      if (sumCase_ == SumOneofCase.Create) hash ^= Create.GetHashCode();
      if (sumCase_ == SumOneofCase.Exercise) hash ^= Exercise.GetHashCode();
      if (sumCase_ == SumOneofCase.Fetch) hash ^= Fetch.GetHashCode();
      if (sumCase_ == SumOneofCase.GetTime) hash ^= GetTime.GetHashCode();
      if (sumCase_ == SumOneofCase.LookupByKey) hash ^= LookupByKey.GetHashCode();
      if (sumCase_ == SumOneofCase.FetchByKey) hash ^= FetchByKey.GetHashCode();
      if (sumCase_ == SumOneofCase.EmbedExpr) hash ^= EmbedExpr.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Pure) {
        output.WriteRawTag(10);
        output.WriteMessage(Pure);
      }
      if (sumCase_ == SumOneofCase.Block) {
        output.WriteRawTag(18);
        output.WriteMessage(Block);
      }
      if (sumCase_ == SumOneofCase.Create) {
        output.WriteRawTag(26);
        output.WriteMessage(Create);
      }
      if (sumCase_ == SumOneofCase.Exercise) {
        output.WriteRawTag(34);
        output.WriteMessage(Exercise);
      }
      if (sumCase_ == SumOneofCase.Fetch) {
        output.WriteRawTag(42);
        output.WriteMessage(Fetch);
      }
      if (sumCase_ == SumOneofCase.GetTime) {
        output.WriteRawTag(50);
        output.WriteMessage(GetTime);
      }
      if (sumCase_ == SumOneofCase.EmbedExpr) {
        output.WriteRawTag(58);
        output.WriteMessage(EmbedExpr);
      }
      if (sumCase_ == SumOneofCase.LookupByKey) {
        output.WriteRawTag(66);
        output.WriteMessage(LookupByKey);
      }
      if (sumCase_ == SumOneofCase.FetchByKey) {
        output.WriteRawTag(74);
        output.WriteMessage(FetchByKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Pure) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pure);
      }
      if (sumCase_ == SumOneofCase.Block) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (sumCase_ == SumOneofCase.Create) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Create);
      }
      if (sumCase_ == SumOneofCase.Exercise) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exercise);
      }
      if (sumCase_ == SumOneofCase.Fetch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fetch);
      }
      if (sumCase_ == SumOneofCase.GetTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetTime);
      }
      if (sumCase_ == SumOneofCase.LookupByKey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LookupByKey);
      }
      if (sumCase_ == SumOneofCase.FetchByKey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FetchByKey);
      }
      if (sumCase_ == SumOneofCase.EmbedExpr) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmbedExpr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Pure:
          if (Pure == null) {
            Pure = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure();
          }
          Pure.MergeFrom(other.Pure);
          break;
        case SumOneofCase.Block:
          if (Block == null) {
            Block = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block();
          }
          Block.MergeFrom(other.Block);
          break;
        case SumOneofCase.Create:
          if (Create == null) {
            Create = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Create();
          }
          Create.MergeFrom(other.Create);
          break;
        case SumOneofCase.Exercise:
          if (Exercise == null) {
            Exercise = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Exercise();
          }
          Exercise.MergeFrom(other.Exercise);
          break;
        case SumOneofCase.Fetch:
          if (Fetch == null) {
            Fetch = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Fetch();
          }
          Fetch.MergeFrom(other.Fetch);
          break;
        case SumOneofCase.GetTime:
          if (GetTime == null) {
            GetTime = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
          }
          GetTime.MergeFrom(other.GetTime);
          break;
        case SumOneofCase.LookupByKey:
          if (LookupByKey == null) {
            LookupByKey = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey();
          }
          LookupByKey.MergeFrom(other.LookupByKey);
          break;
        case SumOneofCase.FetchByKey:
          if (FetchByKey == null) {
            FetchByKey = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey();
          }
          FetchByKey.MergeFrom(other.FetchByKey);
          break;
        case SumOneofCase.EmbedExpr:
          if (EmbedExpr == null) {
            EmbedExpr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.EmbedExpr();
          }
          EmbedExpr.MergeFrom(other.EmbedExpr);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure();
            if (sumCase_ == SumOneofCase.Pure) {
              subBuilder.MergeFrom(Pure);
            }
            input.ReadMessage(subBuilder);
            Pure = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block();
            if (sumCase_ == SumOneofCase.Block) {
              subBuilder.MergeFrom(Block);
            }
            input.ReadMessage(subBuilder);
            Block = subBuilder;
            break;
          }
          case 26: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Create subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Create();
            if (sumCase_ == SumOneofCase.Create) {
              subBuilder.MergeFrom(Create);
            }
            input.ReadMessage(subBuilder);
            Create = subBuilder;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Exercise subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Exercise();
            if (sumCase_ == SumOneofCase.Exercise) {
              subBuilder.MergeFrom(Exercise);
            }
            input.ReadMessage(subBuilder);
            Exercise = subBuilder;
            break;
          }
          case 42: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Fetch subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.Fetch();
            if (sumCase_ == SumOneofCase.Fetch) {
              subBuilder.MergeFrom(Fetch);
            }
            input.ReadMessage(subBuilder);
            Fetch = subBuilder;
            break;
          }
          case 50: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.GetTime) {
              subBuilder.MergeFrom(GetTime);
            }
            input.ReadMessage(subBuilder);
            GetTime = subBuilder;
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.EmbedExpr subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.EmbedExpr();
            if (sumCase_ == SumOneofCase.EmbedExpr) {
              subBuilder.MergeFrom(EmbedExpr);
            }
            input.ReadMessage(subBuilder);
            EmbedExpr = subBuilder;
            break;
          }
          case 66: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey();
            if (sumCase_ == SumOneofCase.LookupByKey) {
              subBuilder.MergeFrom(LookupByKey);
            }
            input.ReadMessage(subBuilder);
            LookupByKey = subBuilder;
            break;
          }
          case 74: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Types.RetrieveByKey();
            if (sumCase_ == SumOneofCase.FetchByKey) {
              subBuilder.MergeFrom(FetchByKey);
            }
            input.ReadMessage(subBuilder);
            FetchByKey = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Update message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Create Update
      /// </summary>
      public sealed partial class Create : pb::IMessage<Create> {
        private static readonly pb::MessageParser<Create> _parser = new pb::MessageParser<Create>(() => new Create());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Create> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Create() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Create(Create other) : this() {
          template_ = other.template_ != null ? other.template_.Clone() : null;
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Create Clone() {
          return new Create(this);
        }

        /// <summary>Field number for the "template" field.</summary>
        public const int TemplateFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName template_;
        /// <summary>
        /// Template type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName Template {
          get { return template_; }
          set {
            template_ = value;
          }
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr expr_;
        /// <summary>
        /// Template argument
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Create);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Create other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Template, other.Template)) return false;
          if (!object.Equals(Expr, other.Expr)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (template_ != null) hash ^= Template.GetHashCode();
          if (expr_ != null) hash ^= Expr.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (template_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Template);
          }
          if (expr_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (template_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
          }
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Create other) {
          if (other == null) {
            return;
          }
          if (other.template_ != null) {
            if (template_ == null) {
              Template = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
            }
            Template.MergeFrom(other.Template);
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Expr.MergeFrom(other.Expr);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (template_ == null) {
                  Template = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
                }
                input.ReadMessage(Template);
                break;
              }
              case 18: {
                if (expr_ == null) {
                  Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Expr);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Exercise Update
      /// </summary>
      public sealed partial class Exercise : pb::IMessage<Exercise> {
        private static readonly pb::MessageParser<Exercise> _parser = new pb::MessageParser<Exercise>(() => new Exercise());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Exercise> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exercise() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exercise(Exercise other) : this() {
          template_ = other.template_ != null ? other.template_.Clone() : null;
          cid_ = other.cid_ != null ? other.cid_.Clone() : null;
          actor_ = other.actor_ != null ? other.actor_.Clone() : null;
          arg_ = other.arg_ != null ? other.arg_.Clone() : null;
          switch (other.ChoiceCase) {
            case ChoiceOneofCase.ChoiceStr:
              ChoiceStr = other.ChoiceStr;
              break;
            case ChoiceOneofCase.ChoiceInternedStr:
              ChoiceInternedStr = other.ChoiceInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exercise Clone() {
          return new Exercise(this);
        }

        /// <summary>Field number for the "template" field.</summary>
        public const int TemplateFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName template_;
        /// <summary>
        /// Template type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName Template {
          get { return template_; }
          set {
            template_ = value;
          }
        }

        /// <summary>Field number for the "choice_str" field.</summary>
        public const int ChoiceStrFieldNumber = 2;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChoiceStr {
          get { return choiceCase_ == ChoiceOneofCase.ChoiceStr ? (string) choice_ : ""; }
          set {
            choice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            choiceCase_ = ChoiceOneofCase.ChoiceStr;
          }
        }

        /// <summary>Field number for the "choice_interned_str" field.</summary>
        public const int ChoiceInternedStrFieldNumber = 6;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ChoiceInternedStr {
          get { return choiceCase_ == ChoiceOneofCase.ChoiceInternedStr ? (int) choice_ : 0; }
          set {
            choice_ = value;
            choiceCase_ = ChoiceOneofCase.ChoiceInternedStr;
          }
        }

        /// <summary>Field number for the "cid" field.</summary>
        public const int CidFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr cid_;
        /// <summary>
        /// contract id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Cid {
          get { return cid_; }
          set {
            cid_ = value;
          }
        }

        /// <summary>Field number for the "actor" field.</summary>
        public const int ActorFieldNumber = 4;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr actor_;
        /// <summary>
        /// actors
        /// *optional since version 1.5*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Actor {
          get { return actor_; }
          set {
            actor_ = value;
          }
        }

        /// <summary>Field number for the "arg" field.</summary>
        public const int ArgFieldNumber = 5;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr arg_;
        /// <summary>
        /// argument
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Arg {
          get { return arg_; }
          set {
            arg_ = value;
          }
        }

        private object choice_;
        /// <summary>Enum of possible cases for the "choice" oneof.</summary>
        public enum ChoiceOneofCase {
          None = 0,
          ChoiceStr = 2,
          ChoiceInternedStr = 6,
        }
        private ChoiceOneofCase choiceCase_ = ChoiceOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChoiceOneofCase ChoiceCase {
          get { return choiceCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChoice() {
          choiceCase_ = ChoiceOneofCase.None;
          choice_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Exercise);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Exercise other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Template, other.Template)) return false;
          if (ChoiceStr != other.ChoiceStr) return false;
          if (ChoiceInternedStr != other.ChoiceInternedStr) return false;
          if (!object.Equals(Cid, other.Cid)) return false;
          if (!object.Equals(Actor, other.Actor)) return false;
          if (!object.Equals(Arg, other.Arg)) return false;
          if (ChoiceCase != other.ChoiceCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (template_ != null) hash ^= Template.GetHashCode();
          if (choiceCase_ == ChoiceOneofCase.ChoiceStr) hash ^= ChoiceStr.GetHashCode();
          if (choiceCase_ == ChoiceOneofCase.ChoiceInternedStr) hash ^= ChoiceInternedStr.GetHashCode();
          if (cid_ != null) hash ^= Cid.GetHashCode();
          if (actor_ != null) hash ^= Actor.GetHashCode();
          if (arg_ != null) hash ^= Arg.GetHashCode();
          hash ^= (int) choiceCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (template_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Template);
          }
          if (choiceCase_ == ChoiceOneofCase.ChoiceStr) {
            output.WriteRawTag(18);
            output.WriteString(ChoiceStr);
          }
          if (cid_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Cid);
          }
          if (actor_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Actor);
          }
          if (arg_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Arg);
          }
          if (choiceCase_ == ChoiceOneofCase.ChoiceInternedStr) {
            output.WriteRawTag(48);
            output.WriteInt32(ChoiceInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (template_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
          }
          if (choiceCase_ == ChoiceOneofCase.ChoiceStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChoiceStr);
          }
          if (choiceCase_ == ChoiceOneofCase.ChoiceInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChoiceInternedStr);
          }
          if (cid_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cid);
          }
          if (actor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Actor);
          }
          if (arg_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arg);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Exercise other) {
          if (other == null) {
            return;
          }
          if (other.template_ != null) {
            if (template_ == null) {
              Template = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
            }
            Template.MergeFrom(other.Template);
          }
          if (other.cid_ != null) {
            if (cid_ == null) {
              Cid = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Cid.MergeFrom(other.Cid);
          }
          if (other.actor_ != null) {
            if (actor_ == null) {
              Actor = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Actor.MergeFrom(other.Actor);
          }
          if (other.arg_ != null) {
            if (arg_ == null) {
              Arg = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Arg.MergeFrom(other.Arg);
          }
          switch (other.ChoiceCase) {
            case ChoiceOneofCase.ChoiceStr:
              ChoiceStr = other.ChoiceStr;
              break;
            case ChoiceOneofCase.ChoiceInternedStr:
              ChoiceInternedStr = other.ChoiceInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (template_ == null) {
                  Template = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
                }
                input.ReadMessage(Template);
                break;
              }
              case 18: {
                ChoiceStr = input.ReadString();
                break;
              }
              case 26: {
                if (cid_ == null) {
                  Cid = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Cid);
                break;
              }
              case 34: {
                if (actor_ == null) {
                  Actor = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Actor);
                break;
              }
              case 42: {
                if (arg_ == null) {
                  Arg = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Arg);
                break;
              }
              case 48: {
                ChoiceInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Fetch Update
      /// </summary>
      public sealed partial class Fetch : pb::IMessage<Fetch> {
        private static readonly pb::MessageParser<Fetch> _parser = new pb::MessageParser<Fetch>(() => new Fetch());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Fetch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fetch() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fetch(Fetch other) : this() {
          template_ = other.template_ != null ? other.template_.Clone() : null;
          cid_ = other.cid_ != null ? other.cid_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fetch Clone() {
          return new Fetch(this);
        }

        /// <summary>Field number for the "template" field.</summary>
        public const int TemplateFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName template_;
        /// <summary>
        /// Template type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName Template {
          get { return template_; }
          set {
            template_ = value;
          }
        }

        /// <summary>Field number for the "cid" field.</summary>
        public const int CidFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr cid_;
        /// <summary>
        /// contract id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Cid {
          get { return cid_; }
          set {
            cid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Fetch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Fetch other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Template, other.Template)) return false;
          if (!object.Equals(Cid, other.Cid)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (template_ != null) hash ^= Template.GetHashCode();
          if (cid_ != null) hash ^= Cid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (template_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Template);
          }
          if (cid_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Cid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (template_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
          }
          if (cid_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Fetch other) {
          if (other == null) {
            return;
          }
          if (other.template_ != null) {
            if (template_ == null) {
              Template = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
            }
            Template.MergeFrom(other.Template);
          }
          if (other.cid_ != null) {
            if (cid_ == null) {
              Cid = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Cid.MergeFrom(other.Cid);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (template_ == null) {
                  Template = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
                }
                input.ReadMessage(Template);
                break;
              }
              case 18: {
                if (cid_ == null) {
                  Cid = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Cid);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Embedded Expression Update
      /// </summary>
      public sealed partial class EmbedExpr : pb::IMessage<EmbedExpr> {
        private static readonly pb::MessageParser<EmbedExpr> _parser = new pb::MessageParser<EmbedExpr>(() => new EmbedExpr());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EmbedExpr> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr(EmbedExpr other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr Clone() {
          return new EmbedExpr(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
        /// <summary>
        /// Expression type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr body_;
        /// <summary>
        /// Expression body
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EmbedExpr);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EmbedExpr other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EmbedExpr other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Retrieve by key Update
      /// *Available in versions >= 1.2*
      /// </summary>
      public sealed partial class RetrieveByKey : pb::IMessage<RetrieveByKey> {
        private static readonly pb::MessageParser<RetrieveByKey> _parser = new pb::MessageParser<RetrieveByKey>(() => new RetrieveByKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RetrieveByKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Update.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetrieveByKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetrieveByKey(RetrieveByKey other) : this() {
          template_ = other.template_ != null ? other.template_.Clone() : null;
          key_ = other.key_ != null ? other.key_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetrieveByKey Clone() {
          return new RetrieveByKey(this);
        }

        /// <summary>Field number for the "template" field.</summary>
        public const int TemplateFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName template_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName Template {
          get { return template_; }
          set {
            template_ = value;
          }
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RetrieveByKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RetrieveByKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Template, other.Template)) return false;
          if (!object.Equals(Key, other.Key)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (template_ != null) hash ^= Template.GetHashCode();
          if (key_ != null) hash ^= Key.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (template_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Template);
          }
          if (key_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Key);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (template_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
          }
          if (key_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RetrieveByKey other) {
          if (other == null) {
            return;
          }
          if (other.template_ != null) {
            if (template_ == null) {
              Template = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
            }
            Template.MergeFrom(other.Template);
          }
          if (other.key_ != null) {
            if (key_ == null) {
              Key = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Key.MergeFrom(other.Key);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (template_ == null) {
                  Template = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeConName();
                }
                input.ReadMessage(Template);
                break;
              }
              case 18: {
                if (key_ == null) {
                  Key = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Key);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Scenario actions
  /// </summary>
  public sealed partial class Scenario : pb::IMessage<Scenario> {
    private static readonly pb::MessageParser<Scenario> _parser = new pb::MessageParser<Scenario>(() => new Scenario());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scenario> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenario() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenario(Scenario other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Pure:
          Pure = other.Pure.Clone();
          break;
        case SumOneofCase.Block:
          Block = other.Block.Clone();
          break;
        case SumOneofCase.Commit:
          Commit = other.Commit.Clone();
          break;
        case SumOneofCase.MustFailAt:
          MustFailAt = other.MustFailAt.Clone();
          break;
        case SumOneofCase.Pass:
          Pass = other.Pass.Clone();
          break;
        case SumOneofCase.GetTime:
          GetTime = other.GetTime.Clone();
          break;
        case SumOneofCase.GetParty:
          GetParty = other.GetParty.Clone();
          break;
        case SumOneofCase.EmbedExpr:
          EmbedExpr = other.EmbedExpr.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenario Clone() {
      return new Scenario(this);
    }

    /// <summary>Field number for the "pure" field.</summary>
    public const int PureFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure Pure {
      get { return sumCase_ == SumOneofCase.Pure ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Pure;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block Block {
      get { return sumCase_ == SumOneofCase.Block ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Block;
      }
    }

    /// <summary>Field number for the "commit" field.</summary>
    public const int CommitFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit Commit {
      get { return sumCase_ == SumOneofCase.Commit ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Commit;
      }
    }

    /// <summary>Field number for the "mustFailAt" field.</summary>
    public const int MustFailAtFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit MustFailAt {
      get { return sumCase_ == SumOneofCase.MustFailAt ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.MustFailAt;
      }
    }

    /// <summary>Field number for the "pass" field.</summary>
    public const int PassFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Pass {
      get { return sumCase_ == SumOneofCase.Pass ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Pass;
      }
    }

    /// <summary>Field number for the "get_time" field.</summary>
    public const int GetTimeFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit GetTime {
      get { return sumCase_ == SumOneofCase.GetTime ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.GetTime;
      }
    }

    /// <summary>Field number for the "get_party" field.</summary>
    public const int GetPartyFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr GetParty {
      get { return sumCase_ == SumOneofCase.GetParty ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.GetParty;
      }
    }

    /// <summary>Field number for the "embed_expr" field.</summary>
    public const int EmbedExprFieldNumber = 8;
    /// <summary>
    /// embed an expression of type Scenario. note that this construct is useful
    /// to explicitly mark the start of scenario execution, which is useful in
    /// top level definitions. for example if we hav
    ///
    /// def test : Scenario Unit = if &lt;blah> then &lt;this> else &lt;that>
    ///
    /// this is not a value, since it's headed with an `if`, but we can turn
    /// it into a value by wrapping the `if` with this constructor. in that
    /// case, the `if` will be executed every time the scenario runs --
    /// as expected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.EmbedExpr EmbedExpr {
      get { return sumCase_ == SumOneofCase.EmbedExpr ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.EmbedExpr) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.EmbedExpr;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Pure = 1,
      Block = 2,
      Commit = 3,
      MustFailAt = 4,
      Pass = 5,
      GetTime = 6,
      GetParty = 7,
      EmbedExpr = 8,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scenario);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scenario other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pure, other.Pure)) return false;
      if (!object.Equals(Block, other.Block)) return false;
      if (!object.Equals(Commit, other.Commit)) return false;
      if (!object.Equals(MustFailAt, other.MustFailAt)) return false;
      if (!object.Equals(Pass, other.Pass)) return false;
      if (!object.Equals(GetTime, other.GetTime)) return false;
      if (!object.Equals(GetParty, other.GetParty)) return false;
      if (!object.Equals(EmbedExpr, other.EmbedExpr)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Pure) hash ^= Pure.GetHashCode();
      if (sumCase_ == SumOneofCase.Block) hash ^= Block.GetHashCode();
      if (sumCase_ == SumOneofCase.Commit) hash ^= Commit.GetHashCode();
      if (sumCase_ == SumOneofCase.MustFailAt) hash ^= MustFailAt.GetHashCode();
      if (sumCase_ == SumOneofCase.Pass) hash ^= Pass.GetHashCode();
      if (sumCase_ == SumOneofCase.GetTime) hash ^= GetTime.GetHashCode();
      if (sumCase_ == SumOneofCase.GetParty) hash ^= GetParty.GetHashCode();
      if (sumCase_ == SumOneofCase.EmbedExpr) hash ^= EmbedExpr.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Pure) {
        output.WriteRawTag(10);
        output.WriteMessage(Pure);
      }
      if (sumCase_ == SumOneofCase.Block) {
        output.WriteRawTag(18);
        output.WriteMessage(Block);
      }
      if (sumCase_ == SumOneofCase.Commit) {
        output.WriteRawTag(26);
        output.WriteMessage(Commit);
      }
      if (sumCase_ == SumOneofCase.MustFailAt) {
        output.WriteRawTag(34);
        output.WriteMessage(MustFailAt);
      }
      if (sumCase_ == SumOneofCase.Pass) {
        output.WriteRawTag(42);
        output.WriteMessage(Pass);
      }
      if (sumCase_ == SumOneofCase.GetTime) {
        output.WriteRawTag(50);
        output.WriteMessage(GetTime);
      }
      if (sumCase_ == SumOneofCase.GetParty) {
        output.WriteRawTag(58);
        output.WriteMessage(GetParty);
      }
      if (sumCase_ == SumOneofCase.EmbedExpr) {
        output.WriteRawTag(66);
        output.WriteMessage(EmbedExpr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Pure) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pure);
      }
      if (sumCase_ == SumOneofCase.Block) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (sumCase_ == SumOneofCase.Commit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commit);
      }
      if (sumCase_ == SumOneofCase.MustFailAt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MustFailAt);
      }
      if (sumCase_ == SumOneofCase.Pass) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pass);
      }
      if (sumCase_ == SumOneofCase.GetTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetTime);
      }
      if (sumCase_ == SumOneofCase.GetParty) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetParty);
      }
      if (sumCase_ == SumOneofCase.EmbedExpr) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmbedExpr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scenario other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Pure:
          if (Pure == null) {
            Pure = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure();
          }
          Pure.MergeFrom(other.Pure);
          break;
        case SumOneofCase.Block:
          if (Block == null) {
            Block = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block();
          }
          Block.MergeFrom(other.Block);
          break;
        case SumOneofCase.Commit:
          if (Commit == null) {
            Commit = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit();
          }
          Commit.MergeFrom(other.Commit);
          break;
        case SumOneofCase.MustFailAt:
          if (MustFailAt == null) {
            MustFailAt = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit();
          }
          MustFailAt.MergeFrom(other.MustFailAt);
          break;
        case SumOneofCase.Pass:
          if (Pass == null) {
            Pass = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
          }
          Pass.MergeFrom(other.Pass);
          break;
        case SumOneofCase.GetTime:
          if (GetTime == null) {
            GetTime = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
          }
          GetTime.MergeFrom(other.GetTime);
          break;
        case SumOneofCase.GetParty:
          if (GetParty == null) {
            GetParty = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
          }
          GetParty.MergeFrom(other.GetParty);
          break;
        case SumOneofCase.EmbedExpr:
          if (EmbedExpr == null) {
            EmbedExpr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.EmbedExpr();
          }
          EmbedExpr.MergeFrom(other.EmbedExpr);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Pure();
            if (sumCase_ == SumOneofCase.Pure) {
              subBuilder.MergeFrom(Pure);
            }
            input.ReadMessage(subBuilder);
            Pure = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Block();
            if (sumCase_ == SumOneofCase.Block) {
              subBuilder.MergeFrom(Block);
            }
            input.ReadMessage(subBuilder);
            Block = subBuilder;
            break;
          }
          case 26: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit();
            if (sumCase_ == SumOneofCase.Commit) {
              subBuilder.MergeFrom(Commit);
            }
            input.ReadMessage(subBuilder);
            Commit = subBuilder;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.Commit();
            if (sumCase_ == SumOneofCase.MustFailAt) {
              subBuilder.MergeFrom(MustFailAt);
            }
            input.ReadMessage(subBuilder);
            MustFailAt = subBuilder;
            break;
          }
          case 42: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            if (sumCase_ == SumOneofCase.Pass) {
              subBuilder.MergeFrom(Pass);
            }
            input.ReadMessage(subBuilder);
            Pass = subBuilder;
            break;
          }
          case 50: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Unit();
            if (sumCase_ == SumOneofCase.GetTime) {
              subBuilder.MergeFrom(GetTime);
            }
            input.ReadMessage(subBuilder);
            GetTime = subBuilder;
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            if (sumCase_ == SumOneofCase.GetParty) {
              subBuilder.MergeFrom(GetParty);
            }
            input.ReadMessage(subBuilder);
            GetParty = subBuilder;
            break;
          }
          case 66: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.EmbedExpr subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Types.EmbedExpr();
            if (sumCase_ == SumOneofCase.EmbedExpr) {
              subBuilder.MergeFrom(EmbedExpr);
            }
            input.ReadMessage(subBuilder);
            EmbedExpr = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Scenario message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Commit : pb::IMessage<Commit> {
        private static readonly pb::MessageParser<Commit> _parser = new pb::MessageParser<Commit>(() => new Commit());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Commit> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Commit() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Commit(Commit other) : this() {
          party_ = other.party_ != null ? other.party_.Clone() : null;
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          retType_ = other.retType_ != null ? other.retType_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Commit Clone() {
          return new Commit(this);
        }

        /// <summary>Field number for the "party" field.</summary>
        public const int PartyFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr party_;
        /// <summary>
        /// committing party
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Party {
          get { return party_; }
          set {
            party_ = value;
          }
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr expr_;
        /// <summary>
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        /// <summary>Field number for the "ret_type" field.</summary>
        public const int RetTypeFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type retType_;
        /// <summary>
        /// type of result
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type RetType {
          get { return retType_; }
          set {
            retType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Commit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Commit other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Party, other.Party)) return false;
          if (!object.Equals(Expr, other.Expr)) return false;
          if (!object.Equals(RetType, other.RetType)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (party_ != null) hash ^= Party.GetHashCode();
          if (expr_ != null) hash ^= Expr.GetHashCode();
          if (retType_ != null) hash ^= RetType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (party_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Party);
          }
          if (expr_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expr);
          }
          if (retType_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(RetType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (party_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Party);
          }
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          if (retType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Commit other) {
          if (other == null) {
            return;
          }
          if (other.party_ != null) {
            if (party_ == null) {
              Party = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Party.MergeFrom(other.Party);
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Expr.MergeFrom(other.Expr);
          }
          if (other.retType_ != null) {
            if (retType_ == null) {
              RetType = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            RetType.MergeFrom(other.RetType);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (party_ == null) {
                  Party = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Party);
                break;
              }
              case 18: {
                if (expr_ == null) {
                  Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 26: {
                if (retType_ == null) {
                  RetType = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(RetType);
                break;
              }
            }
          }
        }

      }

      public sealed partial class EmbedExpr : pb::IMessage<EmbedExpr> {
        private static readonly pb::MessageParser<EmbedExpr> _parser = new pb::MessageParser<EmbedExpr>(() => new EmbedExpr());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EmbedExpr> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Scenario.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr(EmbedExpr other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          body_ = other.body_ != null ? other.body_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbedExpr Clone() {
          return new EmbedExpr(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr body_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Body {
          get { return body_; }
          set {
            body_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EmbedExpr);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EmbedExpr other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if (!object.Equals(Body, other.Body)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (body_ != null) hash ^= Body.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (body_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Body);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (body_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EmbedExpr other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.body_ != null) {
            if (body_ == null) {
              Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Body.MergeFrom(other.Body);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                if (body_ == null) {
                  Body = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Body);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Template choice definition.
  /// </summary>
  public sealed partial class TemplateChoice : pb::IMessage<TemplateChoice> {
    private static readonly pb::MessageParser<TemplateChoice> _parser = new pb::MessageParser<TemplateChoice>(() => new TemplateChoice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TemplateChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateChoice(TemplateChoice other) : this() {
      consuming_ = other.consuming_;
      controllers_ = other.controllers_ != null ? other.controllers_.Clone() : null;
      argBinder_ = other.argBinder_ != null ? other.argBinder_.Clone() : null;
      retType_ = other.retType_ != null ? other.retType_.Clone() : null;
      update_ = other.update_ != null ? other.update_.Clone() : null;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      switch (other.NameCase) {
        case NameOneofCase.NameStr:
          NameStr = other.NameStr;
          break;
        case NameOneofCase.NameInternedStr:
          NameInternedStr = other.NameInternedStr;
          break;
      }

      switch (other.SelfBinderCase) {
        case SelfBinderOneofCase.SelfBinderStr:
          SelfBinderStr = other.SelfBinderStr;
          break;
        case SelfBinderOneofCase.SelfBinderInternedStr:
          SelfBinderInternedStr = other.SelfBinderInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateChoice Clone() {
      return new TemplateChoice(this);
    }

    /// <summary>Field number for the "name_str" field.</summary>
    public const int NameStrFieldNumber = 1;
    /// <summary>
    /// *Available in version &lt; 1.7*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameStr {
      get { return nameCase_ == NameOneofCase.NameStr ? (string) name_ : ""; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        nameCase_ = NameOneofCase.NameStr;
      }
    }

    /// <summary>Field number for the "name_interned_str" field.</summary>
    public const int NameInternedStrFieldNumber = 9;
    /// <summary>
    /// *Must be a valid interned identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameInternedStr {
      get { return nameCase_ == NameOneofCase.NameInternedStr ? (int) name_ : 0; }
      set {
        name_ = value;
        nameCase_ = NameOneofCase.NameInternedStr;
      }
    }

    /// <summary>Field number for the "consuming" field.</summary>
    public const int ConsumingFieldNumber = 2;
    private bool consuming_;
    /// <summary>
    /// Choice type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Consuming {
      get { return consuming_; }
      set {
        consuming_ = value;
      }
    }

    /// <summary>Field number for the "controllers" field.</summary>
    public const int ControllersFieldNumber = 3;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr controllers_;
    /// <summary>
    /// The controllers of the choice. They have type `List Party` and the
    /// template parameter in scope, but not the choice parameter. All of these
    /// controllers need to authorize the exercising of this choice (aka
    /// conjunctive choice controllers).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Controllers {
      get { return controllers_; }
      set {
        controllers_ = value;
      }
    }

    /// <summary>Field number for the "arg_binder" field.</summary>
    public const int ArgBinderFieldNumber = 4;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType argBinder_;
    /// <summary>
    /// Name to which the choice argument is bound and its type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType ArgBinder {
      get { return argBinder_; }
      set {
        argBinder_ = value;
      }
    }

    /// <summary>Field number for the "ret_type" field.</summary>
    public const int RetTypeFieldNumber = 5;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type retType_;
    /// <summary>
    /// Return type of the choice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type RetType {
      get { return retType_; }
      set {
        retType_ = value;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 6;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr update_;
    /// <summary>
    /// Follow-up update of the choice. It has type `Update &lt;ret_type>` and both
    /// the template parameter and the choice parameter in scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Update {
      get { return update_; }
      set {
        update_ = value;
      }
    }

    /// <summary>Field number for the "self_binder_str" field.</summary>
    public const int SelfBinderStrFieldNumber = 7;
    /// <summary>
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelfBinderStr {
      get { return selfBinderCase_ == SelfBinderOneofCase.SelfBinderStr ? (string) selfBinder_ : ""; }
      set {
        selfBinder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        selfBinderCase_ = SelfBinderOneofCase.SelfBinderStr;
      }
    }

    /// <summary>Field number for the "self_binder_interned_str" field.</summary>
    public const int SelfBinderInternedStrFieldNumber = 10;
    /// <summary>
    /// *Must be a valid interned identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfBinderInternedStr {
      get { return selfBinderCase_ == SelfBinderOneofCase.SelfBinderInternedStr ? (int) selfBinder_ : 0; }
      set {
        selfBinder_ = value;
        selfBinderCase_ = SelfBinderOneofCase.SelfBinderInternedStr;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 8;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    private object name_;
    /// <summary>Enum of possible cases for the "name" oneof.</summary>
    public enum NameOneofCase {
      None = 0,
      NameStr = 1,
      NameInternedStr = 9,
    }
    private NameOneofCase nameCase_ = NameOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameOneofCase NameCase {
      get { return nameCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      nameCase_ = NameOneofCase.None;
      name_ = null;
    }

    private object selfBinder_;
    /// <summary>Enum of possible cases for the "self_binder" oneof.</summary>
    public enum SelfBinderOneofCase {
      None = 0,
      SelfBinderStr = 7,
      SelfBinderInternedStr = 10,
    }
    private SelfBinderOneofCase selfBinderCase_ = SelfBinderOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelfBinderOneofCase SelfBinderCase {
      get { return selfBinderCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSelfBinder() {
      selfBinderCase_ = SelfBinderOneofCase.None;
      selfBinder_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TemplateChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TemplateChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NameStr != other.NameStr) return false;
      if (NameInternedStr != other.NameInternedStr) return false;
      if (Consuming != other.Consuming) return false;
      if (!object.Equals(Controllers, other.Controllers)) return false;
      if (!object.Equals(ArgBinder, other.ArgBinder)) return false;
      if (!object.Equals(RetType, other.RetType)) return false;
      if (!object.Equals(Update, other.Update)) return false;
      if (SelfBinderStr != other.SelfBinderStr) return false;
      if (SelfBinderInternedStr != other.SelfBinderInternedStr) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (NameCase != other.NameCase) return false;
      if (SelfBinderCase != other.SelfBinderCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nameCase_ == NameOneofCase.NameStr) hash ^= NameStr.GetHashCode();
      if (nameCase_ == NameOneofCase.NameInternedStr) hash ^= NameInternedStr.GetHashCode();
      if (Consuming != false) hash ^= Consuming.GetHashCode();
      if (controllers_ != null) hash ^= Controllers.GetHashCode();
      if (argBinder_ != null) hash ^= ArgBinder.GetHashCode();
      if (retType_ != null) hash ^= RetType.GetHashCode();
      if (update_ != null) hash ^= Update.GetHashCode();
      if (selfBinderCase_ == SelfBinderOneofCase.SelfBinderStr) hash ^= SelfBinderStr.GetHashCode();
      if (selfBinderCase_ == SelfBinderOneofCase.SelfBinderInternedStr) hash ^= SelfBinderInternedStr.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      hash ^= (int) nameCase_;
      hash ^= (int) selfBinderCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nameCase_ == NameOneofCase.NameStr) {
        output.WriteRawTag(10);
        output.WriteString(NameStr);
      }
      if (Consuming != false) {
        output.WriteRawTag(16);
        output.WriteBool(Consuming);
      }
      if (controllers_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Controllers);
      }
      if (argBinder_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ArgBinder);
      }
      if (retType_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RetType);
      }
      if (update_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Update);
      }
      if (selfBinderCase_ == SelfBinderOneofCase.SelfBinderStr) {
        output.WriteRawTag(58);
        output.WriteString(SelfBinderStr);
      }
      if (location_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Location);
      }
      if (nameCase_ == NameOneofCase.NameInternedStr) {
        output.WriteRawTag(72);
        output.WriteInt32(NameInternedStr);
      }
      if (selfBinderCase_ == SelfBinderOneofCase.SelfBinderInternedStr) {
        output.WriteRawTag(80);
        output.WriteInt32(SelfBinderInternedStr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nameCase_ == NameOneofCase.NameStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameStr);
      }
      if (nameCase_ == NameOneofCase.NameInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameInternedStr);
      }
      if (Consuming != false) {
        size += 1 + 1;
      }
      if (controllers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Controllers);
      }
      if (argBinder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArgBinder);
      }
      if (retType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetType);
      }
      if (update_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (selfBinderCase_ == SelfBinderOneofCase.SelfBinderStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SelfBinderStr);
      }
      if (selfBinderCase_ == SelfBinderOneofCase.SelfBinderInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfBinderInternedStr);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TemplateChoice other) {
      if (other == null) {
        return;
      }
      if (other.Consuming != false) {
        Consuming = other.Consuming;
      }
      if (other.controllers_ != null) {
        if (controllers_ == null) {
          Controllers = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Controllers.MergeFrom(other.Controllers);
      }
      if (other.argBinder_ != null) {
        if (argBinder_ == null) {
          ArgBinder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType();
        }
        ArgBinder.MergeFrom(other.ArgBinder);
      }
      if (other.retType_ != null) {
        if (retType_ == null) {
          RetType = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
        }
        RetType.MergeFrom(other.RetType);
      }
      if (other.update_ != null) {
        if (update_ == null) {
          Update = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Update.MergeFrom(other.Update);
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      switch (other.NameCase) {
        case NameOneofCase.NameStr:
          NameStr = other.NameStr;
          break;
        case NameOneofCase.NameInternedStr:
          NameInternedStr = other.NameInternedStr;
          break;
      }

      switch (other.SelfBinderCase) {
        case SelfBinderOneofCase.SelfBinderStr:
          SelfBinderStr = other.SelfBinderStr;
          break;
        case SelfBinderOneofCase.SelfBinderInternedStr:
          SelfBinderInternedStr = other.SelfBinderInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NameStr = input.ReadString();
            break;
          }
          case 16: {
            Consuming = input.ReadBool();
            break;
          }
          case 26: {
            if (controllers_ == null) {
              Controllers = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Controllers);
            break;
          }
          case 34: {
            if (argBinder_ == null) {
              ArgBinder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.VarWithType();
            }
            input.ReadMessage(ArgBinder);
            break;
          }
          case 42: {
            if (retType_ == null) {
              RetType = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            input.ReadMessage(RetType);
            break;
          }
          case 50: {
            if (update_ == null) {
              Update = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Update);
            break;
          }
          case 58: {
            SelfBinderStr = input.ReadString();
            break;
          }
          case 66: {
            if (location_ == null) {
              Location = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 72: {
            NameInternedStr = input.ReadInt32();
            break;
          }
          case 80: {
            SelfBinderInternedStr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// we restrict key expressions to records of projections, much like SQL
  /// </summary>
  public sealed partial class KeyExpr : pb::IMessage<KeyExpr> {
    private static readonly pb::MessageParser<KeyExpr> _parser = new pb::MessageParser<KeyExpr>(() => new KeyExpr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyExpr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExpr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExpr(KeyExpr other) : this() {
      switch (other.SumCase) {
        case SumOneofCase.Projections:
          Projections = other.Projections.Clone();
          break;
        case SumOneofCase.Record:
          Record = other.Record.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExpr Clone() {
      return new KeyExpr(this);
    }

    /// <summary>Field number for the "projections" field.</summary>
    public const int ProjectionsFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projections Projections {
      get { return sumCase_ == SumOneofCase.Projections ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projections) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Projections;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Record Record {
      get { return sumCase_ == SumOneofCase.Record ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Record) sum_ : null; }
      set {
        sum_ = value;
        sumCase_ = value == null ? SumOneofCase.None : SumOneofCase.Record;
      }
    }

    private object sum_;
    /// <summary>Enum of possible cases for the "Sum" oneof.</summary>
    public enum SumOneofCase {
      None = 0,
      Projections = 1,
      Record = 2,
    }
    private SumOneofCase sumCase_ = SumOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOneofCase SumCase {
      get { return sumCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSum() {
      sumCase_ = SumOneofCase.None;
      sum_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyExpr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyExpr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Projections, other.Projections)) return false;
      if (!object.Equals(Record, other.Record)) return false;
      if (SumCase != other.SumCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sumCase_ == SumOneofCase.Projections) hash ^= Projections.GetHashCode();
      if (sumCase_ == SumOneofCase.Record) hash ^= Record.GetHashCode();
      hash ^= (int) sumCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sumCase_ == SumOneofCase.Projections) {
        output.WriteRawTag(10);
        output.WriteMessage(Projections);
      }
      if (sumCase_ == SumOneofCase.Record) {
        output.WriteRawTag(18);
        output.WriteMessage(Record);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sumCase_ == SumOneofCase.Projections) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Projections);
      }
      if (sumCase_ == SumOneofCase.Record) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyExpr other) {
      if (other == null) {
        return;
      }
      switch (other.SumCase) {
        case SumOneofCase.Projections:
          if (Projections == null) {
            Projections = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projections();
          }
          Projections.MergeFrom(other.Projections);
          break;
        case SumOneofCase.Record:
          if (Record == null) {
            Record = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Record();
          }
          Record.MergeFrom(other.Record);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projections subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projections();
            if (sumCase_ == SumOneofCase.Projections) {
              subBuilder.MergeFrom(Projections);
            }
            input.ReadMessage(subBuilder);
            Projections = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Record subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Record();
            if (sumCase_ == SumOneofCase.Record) {
              subBuilder.MergeFrom(Record);
            }
            input.ReadMessage(subBuilder);
            Record = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the KeyExpr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Projection : pb::IMessage<Projection> {
        private static readonly pb::MessageParser<Projection> _parser = new pb::MessageParser<Projection>(() => new Projection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Projection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projection(Projection other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projection Clone() {
          return new Projection(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// Always fully applied
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "field_str" field.</summary>
        public const int FieldStrFieldNumber = 2;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldStr {
          get { return fieldCase_ == FieldOneofCase.FieldStr ? (string) field_ : ""; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            fieldCase_ = FieldOneofCase.FieldStr;
          }
        }

        /// <summary>Field number for the "field_interned_str" field.</summary>
        public const int FieldInternedStrFieldNumber = 3;
        /// <summary>
        /// *Must be a valid interned identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FieldInternedStr {
          get { return fieldCase_ == FieldOneofCase.FieldInternedStr ? (int) field_ : 0; }
          set {
            field_ = value;
            fieldCase_ = FieldOneofCase.FieldInternedStr;
          }
        }

        private object field_;
        /// <summary>Enum of possible cases for the "field" oneof.</summary>
        public enum FieldOneofCase {
          None = 0,
          FieldStr = 2,
          FieldInternedStr = 3,
        }
        private FieldOneofCase fieldCase_ = FieldOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldOneofCase FieldCase {
          get { return fieldCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearField() {
          fieldCase_ = FieldOneofCase.None;
          field_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Projection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Projection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if (FieldStr != other.FieldStr) return false;
          if (FieldInternedStr != other.FieldInternedStr) return false;
          if (FieldCase != other.FieldCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          if (fieldCase_ == FieldOneofCase.FieldStr) hash ^= FieldStr.GetHashCode();
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) hash ^= FieldInternedStr.GetHashCode();
          hash ^= (int) fieldCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            output.WriteRawTag(18);
            output.WriteString(FieldStr);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            output.WriteRawTag(24);
            output.WriteInt32(FieldInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldStr);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldInternedStr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Projection other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                FieldStr = input.ReadString();
                break;
              }
              case 24: {
                FieldInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// note that the projection is always referring to the template parameter.
      /// </summary>
      public sealed partial class Projections : pb::IMessage<Projections> {
        private static readonly pb::MessageParser<Projections> _parser = new pb::MessageParser<Projections>(() => new Projections());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Projections> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projections() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projections(Projections other) : this() {
          projections_ = other.projections_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projections Clone() {
          return new Projections(this);
        }

        /// <summary>Field number for the "projections" field.</summary>
        public const int Projections_FieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projection> _repeated_projections_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projection.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projection> projections_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projection>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.Projection> Projections_ {
          get { return projections_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Projections);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Projections other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!projections_.Equals(other.projections_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= projections_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          projections_.WriteTo(output, _repeated_projections_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += projections_.CalculateSize(_repeated_projections_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Projections other) {
          if (other == null) {
            return;
          }
          projections_.Add(other.projections_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                projections_.AddEntriesFrom(input, _repeated_projections_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class RecordField : pb::IMessage<RecordField> {
        private static readonly pb::MessageParser<RecordField> _parser = new pb::MessageParser<RecordField>(() => new RecordField());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecordField> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordField() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordField(RecordField other) : this() {
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordField Clone() {
          return new RecordField(this);
        }

        /// <summary>Field number for the "field_str" field.</summary>
        public const int FieldStrFieldNumber = 1;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldStr {
          get { return fieldCase_ == FieldOneofCase.FieldStr ? (string) field_ : ""; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            fieldCase_ = FieldOneofCase.FieldStr;
          }
        }

        /// <summary>Field number for the "field_interned_str" field.</summary>
        public const int FieldInternedStrFieldNumber = 3;
        /// <summary>
        /// *Must be a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FieldInternedStr {
          get { return fieldCase_ == FieldOneofCase.FieldInternedStr ? (int) field_ : 0; }
          set {
            field_ = value;
            fieldCase_ = FieldOneofCase.FieldInternedStr;
          }
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr expr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        private object field_;
        /// <summary>Enum of possible cases for the "field" oneof.</summary>
        public enum FieldOneofCase {
          None = 0,
          FieldStr = 1,
          FieldInternedStr = 3,
        }
        private FieldOneofCase fieldCase_ = FieldOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldOneofCase FieldCase {
          get { return fieldCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearField() {
          fieldCase_ = FieldOneofCase.None;
          field_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecordField);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecordField other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FieldStr != other.FieldStr) return false;
          if (FieldInternedStr != other.FieldInternedStr) return false;
          if (!object.Equals(Expr, other.Expr)) return false;
          if (FieldCase != other.FieldCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (fieldCase_ == FieldOneofCase.FieldStr) hash ^= FieldStr.GetHashCode();
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) hash ^= FieldInternedStr.GetHashCode();
          if (expr_ != null) hash ^= Expr.GetHashCode();
          hash ^= (int) fieldCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            output.WriteRawTag(10);
            output.WriteString(FieldStr);
          }
          if (expr_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Expr);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            output.WriteRawTag(24);
            output.WriteInt32(FieldInternedStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (fieldCase_ == FieldOneofCase.FieldStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldStr);
          }
          if (fieldCase_ == FieldOneofCase.FieldInternedStr) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldInternedStr);
          }
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecordField other) {
          if (other == null) {
            return;
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr();
            }
            Expr.MergeFrom(other.Expr);
          }
          switch (other.FieldCase) {
            case FieldOneofCase.FieldStr:
              FieldStr = other.FieldStr;
              break;
            case FieldOneofCase.FieldInternedStr:
              FieldInternedStr = other.FieldInternedStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FieldStr = input.ReadString();
                break;
              }
              case 18: {
                if (expr_ == null) {
                  Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 24: {
                FieldInternedStr = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Record : pb::IMessage<Record> {
        private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Record> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record(Record other) : this() {
          tycon_ = other.tycon_ != null ? other.tycon_.Clone() : null;
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record Clone() {
          return new Record(this);
        }

        /// <summary>Field number for the "tycon" field.</summary>
        public const int TyconFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con tycon_;
        /// <summary>
        /// Always fully applied
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con Tycon {
          get { return tycon_; }
          set {
            tycon_ = value;
          }
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.RecordField> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.RecordField.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.RecordField> fields_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.RecordField>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr.Types.RecordField> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Record);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Record other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tycon, other.Tycon)) return false;
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tycon_ != null) hash ^= Tycon.GetHashCode();
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tycon_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tycon);
          }
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tycon_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tycon);
          }
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Record other) {
          if (other == null) {
            return;
          }
          if (other.tycon_ != null) {
            if (tycon_ == null) {
              Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
            }
            Tycon.MergeFrom(other.Tycon);
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tycon_ == null) {
                  Tycon = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type.Types.Con();
                }
                input.ReadMessage(Tycon);
                break;
              }
              case 18: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Contract template definition
  /// </summary>
  public sealed partial class DefTemplate : pb::IMessage<DefTemplate> {
    private static readonly pb::MessageParser<DefTemplate> _parser = new pb::MessageParser<DefTemplate>(() => new DefTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefTemplate(DefTemplate other) : this() {
      precond_ = other.precond_ != null ? other.precond_.Clone() : null;
      signatories_ = other.signatories_ != null ? other.signatories_.Clone() : null;
      agreement_ = other.agreement_ != null ? other.agreement_.Clone() : null;
      choices_ = other.choices_.Clone();
      observers_ = other.observers_ != null ? other.observers_.Clone() : null;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      key_ = other.key_ != null ? other.key_.Clone() : null;
      switch (other.TyconCase) {
        case TyconOneofCase.TyconDname:
          TyconDname = other.TyconDname.Clone();
          break;
        case TyconOneofCase.TyconInternedDname:
          TyconInternedDname = other.TyconInternedDname;
          break;
      }

      switch (other.ParamCase) {
        case ParamOneofCase.ParamStr:
          ParamStr = other.ParamStr;
          break;
        case ParamOneofCase.ParamInternedStr:
          ParamInternedStr = other.ParamInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefTemplate Clone() {
      return new DefTemplate(this);
    }

    /// <summary>Field number for the "tycon_dname" field.</summary>
    public const int TyconDnameFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName TyconDname {
      get { return tyconCase_ == TyconOneofCase.TyconDname ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName) tycon_ : null; }
      set {
        tycon_ = value;
        tyconCase_ = value == null ? TyconOneofCase.None : TyconOneofCase.TyconDname;
      }
    }

    /// <summary>Field number for the "tycon_interned_dname" field.</summary>
    public const int TyconInternedDnameFieldNumber = 12;
    /// <summary>
    /// *Must be a valid interned name*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TyconInternedDname {
      get { return tyconCase_ == TyconOneofCase.TyconInternedDname ? (int) tycon_ : 0; }
      set {
        tycon_ = value;
        tyconCase_ = TyconOneofCase.TyconInternedDname;
      }
    }

    /// <summary>Field number for the "param_str" field.</summary>
    public const int ParamStrFieldNumber = 2;
    /// <summary>
    /// *Must be a valid identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParamStr {
      get { return paramCase_ == ParamOneofCase.ParamStr ? (string) param_ : ""; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        paramCase_ = ParamOneofCase.ParamStr;
      }
    }

    /// <summary>Field number for the "param_interned_str" field.</summary>
    public const int ParamInternedStrFieldNumber = 11;
    /// <summary>
    /// *Must be a valid interned identifier*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParamInternedStr {
      get { return paramCase_ == ParamOneofCase.ParamInternedStr ? (int) param_ : 0; }
      set {
        param_ = value;
        paramCase_ = ParamOneofCase.ParamInternedStr;
      }
    }

    /// <summary>Field number for the "precond" field.</summary>
    public const int PrecondFieldNumber = 4;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr precond_;
    /// <summary>
    /// Pre-condition that the template argument must satisfy.
    /// When present, it has type `Bool` and the template parameter in scope.
    /// *Optional*, interpreted as 'True' if undefined
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Precond {
      get { return precond_; }
      set {
        precond_ = value;
      }
    }

    /// <summary>Field number for the "signatories" field.</summary>
    public const int SignatoriesFieldNumber = 5;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr signatories_;
    /// <summary>
    /// The signatories of the contract. They have type `List Party` and the
    /// template parameter in scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Signatories {
      get { return signatories_; }
      set {
        signatories_ = value;
      }
    }

    /// <summary>Field number for the "agreement" field.</summary>
    public const int AgreementFieldNumber = 6;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr agreement_;
    /// <summary>
    /// The agreement text associated with the contract. It has type `Text` and
    /// the template parameter in scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Agreement {
      get { return agreement_; }
      set {
        agreement_ = value;
      }
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TemplateChoice> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(58, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TemplateChoice.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TemplateChoice> choices_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TemplateChoice>();
    /// <summary>
    /// The choices available in the resulting contract.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TemplateChoice> Choices {
      get { return choices_; }
    }

    /// <summary>Field number for the "observers" field.</summary>
    public const int ObserversFieldNumber = 8;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr observers_;
    /// <summary>
    /// The observers of the contract. They have type `List Party` and the
    /// template parameter in scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Observers {
      get { return observers_; }
      set {
        observers_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 9;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 10;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate.Types.DefKey key_;
    /// <summary>
    /// They key definition for the template, if present
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate.Types.DefKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private object tycon_;
    /// <summary>Enum of possible cases for the "tycon" oneof.</summary>
    public enum TyconOneofCase {
      None = 0,
      TyconDname = 1,
      TyconInternedDname = 12,
    }
    private TyconOneofCase tyconCase_ = TyconOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TyconOneofCase TyconCase {
      get { return tyconCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTycon() {
      tyconCase_ = TyconOneofCase.None;
      tycon_ = null;
    }

    private object param_;
    /// <summary>Enum of possible cases for the "param" oneof.</summary>
    public enum ParamOneofCase {
      None = 0,
      ParamStr = 2,
      ParamInternedStr = 11,
    }
    private ParamOneofCase paramCase_ = ParamOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamOneofCase ParamCase {
      get { return paramCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParam() {
      paramCase_ = ParamOneofCase.None;
      param_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TyconDname, other.TyconDname)) return false;
      if (TyconInternedDname != other.TyconInternedDname) return false;
      if (ParamStr != other.ParamStr) return false;
      if (ParamInternedStr != other.ParamInternedStr) return false;
      if (!object.Equals(Precond, other.Precond)) return false;
      if (!object.Equals(Signatories, other.Signatories)) return false;
      if (!object.Equals(Agreement, other.Agreement)) return false;
      if(!choices_.Equals(other.choices_)) return false;
      if (!object.Equals(Observers, other.Observers)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Key, other.Key)) return false;
      if (TyconCase != other.TyconCase) return false;
      if (ParamCase != other.ParamCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tyconCase_ == TyconOneofCase.TyconDname) hash ^= TyconDname.GetHashCode();
      if (tyconCase_ == TyconOneofCase.TyconInternedDname) hash ^= TyconInternedDname.GetHashCode();
      if (paramCase_ == ParamOneofCase.ParamStr) hash ^= ParamStr.GetHashCode();
      if (paramCase_ == ParamOneofCase.ParamInternedStr) hash ^= ParamInternedStr.GetHashCode();
      if (precond_ != null) hash ^= Precond.GetHashCode();
      if (signatories_ != null) hash ^= Signatories.GetHashCode();
      if (agreement_ != null) hash ^= Agreement.GetHashCode();
      hash ^= choices_.GetHashCode();
      if (observers_ != null) hash ^= Observers.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (key_ != null) hash ^= Key.GetHashCode();
      hash ^= (int) tyconCase_;
      hash ^= (int) paramCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tyconCase_ == TyconOneofCase.TyconDname) {
        output.WriteRawTag(10);
        output.WriteMessage(TyconDname);
      }
      if (paramCase_ == ParamOneofCase.ParamStr) {
        output.WriteRawTag(18);
        output.WriteString(ParamStr);
      }
      if (precond_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Precond);
      }
      if (signatories_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Signatories);
      }
      if (agreement_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Agreement);
      }
      choices_.WriteTo(output, _repeated_choices_codec);
      if (observers_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Observers);
      }
      if (location_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Location);
      }
      if (key_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Key);
      }
      if (paramCase_ == ParamOneofCase.ParamInternedStr) {
        output.WriteRawTag(88);
        output.WriteInt32(ParamInternedStr);
      }
      if (tyconCase_ == TyconOneofCase.TyconInternedDname) {
        output.WriteRawTag(96);
        output.WriteInt32(TyconInternedDname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tyconCase_ == TyconOneofCase.TyconDname) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TyconDname);
      }
      if (tyconCase_ == TyconOneofCase.TyconInternedDname) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TyconInternedDname);
      }
      if (paramCase_ == ParamOneofCase.ParamStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParamStr);
      }
      if (paramCase_ == ParamOneofCase.ParamInternedStr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParamInternedStr);
      }
      if (precond_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Precond);
      }
      if (signatories_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signatories);
      }
      if (agreement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Agreement);
      }
      size += choices_.CalculateSize(_repeated_choices_codec);
      if (observers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Observers);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefTemplate other) {
      if (other == null) {
        return;
      }
      if (other.precond_ != null) {
        if (precond_ == null) {
          Precond = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Precond.MergeFrom(other.Precond);
      }
      if (other.signatories_ != null) {
        if (signatories_ == null) {
          Signatories = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Signatories.MergeFrom(other.Signatories);
      }
      if (other.agreement_ != null) {
        if (agreement_ == null) {
          Agreement = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Agreement.MergeFrom(other.Agreement);
      }
      choices_.Add(other.choices_);
      if (other.observers_ != null) {
        if (observers_ == null) {
          Observers = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Observers.MergeFrom(other.Observers);
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.key_ != null) {
        if (key_ == null) {
          Key = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate.Types.DefKey();
        }
        Key.MergeFrom(other.Key);
      }
      switch (other.TyconCase) {
        case TyconOneofCase.TyconDname:
          if (TyconDname == null) {
            TyconDname = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName();
          }
          TyconDname.MergeFrom(other.TyconDname);
          break;
        case TyconOneofCase.TyconInternedDname:
          TyconInternedDname = other.TyconInternedDname;
          break;
      }

      switch (other.ParamCase) {
        case ParamOneofCase.ParamStr:
          ParamStr = other.ParamStr;
          break;
        case ParamOneofCase.ParamInternedStr:
          ParamInternedStr = other.ParamInternedStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName();
            if (tyconCase_ == TyconOneofCase.TyconDname) {
              subBuilder.MergeFrom(TyconDname);
            }
            input.ReadMessage(subBuilder);
            TyconDname = subBuilder;
            break;
          }
          case 18: {
            ParamStr = input.ReadString();
            break;
          }
          case 34: {
            if (precond_ == null) {
              Precond = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Precond);
            break;
          }
          case 42: {
            if (signatories_ == null) {
              Signatories = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Signatories);
            break;
          }
          case 50: {
            if (agreement_ == null) {
              Agreement = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Agreement);
            break;
          }
          case 58: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
          case 66: {
            if (observers_ == null) {
              Observers = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Observers);
            break;
          }
          case 74: {
            if (location_ == null) {
              Location = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 82: {
            if (key_ == null) {
              Key = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate.Types.DefKey();
            }
            input.ReadMessage(Key);
            break;
          }
          case 88: {
            ParamInternedStr = input.ReadInt32();
            break;
          }
          case 96: {
            TyconInternedDname = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DefTemplate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class DefKey : pb::IMessage<DefKey> {
        private static readonly pb::MessageParser<DefKey> _parser = new pb::MessageParser<DefKey>(() => new DefKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DefKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefKey(DefKey other) : this() {
          type_ = other.type_ != null ? other.type_.Clone() : null;
          maintainers_ = other.maintainers_ != null ? other.maintainers_.Clone() : null;
          switch (other.KeyExprCase) {
            case KeyExprOneofCase.Key:
              Key = other.Key.Clone();
              break;
            case KeyExprOneofCase.ComplexKey:
              ComplexKey = other.ComplexKey.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefKey Clone() {
          return new DefKey(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr Key {
          get { return keyExprCase_ == KeyExprOneofCase.Key ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr) keyExpr_ : null; }
          set {
            keyExpr_ = value;
            keyExprCase_ = value == null ? KeyExprOneofCase.None : KeyExprOneofCase.Key;
          }
        }

        /// <summary>Field number for the "complex_key" field.</summary>
        public const int ComplexKeyFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr ComplexKey {
          get { return keyExprCase_ == KeyExprOneofCase.ComplexKey ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr) keyExpr_ : null; }
          set {
            keyExpr_ = value;
            keyExprCase_ = value == null ? KeyExprOneofCase.None : KeyExprOneofCase.ComplexKey;
          }
        }

        /// <summary>Field number for the "maintainers" field.</summary>
        public const int MaintainersFieldNumber = 3;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr maintainers_;
        /// <summary>
        /// a function from the key type to [Party]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Maintainers {
          get { return maintainers_; }
          set {
            maintainers_ = value;
          }
        }

        private object keyExpr_;
        /// <summary>Enum of possible cases for the "key_expr" oneof.</summary>
        public enum KeyExprOneofCase {
          None = 0,
          Key = 2,
          ComplexKey = 4,
        }
        private KeyExprOneofCase keyExprCase_ = KeyExprOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyExprOneofCase KeyExprCase {
          get { return keyExprCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKeyExpr() {
          keyExprCase_ = KeyExprOneofCase.None;
          keyExpr_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DefKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DefKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Type, other.Type)) return false;
          if (!object.Equals(Key, other.Key)) return false;
          if (!object.Equals(ComplexKey, other.ComplexKey)) return false;
          if (!object.Equals(Maintainers, other.Maintainers)) return false;
          if (KeyExprCase != other.KeyExprCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (type_ != null) hash ^= Type.GetHashCode();
          if (keyExprCase_ == KeyExprOneofCase.Key) hash ^= Key.GetHashCode();
          if (keyExprCase_ == KeyExprOneofCase.ComplexKey) hash ^= ComplexKey.GetHashCode();
          if (maintainers_ != null) hash ^= Maintainers.GetHashCode();
          hash ^= (int) keyExprCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (type_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Type);
          }
          if (keyExprCase_ == KeyExprOneofCase.Key) {
            output.WriteRawTag(18);
            output.WriteMessage(Key);
          }
          if (maintainers_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Maintainers);
          }
          if (keyExprCase_ == KeyExprOneofCase.ComplexKey) {
            output.WriteRawTag(34);
            output.WriteMessage(ComplexKey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (keyExprCase_ == KeyExprOneofCase.Key) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
          }
          if (keyExprCase_ == KeyExprOneofCase.ComplexKey) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComplexKey);
          }
          if (maintainers_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maintainers);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DefKey other) {
          if (other == null) {
            return;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.maintainers_ != null) {
            if (maintainers_ == null) {
              Maintainers = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            Maintainers.MergeFrom(other.Maintainers);
          }
          switch (other.KeyExprCase) {
            case KeyExprOneofCase.Key:
              if (Key == null) {
                Key = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr();
              }
              Key.MergeFrom(other.Key);
              break;
            case KeyExprOneofCase.ComplexKey:
              if (ComplexKey == null) {
                ComplexKey = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
              }
              ComplexKey.MergeFrom(other.ComplexKey);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 18: {
                global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.KeyExpr();
                if (keyExprCase_ == KeyExprOneofCase.Key) {
                  subBuilder.MergeFrom(Key);
                }
                input.ReadMessage(subBuilder);
                Key = subBuilder;
                break;
              }
              case 26: {
                if (maintainers_ == null) {
                  Maintainers = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                }
                input.ReadMessage(Maintainers);
                break;
              }
              case 34: {
                global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
                if (keyExprCase_ == KeyExprOneofCase.ComplexKey) {
                  subBuilder.MergeFrom(ComplexKey);
                }
                input.ReadMessage(subBuilder);
                ComplexKey = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Data type definition
  /// </summary>
  public sealed partial class DefDataType : pb::IMessage<DefDataType> {
    private static readonly pb::MessageParser<DefDataType> _parser = new pb::MessageParser<DefDataType>(() => new DefDataType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefDataType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefDataType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefDataType(DefDataType other) : this() {
      params_ = other.params_.Clone();
      serializable_ = other.serializable_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      switch (other.NameCase) {
        case NameOneofCase.NameDname:
          NameDname = other.NameDname.Clone();
          break;
        case NameOneofCase.NameInternedDname:
          NameInternedDname = other.NameInternedDname;
          break;
      }

      switch (other.DataConsCase) {
        case DataConsOneofCase.Record:
          Record = other.Record.Clone();
          break;
        case DataConsOneofCase.Variant:
          Variant = other.Variant.Clone();
          break;
        case DataConsOneofCase.Enum:
          Enum = other.Enum.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefDataType Clone() {
      return new DefDataType(this);
    }

    /// <summary>Field number for the "name_dname" field.</summary>
    public const int NameDnameFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName NameDname {
      get { return nameCase_ == NameOneofCase.NameDname ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName) name_ : null; }
      set {
        name_ = value;
        nameCase_ = value == null ? NameOneofCase.None : NameOneofCase.NameDname;
      }
    }

    /// <summary>Field number for the "name_interned_dname" field.</summary>
    public const int NameInternedDnameFieldNumber = 8;
    /// <summary>
    /// *Must be a valid interned name*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameInternedDname {
      get { return nameCase_ == NameOneofCase.NameInternedDname ? (int) name_ : 0; }
      set {
        name_ = value;
        nameCase_ = NameOneofCase.NameInternedDname;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind> _repeated_params_codec
        = pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind> params_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind>();
    /// <summary>
    /// type parameters
    /// *Must be empty if enum field is set*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.TypeVarWithKind> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 3;
    /// <summary>
    /// Records without fields are explicitly allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields Record {
      get { return dataConsCase_ == DataConsOneofCase.Record ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields) dataCons_ : null; }
      set {
        dataCons_ = value;
        dataConsCase_ = value == null ? DataConsOneofCase.None : DataConsOneofCase.Record;
      }
    }

    /// <summary>Field number for the "variant" field.</summary>
    public const int VariantFieldNumber = 4;
    /// <summary>
    /// Variants without constructors are explicitly allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields Variant {
      get { return dataConsCase_ == DataConsOneofCase.Variant ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields) dataCons_ : null; }
      set {
        dataCons_ = value;
        dataConsCase_ = value == null ? DataConsOneofCase.None : DataConsOneofCase.Variant;
      }
    }

    /// <summary>Field number for the "enum" field.</summary>
    public const int EnumFieldNumber = 7;
    /// <summary>
    /// *Available in versions >= 1.6*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.EnumConstructors Enum {
      get { return dataConsCase_ == DataConsOneofCase.Enum ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.EnumConstructors) dataCons_ : null; }
      set {
        dataCons_ = value;
        dataConsCase_ = value == null ? DataConsOneofCase.None : DataConsOneofCase.Enum;
      }
    }

    /// <summary>Field number for the "serializable" field.</summary>
    public const int SerializableFieldNumber = 5;
    private bool serializable_;
    /// <summary>
    /// If true, this data type preserves serializability in the sense that when
    /// all parameters are instantiated with serializable types (of kind '*'),
    /// then the resulting type is serializable as well.
    /// This flag is used to simplify package validation by not requiring an
    /// inference but only a check. Such a check must validate that this flag is
    /// set correctly and that template and choice argument and result types
    /// have this flag set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Serializable {
      get { return serializable_; }
      set {
        serializable_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 6;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    private object name_;
    /// <summary>Enum of possible cases for the "name" oneof.</summary>
    public enum NameOneofCase {
      None = 0,
      NameDname = 1,
      NameInternedDname = 8,
    }
    private NameOneofCase nameCase_ = NameOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameOneofCase NameCase {
      get { return nameCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      nameCase_ = NameOneofCase.None;
      name_ = null;
    }

    private object dataCons_;
    /// <summary>Enum of possible cases for the "DataCons" oneof.</summary>
    public enum DataConsOneofCase {
      None = 0,
      Record = 3,
      Variant = 4,
      Enum = 7,
    }
    private DataConsOneofCase dataConsCase_ = DataConsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataConsOneofCase DataConsCase {
      get { return dataConsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataCons() {
      dataConsCase_ = DataConsOneofCase.None;
      dataCons_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefDataType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefDataType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NameDname, other.NameDname)) return false;
      if (NameInternedDname != other.NameInternedDname) return false;
      if(!params_.Equals(other.params_)) return false;
      if (!object.Equals(Record, other.Record)) return false;
      if (!object.Equals(Variant, other.Variant)) return false;
      if (!object.Equals(Enum, other.Enum)) return false;
      if (Serializable != other.Serializable) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (NameCase != other.NameCase) return false;
      if (DataConsCase != other.DataConsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nameCase_ == NameOneofCase.NameDname) hash ^= NameDname.GetHashCode();
      if (nameCase_ == NameOneofCase.NameInternedDname) hash ^= NameInternedDname.GetHashCode();
      hash ^= params_.GetHashCode();
      if (dataConsCase_ == DataConsOneofCase.Record) hash ^= Record.GetHashCode();
      if (dataConsCase_ == DataConsOneofCase.Variant) hash ^= Variant.GetHashCode();
      if (dataConsCase_ == DataConsOneofCase.Enum) hash ^= Enum.GetHashCode();
      if (Serializable != false) hash ^= Serializable.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      hash ^= (int) nameCase_;
      hash ^= (int) dataConsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nameCase_ == NameOneofCase.NameDname) {
        output.WriteRawTag(10);
        output.WriteMessage(NameDname);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (dataConsCase_ == DataConsOneofCase.Record) {
        output.WriteRawTag(26);
        output.WriteMessage(Record);
      }
      if (dataConsCase_ == DataConsOneofCase.Variant) {
        output.WriteRawTag(34);
        output.WriteMessage(Variant);
      }
      if (Serializable != false) {
        output.WriteRawTag(40);
        output.WriteBool(Serializable);
      }
      if (location_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Location);
      }
      if (dataConsCase_ == DataConsOneofCase.Enum) {
        output.WriteRawTag(58);
        output.WriteMessage(Enum);
      }
      if (nameCase_ == NameOneofCase.NameInternedDname) {
        output.WriteRawTag(64);
        output.WriteInt32(NameInternedDname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nameCase_ == NameOneofCase.NameDname) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameDname);
      }
      if (nameCase_ == NameOneofCase.NameInternedDname) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameInternedDname);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (dataConsCase_ == DataConsOneofCase.Record) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (dataConsCase_ == DataConsOneofCase.Variant) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variant);
      }
      if (dataConsCase_ == DataConsOneofCase.Enum) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enum);
      }
      if (Serializable != false) {
        size += 1 + 1;
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefDataType other) {
      if (other == null) {
        return;
      }
      params_.Add(other.params_);
      if (other.Serializable != false) {
        Serializable = other.Serializable;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      switch (other.NameCase) {
        case NameOneofCase.NameDname:
          if (NameDname == null) {
            NameDname = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName();
          }
          NameDname.MergeFrom(other.NameDname);
          break;
        case NameOneofCase.NameInternedDname:
          NameInternedDname = other.NameInternedDname;
          break;
      }

      switch (other.DataConsCase) {
        case DataConsOneofCase.Record:
          if (Record == null) {
            Record = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields();
          }
          Record.MergeFrom(other.Record);
          break;
        case DataConsOneofCase.Variant:
          if (Variant == null) {
            Variant = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields();
          }
          Variant.MergeFrom(other.Variant);
          break;
        case DataConsOneofCase.Enum:
          if (Enum == null) {
            Enum = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.EnumConstructors();
          }
          Enum.MergeFrom(other.Enum);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName();
            if (nameCase_ == NameOneofCase.NameDname) {
              subBuilder.MergeFrom(NameDname);
            }
            input.ReadMessage(subBuilder);
            NameDname = subBuilder;
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 26: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields();
            if (dataConsCase_ == DataConsOneofCase.Record) {
              subBuilder.MergeFrom(Record);
            }
            input.ReadMessage(subBuilder);
            Record = subBuilder;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.Fields();
            if (dataConsCase_ == DataConsOneofCase.Variant) {
              subBuilder.MergeFrom(Variant);
            }
            input.ReadMessage(subBuilder);
            Variant = subBuilder;
            break;
          }
          case 40: {
            Serializable = input.ReadBool();
            break;
          }
          case 50: {
            if (location_ == null) {
              Location = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 58: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.EnumConstructors subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Types.EnumConstructors();
            if (dataConsCase_ == DataConsOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
          case 64: {
            NameInternedDname = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DefDataType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Fields : pb::IMessage<Fields> {
        private static readonly pb::MessageParser<Fields> _parser = new pb::MessageParser<Fields>(() => new Fields());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Fields> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fields() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fields(Fields other) : this() {
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fields Clone() {
          return new Fields(this);
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int Fields_FieldNumber = 1;
        private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType.Parser);
        private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType> fields_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FieldWithType> Fields_ {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Fields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Fields other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Fields other) {
          if (other == null) {
            return;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// *Available in versions >= 1.6*
      /// </summary>
      public sealed partial class EnumConstructors : pb::IMessage<EnumConstructors> {
        private static readonly pb::MessageParser<EnumConstructors> _parser = new pb::MessageParser<EnumConstructors>(() => new EnumConstructors());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EnumConstructors> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumConstructors() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumConstructors(EnumConstructors other) : this() {
          constructorsStr_ = other.constructorsStr_.Clone();
          constructorsInternedStr_ = other.constructorsInternedStr_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumConstructors Clone() {
          return new EnumConstructors(this);
        }

        /// <summary>Field number for the "constructors_str" field.</summary>
        public const int ConstructorsStrFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_constructorsStr_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> constructorsStr_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// *Must be a list of valid identifiers*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ConstructorsStr {
          get { return constructorsStr_; }
        }

        /// <summary>Field number for the "constructors_interned_str" field.</summary>
        public const int ConstructorsInternedStrFieldNumber = 2;
        private static readonly pb::FieldCodec<int> _repeated_constructorsInternedStr_codec
            = pb::FieldCodec.ForInt32(18);
        private readonly pbc::RepeatedField<int> constructorsInternedStr_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// *Must be a list of valid interned identifiers*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> ConstructorsInternedStr {
          get { return constructorsInternedStr_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EnumConstructors);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EnumConstructors other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!constructorsStr_.Equals(other.constructorsStr_)) return false;
          if(!constructorsInternedStr_.Equals(other.constructorsInternedStr_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= constructorsStr_.GetHashCode();
          hash ^= constructorsInternedStr_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          constructorsStr_.WriteTo(output, _repeated_constructorsStr_codec);
          constructorsInternedStr_.WriteTo(output, _repeated_constructorsInternedStr_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += constructorsStr_.CalculateSize(_repeated_constructorsStr_codec);
          size += constructorsInternedStr_.CalculateSize(_repeated_constructorsInternedStr_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EnumConstructors other) {
          if (other == null) {
            return;
          }
          constructorsStr_.Add(other.constructorsStr_);
          constructorsInternedStr_.Add(other.constructorsInternedStr_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                constructorsStr_.AddEntriesFrom(input, _repeated_constructorsStr_codec);
                break;
              }
              case 18:
              case 16: {
                constructorsInternedStr_.AddEntriesFrom(input, _repeated_constructorsInternedStr_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Value definition
  /// </summary>
  public sealed partial class DefValue : pb::IMessage<DefValue> {
    private static readonly pb::MessageParser<DefValue> _parser = new pb::MessageParser<DefValue>(() => new DefValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefValue(DefValue other) : this() {
      nameWithType_ = other.nameWithType_ != null ? other.nameWithType_.Clone() : null;
      expr_ = other.expr_ != null ? other.expr_.Clone() : null;
      noPartyLiterals_ = other.noPartyLiterals_;
      isTest_ = other.isTest_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefValue Clone() {
      return new DefValue(this);
    }

    /// <summary>Field number for the "name_with_type" field.</summary>
    public const int NameWithTypeFieldNumber = 1;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue.Types.NameWithType nameWithType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue.Types.NameWithType NameWithType {
      get { return nameWithType_; }
      set {
        nameWithType_ = value;
      }
    }

    /// <summary>Field number for the "expr" field.</summary>
    public const int ExprFieldNumber = 2;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr expr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr Expr {
      get { return expr_; }
      set {
        expr_ = value;
      }
    }

    /// <summary>Field number for the "no_party_literals" field.</summary>
    public const int NoPartyLiteralsFieldNumber = 3;
    private bool noPartyLiterals_;
    /// <summary>
    /// If true, the value must not contain any party literals and not reference
    /// values which contain party literals.
    /// This flag is used to simplify package validation by not requiring an
    /// inference but only a check. Such a check must validate that this flag is
    /// set correctly and that templates do not reference values which have this
    /// flag set to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoPartyLiterals {
      get { return noPartyLiterals_; }
      set {
        noPartyLiterals_ = value;
      }
    }

    /// <summary>Field number for the "is_test" field.</summary>
    public const int IsTestFieldNumber = 4;
    private bool isTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTest {
      get { return isTest_; }
      set {
        isTest_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 5;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NameWithType, other.NameWithType)) return false;
      if (!object.Equals(Expr, other.Expr)) return false;
      if (NoPartyLiterals != other.NoPartyLiterals) return false;
      if (IsTest != other.IsTest) return false;
      if (!object.Equals(Location, other.Location)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nameWithType_ != null) hash ^= NameWithType.GetHashCode();
      if (expr_ != null) hash ^= Expr.GetHashCode();
      if (NoPartyLiterals != false) hash ^= NoPartyLiterals.GetHashCode();
      if (IsTest != false) hash ^= IsTest.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nameWithType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NameWithType);
      }
      if (expr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expr);
      }
      if (NoPartyLiterals != false) {
        output.WriteRawTag(24);
        output.WriteBool(NoPartyLiterals);
      }
      if (IsTest != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsTest);
      }
      if (location_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nameWithType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameWithType);
      }
      if (expr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
      }
      if (NoPartyLiterals != false) {
        size += 1 + 1;
      }
      if (IsTest != false) {
        size += 1 + 1;
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefValue other) {
      if (other == null) {
        return;
      }
      if (other.nameWithType_ != null) {
        if (nameWithType_ == null) {
          NameWithType = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue.Types.NameWithType();
        }
        NameWithType.MergeFrom(other.NameWithType);
      }
      if (other.expr_ != null) {
        if (expr_ == null) {
          Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
        }
        Expr.MergeFrom(other.Expr);
      }
      if (other.NoPartyLiterals != false) {
        NoPartyLiterals = other.NoPartyLiterals;
      }
      if (other.IsTest != false) {
        IsTest = other.IsTest;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (nameWithType_ == null) {
              NameWithType = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue.Types.NameWithType();
            }
            input.ReadMessage(NameWithType);
            break;
          }
          case 18: {
            if (expr_ == null) {
              Expr = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Expr();
            }
            input.ReadMessage(Expr);
            break;
          }
          case 24: {
            NoPartyLiterals = input.ReadBool();
            break;
          }
          case 32: {
            IsTest = input.ReadBool();
            break;
          }
          case 42: {
            if (location_ == null) {
              Location = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Location();
            }
            input.ReadMessage(Location);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DefValue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The reason why we have this type instead of just flattening name
      /// and type in DefValue is that it was VarWithType before, and we
      /// want to be binary-compatible with it.
      /// </summary>
      public sealed partial class NameWithType : pb::IMessage<NameWithType> {
        private static readonly pb::MessageParser<NameWithType> _parser = new pb::MessageParser<NameWithType>(() => new NameWithType());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NameWithType> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NameWithType() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NameWithType(NameWithType other) : this() {
          nameDname_ = other.nameDname_.Clone();
          nameInternedDname_ = other.nameInternedDname_;
          type_ = other.type_ != null ? other.type_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NameWithType Clone() {
          return new NameWithType(this);
        }

        /// <summary>Field number for the "name_dname" field.</summary>
        public const int NameDnameFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_nameDname_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> nameDname_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// *Must a non-empty list a valid identifier*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> NameDname {
          get { return nameDname_; }
        }

        /// <summary>Field number for the "name_interned_dname" field.</summary>
        public const int NameInternedDnameFieldNumber = 3;
        private int nameInternedDname_;
        /// <summary>
        /// *Must be a valid interned name*
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NameInternedDname {
          get { return nameInternedDname_; }
          set {
            nameInternedDname_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type type_;
        /// <summary>
        /// Type of the value
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NameWithType);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NameWithType other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!nameDname_.Equals(other.nameDname_)) return false;
          if (NameInternedDname != other.NameInternedDname) return false;
          if (!object.Equals(Type, other.Type)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= nameDname_.GetHashCode();
          if (NameInternedDname != 0) hash ^= NameInternedDname.GetHashCode();
          if (type_ != null) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          nameDname_.WriteTo(output, _repeated_nameDname_codec);
          if (type_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Type);
          }
          if (NameInternedDname != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(NameInternedDname);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += nameDname_.CalculateSize(_repeated_nameDname_codec);
          if (NameInternedDname != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameInternedDname);
          }
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NameWithType other) {
          if (other == null) {
            return;
          }
          nameDname_.Add(other.nameDname_);
          if (other.NameInternedDname != 0) {
            NameInternedDname = other.NameInternedDname;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
            }
            Type.MergeFrom(other.Type);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                nameDname_.AddEntriesFrom(input, _repeated_nameDname_codec);
                break;
              }
              case 18: {
                if (type_ == null) {
                  Type = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Type();
                }
                input.ReadMessage(Type);
                break;
              }
              case 24: {
                NameInternedDname = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class FeatureFlags : pb::IMessage<FeatureFlags> {
    private static readonly pb::MessageParser<FeatureFlags> _parser = new pb::MessageParser<FeatureFlags>(() => new FeatureFlags());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureFlags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlags(FeatureFlags other) : this() {
      forbidPartyLiterals_ = other.forbidPartyLiterals_;
      dontDivulgeContractIdsInCreateArguments_ = other.dontDivulgeContractIdsInCreateArguments_;
      dontDiscloseNonConsumingChoicesToObservers_ = other.dontDiscloseNonConsumingChoicesToObservers_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureFlags Clone() {
      return new FeatureFlags(this);
    }

    /// <summary>Field number for the "forbidPartyLiterals" field.</summary>
    public const int ForbidPartyLiteralsFieldNumber = 1;
    private bool forbidPartyLiterals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForbidPartyLiterals {
      get { return forbidPartyLiterals_; }
      set {
        forbidPartyLiterals_ = value;
      }
    }

    /// <summary>Field number for the "dontDivulgeContractIdsInCreateArguments" field.</summary>
    public const int DontDivulgeContractIdsInCreateArgumentsFieldNumber = 2;
    private bool dontDivulgeContractIdsInCreateArguments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DontDivulgeContractIdsInCreateArguments {
      get { return dontDivulgeContractIdsInCreateArguments_; }
      set {
        dontDivulgeContractIdsInCreateArguments_ = value;
      }
    }

    /// <summary>Field number for the "dontDiscloseNonConsumingChoicesToObservers" field.</summary>
    public const int DontDiscloseNonConsumingChoicesToObserversFieldNumber = 3;
    private bool dontDiscloseNonConsumingChoicesToObservers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DontDiscloseNonConsumingChoicesToObservers {
      get { return dontDiscloseNonConsumingChoicesToObservers_; }
      set {
        dontDiscloseNonConsumingChoicesToObservers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureFlags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureFlags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ForbidPartyLiterals != other.ForbidPartyLiterals) return false;
      if (DontDivulgeContractIdsInCreateArguments != other.DontDivulgeContractIdsInCreateArguments) return false;
      if (DontDiscloseNonConsumingChoicesToObservers != other.DontDiscloseNonConsumingChoicesToObservers) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ForbidPartyLiterals != false) hash ^= ForbidPartyLiterals.GetHashCode();
      if (DontDivulgeContractIdsInCreateArguments != false) hash ^= DontDivulgeContractIdsInCreateArguments.GetHashCode();
      if (DontDiscloseNonConsumingChoicesToObservers != false) hash ^= DontDiscloseNonConsumingChoicesToObservers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ForbidPartyLiterals != false) {
        output.WriteRawTag(8);
        output.WriteBool(ForbidPartyLiterals);
      }
      if (DontDivulgeContractIdsInCreateArguments != false) {
        output.WriteRawTag(16);
        output.WriteBool(DontDivulgeContractIdsInCreateArguments);
      }
      if (DontDiscloseNonConsumingChoicesToObservers != false) {
        output.WriteRawTag(24);
        output.WriteBool(DontDiscloseNonConsumingChoicesToObservers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ForbidPartyLiterals != false) {
        size += 1 + 1;
      }
      if (DontDivulgeContractIdsInCreateArguments != false) {
        size += 1 + 1;
      }
      if (DontDiscloseNonConsumingChoicesToObservers != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureFlags other) {
      if (other == null) {
        return;
      }
      if (other.ForbidPartyLiterals != false) {
        ForbidPartyLiterals = other.ForbidPartyLiterals;
      }
      if (other.DontDivulgeContractIdsInCreateArguments != false) {
        DontDivulgeContractIdsInCreateArguments = other.DontDivulgeContractIdsInCreateArguments;
      }
      if (other.DontDiscloseNonConsumingChoicesToObservers != false) {
        DontDiscloseNonConsumingChoicesToObservers = other.DontDiscloseNonConsumingChoicesToObservers;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ForbidPartyLiterals = input.ReadBool();
            break;
          }
          case 16: {
            DontDivulgeContractIdsInCreateArguments = input.ReadBool();
            break;
          }
          case 24: {
            DontDiscloseNonConsumingChoicesToObservers = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Module : pb::IMessage<Module> {
    private static readonly pb::MessageParser<Module> _parser = new pb::MessageParser<Module>(() => new Module());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Module> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module(Module other) : this() {
      flags_ = other.flags_ != null ? other.flags_.Clone() : null;
      dataTypes_ = other.dataTypes_.Clone();
      values_ = other.values_.Clone();
      templates_ = other.templates_.Clone();
      switch (other.NameCase) {
        case NameOneofCase.NameDname:
          NameDname = other.NameDname.Clone();
          break;
        case NameOneofCase.NameInternedDname:
          NameInternedDname = other.NameInternedDname;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module Clone() {
      return new Module(this);
    }

    /// <summary>Field number for the "name_dname" field.</summary>
    public const int NameDnameFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName NameDname {
      get { return nameCase_ == NameOneofCase.NameDname ? (global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName) name_ : null; }
      set {
        name_ = value;
        nameCase_ = value == null ? NameOneofCase.None : NameOneofCase.NameDname;
      }
    }

    /// <summary>Field number for the "name_interned_dname" field.</summary>
    public const int NameInternedDnameFieldNumber = 8;
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameInternedDname {
      get { return nameCase_ == NameOneofCase.NameInternedDname ? (int) name_ : 0; }
      set {
        name_ = value;
        nameCase_ = NameOneofCase.NameInternedDname;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 4;
    private global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FeatureFlags flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FeatureFlags Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "data_types" field.</summary>
    public const int DataTypesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType> _repeated_dataTypes_codec
        = pb::FieldCodec.ForMessage(42, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType> dataTypes_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefDataType> DataTypes {
      get { return dataTypes_; }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue> _repeated_values_codec
        = pb::FieldCodec.ForMessage(50, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue> values_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefValue> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "templates" field.</summary>
    public const int TemplatesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate> _repeated_templates_codec
        = pb::FieldCodec.ForMessage(58, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate> templates_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DefTemplate> Templates {
      get { return templates_; }
    }

    private object name_;
    /// <summary>Enum of possible cases for the "name" oneof.</summary>
    public enum NameOneofCase {
      None = 0,
      NameDname = 1,
      NameInternedDname = 8,
    }
    private NameOneofCase nameCase_ = NameOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameOneofCase NameCase {
      get { return nameCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      nameCase_ = NameOneofCase.None;
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Module);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Module other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NameDname, other.NameDname)) return false;
      if (NameInternedDname != other.NameInternedDname) return false;
      if (!object.Equals(Flags, other.Flags)) return false;
      if(!dataTypes_.Equals(other.dataTypes_)) return false;
      if(!values_.Equals(other.values_)) return false;
      if(!templates_.Equals(other.templates_)) return false;
      if (NameCase != other.NameCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nameCase_ == NameOneofCase.NameDname) hash ^= NameDname.GetHashCode();
      if (nameCase_ == NameOneofCase.NameInternedDname) hash ^= NameInternedDname.GetHashCode();
      if (flags_ != null) hash ^= Flags.GetHashCode();
      hash ^= dataTypes_.GetHashCode();
      hash ^= values_.GetHashCode();
      hash ^= templates_.GetHashCode();
      hash ^= (int) nameCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nameCase_ == NameOneofCase.NameDname) {
        output.WriteRawTag(10);
        output.WriteMessage(NameDname);
      }
      if (flags_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Flags);
      }
      dataTypes_.WriteTo(output, _repeated_dataTypes_codec);
      values_.WriteTo(output, _repeated_values_codec);
      templates_.WriteTo(output, _repeated_templates_codec);
      if (nameCase_ == NameOneofCase.NameInternedDname) {
        output.WriteRawTag(64);
        output.WriteInt32(NameInternedDname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nameCase_ == NameOneofCase.NameDname) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameDname);
      }
      if (nameCase_ == NameOneofCase.NameInternedDname) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameInternedDname);
      }
      if (flags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flags);
      }
      size += dataTypes_.CalculateSize(_repeated_dataTypes_codec);
      size += values_.CalculateSize(_repeated_values_codec);
      size += templates_.CalculateSize(_repeated_templates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Module other) {
      if (other == null) {
        return;
      }
      if (other.flags_ != null) {
        if (flags_ == null) {
          Flags = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FeatureFlags();
        }
        Flags.MergeFrom(other.Flags);
      }
      dataTypes_.Add(other.dataTypes_);
      values_.Add(other.values_);
      templates_.Add(other.templates_);
      switch (other.NameCase) {
        case NameOneofCase.NameDname:
          if (NameDname == null) {
            NameDname = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName();
          }
          NameDname.MergeFrom(other.NameDname);
          break;
        case NameOneofCase.NameInternedDname:
          NameInternedDname = other.NameInternedDname;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName subBuilder = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DottedName();
            if (nameCase_ == NameOneofCase.NameDname) {
              subBuilder.MergeFrom(NameDname);
            }
            input.ReadMessage(subBuilder);
            NameDname = subBuilder;
            break;
          }
          case 34: {
            if (flags_ == null) {
              Flags = new global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.FeatureFlags();
            }
            input.ReadMessage(Flags);
            break;
          }
          case 42: {
            dataTypes_.AddEntriesFrom(input, _repeated_dataTypes_codec);
            break;
          }
          case 50: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 58: {
            templates_.AddEntriesFrom(input, _repeated_templates_codec);
            break;
          }
          case 64: {
            NameInternedDname = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InternedDottedName : pb::IMessage<InternedDottedName> {
    private static readonly pb::MessageParser<InternedDottedName> _parser = new pb::MessageParser<InternedDottedName>(() => new InternedDottedName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternedDottedName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternedDottedName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternedDottedName(InternedDottedName other) : this() {
      segmentsInternedStr_ = other.segmentsInternedStr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternedDottedName Clone() {
      return new InternedDottedName(this);
    }

    /// <summary>Field number for the "segments_interned_str" field.</summary>
    public const int SegmentsInternedStrFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_segmentsInternedStr_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> segmentsInternedStr_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SegmentsInternedStr {
      get { return segmentsInternedStr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternedDottedName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternedDottedName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!segmentsInternedStr_.Equals(other.segmentsInternedStr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= segmentsInternedStr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      segmentsInternedStr_.WriteTo(output, _repeated_segmentsInternedStr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += segmentsInternedStr_.CalculateSize(_repeated_segmentsInternedStr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternedDottedName other) {
      if (other == null) {
        return;
      }
      segmentsInternedStr_.Add(other.segmentsInternedStr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            segmentsInternedStr_.AddEntriesFrom(input, _repeated_segmentsInternedStr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Package : pb::IMessage<Package> {
    private static readonly pb::MessageParser<Package> _parser = new pb::MessageParser<Package>(() => new Package());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Package> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.DamlLf1Reflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package(Package other) : this() {
      modules_ = other.modules_.Clone();
      internedStrings_ = other.internedStrings_.Clone();
      internedDottedNames_ = other.internedDottedNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package Clone() {
      return new Package(this);
    }

    /// <summary>Field number for the "modules" field.</summary>
    public const int ModulesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Module> _repeated_modules_codec
        = pb::FieldCodec.ForMessage(10, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Module.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Module> modules_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Module>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.Module> Modules {
      get { return modules_; }
    }

    /// <summary>Field number for the "interned_strings" field.</summary>
    public const int InternedStringsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_internedStrings_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> internedStrings_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// *Available in versions >= 1.6*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InternedStrings {
      get { return internedStrings_; }
    }

    /// <summary>Field number for the "interned_dotted_names" field.</summary>
    public const int InternedDottedNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.InternedDottedName> _repeated_internedDottedNames_codec
        = pb::FieldCodec.ForMessage(26, global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.InternedDottedName.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.InternedDottedName> internedDottedNames_ = new pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.InternedDottedName>();
    /// <summary>
    /// *Available in versions >= 1.7*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Daml_Lf_1_7.DamlLf1.InternedDottedName> InternedDottedNames {
      get { return internedDottedNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Package);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Package other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!modules_.Equals(other.modules_)) return false;
      if(!internedStrings_.Equals(other.internedStrings_)) return false;
      if(!internedDottedNames_.Equals(other.internedDottedNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= modules_.GetHashCode();
      hash ^= internedStrings_.GetHashCode();
      hash ^= internedDottedNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      modules_.WriteTo(output, _repeated_modules_codec);
      internedStrings_.WriteTo(output, _repeated_internedStrings_codec);
      internedDottedNames_.WriteTo(output, _repeated_internedDottedNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += modules_.CalculateSize(_repeated_modules_codec);
      size += internedStrings_.CalculateSize(_repeated_internedStrings_codec);
      size += internedDottedNames_.CalculateSize(_repeated_internedDottedNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Package other) {
      if (other == null) {
        return;
      }
      modules_.Add(other.modules_);
      internedStrings_.Add(other.internedStrings_);
      internedDottedNames_.Add(other.internedDottedNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            modules_.AddEntriesFrom(input, _repeated_modules_codec);
            break;
          }
          case 18: {
            internedStrings_.AddEntriesFrom(input, _repeated_internedStrings_codec);
            break;
          }
          case 26: {
            internedDottedNames_.AddEntriesFrom(input, _repeated_internedDottedNames_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
