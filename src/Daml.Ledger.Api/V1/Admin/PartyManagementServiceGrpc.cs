// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/digitalasset/ledger/api/v1/admin/party_management_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Com.DigitalAsset.Ledger.Api.V1.Admin {
  /// <summary>
  /// Inspect the party management state of a ledger participant and modify the
  /// parts that are modifiable. We use 'backing participant' to refer to this
  /// specific participant in the methods of this API.
  /// When the participant is run in mode requiring authentication, all the calls 
  /// in this interface will respond with UNAUTHENTICATED, if the caller fails
  /// to provide a valid access token, and will respond with PERMISSION_DENIED, if
  /// the claims in the token are insufficient to perform a given operation.
  /// Subsequently, only specific errors of individual calls not related to 
  /// authorization will be described.
  /// </summary>
  public static partial class PartyManagementService
  {
    static readonly string __ServiceName = "com.digitalasset.ledger.api.v1.admin.PartyManagementService";

    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdRequest> __Marshaller_com_digitalasset_ledger_api_v1_admin_GetParticipantIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdResponse> __Marshaller_com_digitalasset_ledger_api_v1_admin_GetParticipantIdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesRequest> __Marshaller_com_digitalasset_ledger_api_v1_admin_ListKnownPartiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesResponse> __Marshaller_com_digitalasset_ledger_api_v1_admin_ListKnownPartiesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyRequest> __Marshaller_com_digitalasset_ledger_api_v1_admin_AllocatePartyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyResponse> __Marshaller_com_digitalasset_ledger_api_v1_admin_AllocatePartyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdResponse> __Method_GetParticipantId = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetParticipantId",
        __Marshaller_com_digitalasset_ledger_api_v1_admin_GetParticipantIdRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_admin_GetParticipantIdResponse);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesRequest, global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesResponse> __Method_ListKnownParties = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesRequest, global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListKnownParties",
        __Marshaller_com_digitalasset_ledger_api_v1_admin_ListKnownPartiesRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_admin_ListKnownPartiesResponse);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyRequest, global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyResponse> __Method_AllocateParty = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyRequest, global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AllocateParty",
        __Marshaller_com_digitalasset_ledger_api_v1_admin_AllocatePartyRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_admin_AllocatePartyResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.Admin.PartyManagementServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PartyManagementService</summary>
    [grpc::BindServiceMethod(typeof(PartyManagementService), "BindService")]
    public abstract partial class PartyManagementServiceBase
    {
      /// <summary>
      /// Return the identifier of the backing participant.
      /// All horizontally scaled replicas should return the same id.
      /// This method is expected to succeed provided the backing participant is 
      /// healthy, otherwise it responds with INTERNAL grpc error.
      /// daml-on-sql: returns an identifier supplied on command line at launch time
      /// daml-on-kv-ledger: as above
      /// canton: returns globally unique identifier of the backing participant
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdResponse> GetParticipantId(global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the parties known by the backing participant.
      /// The list returned contains parties whose ledger access is facilitated by
      /// backing participant and the ones maintained elsewhere.
      /// This request will always succeed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesResponse> ListKnownParties(global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds a new party to the set managed by the backing participant.
      /// Caller specifies a party identifier suggestion, the actual identifier
      /// allocated might be different and is implementation specific.
      /// This call may:
      /// - Succeed, in which case the actual allocated identifier is visible in
      ///   the response.
      /// - Respond with UNIMPLEMENTED if synchronous party allocation is not
      ///   supported by the backing participant.
      /// - Respond with INVALID_ARGUMENT if the provided hint and/or display name
      ///   is invalid on the given ledger (see below).
      /// daml-on-sql: suggestion's uniqueness is checked and call rejected if the
      /// identifier is already present
      /// daml-on-kv-ledger: suggestion's uniqueness is checked by the validators in
      /// the consensus layer and call rejected if the identifier is already present.
      /// canton: completely different globally unique identifier is allocated.
      /// Behind the scenes calls to an internal protocol are made. As that protocol
      /// is richer than the the surface protocol, the arguments take implicit values
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyResponse> AllocateParty(global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PartyManagementService</summary>
    public partial class PartyManagementServiceClient : grpc::ClientBase<PartyManagementServiceClient>
    {
      /// <summary>Creates a new client for PartyManagementService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PartyManagementServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PartyManagementService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PartyManagementServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PartyManagementServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PartyManagementServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Return the identifier of the backing participant.
      /// All horizontally scaled replicas should return the same id.
      /// This method is expected to succeed provided the backing participant is 
      /// healthy, otherwise it responds with INTERNAL grpc error.
      /// daml-on-sql: returns an identifier supplied on command line at launch time
      /// daml-on-kv-ledger: as above
      /// canton: returns globally unique identifier of the backing participant
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdResponse GetParticipantId(global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return the identifier of the backing participant.
      /// All horizontally scaled replicas should return the same id.
      /// This method is expected to succeed provided the backing participant is 
      /// healthy, otherwise it responds with INTERNAL grpc error.
      /// daml-on-sql: returns an identifier supplied on command line at launch time
      /// daml-on-kv-ledger: as above
      /// canton: returns globally unique identifier of the backing participant
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdResponse GetParticipantId(global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetParticipantId, null, options, request);
      }
      /// <summary>
      /// Return the identifier of the backing participant.
      /// All horizontally scaled replicas should return the same id.
      /// This method is expected to succeed provided the backing participant is 
      /// healthy, otherwise it responds with INTERNAL grpc error.
      /// daml-on-sql: returns an identifier supplied on command line at launch time
      /// daml-on-kv-ledger: as above
      /// canton: returns globally unique identifier of the backing participant
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdResponse> GetParticipantIdAsync(global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetParticipantIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return the identifier of the backing participant.
      /// All horizontally scaled replicas should return the same id.
      /// This method is expected to succeed provided the backing participant is 
      /// healthy, otherwise it responds with INTERNAL grpc error.
      /// daml-on-sql: returns an identifier supplied on command line at launch time
      /// daml-on-kv-ledger: as above
      /// canton: returns globally unique identifier of the backing participant
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdResponse> GetParticipantIdAsync(global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetParticipantId, null, options, request);
      }
      /// <summary>
      /// List the parties known by the backing participant.
      /// The list returned contains parties whose ledger access is facilitated by
      /// backing participant and the ones maintained elsewhere.
      /// This request will always succeed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesResponse ListKnownParties(global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKnownParties(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the parties known by the backing participant.
      /// The list returned contains parties whose ledger access is facilitated by
      /// backing participant and the ones maintained elsewhere.
      /// This request will always succeed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesResponse ListKnownParties(global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListKnownParties, null, options, request);
      }
      /// <summary>
      /// List the parties known by the backing participant.
      /// The list returned contains parties whose ledger access is facilitated by
      /// backing participant and the ones maintained elsewhere.
      /// This request will always succeed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesResponse> ListKnownPartiesAsync(global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKnownPartiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the parties known by the backing participant.
      /// The list returned contains parties whose ledger access is facilitated by
      /// backing participant and the ones maintained elsewhere.
      /// This request will always succeed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesResponse> ListKnownPartiesAsync(global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListKnownParties, null, options, request);
      }
      /// <summary>
      /// Adds a new party to the set managed by the backing participant.
      /// Caller specifies a party identifier suggestion, the actual identifier
      /// allocated might be different and is implementation specific.
      /// This call may:
      /// - Succeed, in which case the actual allocated identifier is visible in
      ///   the response.
      /// - Respond with UNIMPLEMENTED if synchronous party allocation is not
      ///   supported by the backing participant.
      /// - Respond with INVALID_ARGUMENT if the provided hint and/or display name
      ///   is invalid on the given ledger (see below).
      /// daml-on-sql: suggestion's uniqueness is checked and call rejected if the
      /// identifier is already present
      /// daml-on-kv-ledger: suggestion's uniqueness is checked by the validators in
      /// the consensus layer and call rejected if the identifier is already present.
      /// canton: completely different globally unique identifier is allocated.
      /// Behind the scenes calls to an internal protocol are made. As that protocol
      /// is richer than the the surface protocol, the arguments take implicit values
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyResponse AllocateParty(global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllocateParty(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a new party to the set managed by the backing participant.
      /// Caller specifies a party identifier suggestion, the actual identifier
      /// allocated might be different and is implementation specific.
      /// This call may:
      /// - Succeed, in which case the actual allocated identifier is visible in
      ///   the response.
      /// - Respond with UNIMPLEMENTED if synchronous party allocation is not
      ///   supported by the backing participant.
      /// - Respond with INVALID_ARGUMENT if the provided hint and/or display name
      ///   is invalid on the given ledger (see below).
      /// daml-on-sql: suggestion's uniqueness is checked and call rejected if the
      /// identifier is already present
      /// daml-on-kv-ledger: suggestion's uniqueness is checked by the validators in
      /// the consensus layer and call rejected if the identifier is already present.
      /// canton: completely different globally unique identifier is allocated.
      /// Behind the scenes calls to an internal protocol are made. As that protocol
      /// is richer than the the surface protocol, the arguments take implicit values
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyResponse AllocateParty(global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllocateParty, null, options, request);
      }
      /// <summary>
      /// Adds a new party to the set managed by the backing participant.
      /// Caller specifies a party identifier suggestion, the actual identifier
      /// allocated might be different and is implementation specific.
      /// This call may:
      /// - Succeed, in which case the actual allocated identifier is visible in
      ///   the response.
      /// - Respond with UNIMPLEMENTED if synchronous party allocation is not
      ///   supported by the backing participant.
      /// - Respond with INVALID_ARGUMENT if the provided hint and/or display name
      ///   is invalid on the given ledger (see below).
      /// daml-on-sql: suggestion's uniqueness is checked and call rejected if the
      /// identifier is already present
      /// daml-on-kv-ledger: suggestion's uniqueness is checked by the validators in
      /// the consensus layer and call rejected if the identifier is already present.
      /// canton: completely different globally unique identifier is allocated.
      /// Behind the scenes calls to an internal protocol are made. As that protocol
      /// is richer than the the surface protocol, the arguments take implicit values
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyResponse> AllocatePartyAsync(global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllocatePartyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a new party to the set managed by the backing participant.
      /// Caller specifies a party identifier suggestion, the actual identifier
      /// allocated might be different and is implementation specific.
      /// This call may:
      /// - Succeed, in which case the actual allocated identifier is visible in
      ///   the response.
      /// - Respond with UNIMPLEMENTED if synchronous party allocation is not
      ///   supported by the backing participant.
      /// - Respond with INVALID_ARGUMENT if the provided hint and/or display name
      ///   is invalid on the given ledger (see below).
      /// daml-on-sql: suggestion's uniqueness is checked and call rejected if the
      /// identifier is already present
      /// daml-on-kv-ledger: suggestion's uniqueness is checked by the validators in
      /// the consensus layer and call rejected if the identifier is already present.
      /// canton: completely different globally unique identifier is allocated.
      /// Behind the scenes calls to an internal protocol are made. As that protocol
      /// is richer than the the surface protocol, the arguments take implicit values
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyResponse> AllocatePartyAsync(global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllocateParty, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PartyManagementServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PartyManagementServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PartyManagementServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetParticipantId, serviceImpl.GetParticipantId)
          .AddMethod(__Method_ListKnownParties, serviceImpl.ListKnownParties)
          .AddMethod(__Method_AllocateParty, serviceImpl.AllocateParty).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PartyManagementServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetParticipantId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.Admin.GetParticipantIdResponse>(serviceImpl.GetParticipantId));
      serviceBinder.AddMethod(__Method_ListKnownParties, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesRequest, global::Com.DigitalAsset.Ledger.Api.V1.Admin.ListKnownPartiesResponse>(serviceImpl.ListKnownParties));
      serviceBinder.AddMethod(__Method_AllocateParty, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyRequest, global::Com.DigitalAsset.Ledger.Api.V1.Admin.AllocatePartyResponse>(serviceImpl.AllocateParty));
    }

  }
}
#endregion
