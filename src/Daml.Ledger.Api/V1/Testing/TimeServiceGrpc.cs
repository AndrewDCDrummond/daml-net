// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/digitalasset/ledger/api/v1/testing/time_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Com.DigitalAsset.Ledger.Api.V1.Testing {
  /// <summary>
  /// Optional service, exposed for testing static time scenarios.
  /// </summary>
  public static partial class TimeService
  {
    static readonly string __ServiceName = "com.digitalasset.ledger.api.v1.testing.TimeService";

    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeRequest> __Marshaller_com_digitalasset_ledger_api_v1_testing_GetTimeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeResponse> __Marshaller_com_digitalasset_ledger_api_v1_testing_GetTimeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.Testing.SetTimeRequest> __Marshaller_com_digitalasset_ledger_api_v1_testing_SetTimeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.Testing.SetTimeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeRequest, global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeResponse> __Method_GetTime = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeRequest, global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetTime",
        __Marshaller_com_digitalasset_ledger_api_v1_testing_GetTimeRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_testing_GetTimeResponse);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.Testing.SetTimeRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetTime = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.Testing.SetTimeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTime",
        __Marshaller_com_digitalasset_ledger_api_v1_testing_SetTimeRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.Testing.TimeServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TimeService</summary>
    [grpc::BindServiceMethod(typeof(TimeService), "BindService")]
    public abstract partial class TimeServiceBase
    {
      /// <summary>
      /// Returns a stream of time updates.
      /// Always returns at least one response, where the first one is the current time.
      /// Subsequent responses are emitted whenever the ledger server's time is updated.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetTime(global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeRequest request, grpc::IServerStreamWriter<global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Allows clients to change the ledger's clock in an atomic get-and-set operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SetTime(global::Com.DigitalAsset.Ledger.Api.V1.Testing.SetTimeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TimeService</summary>
    public partial class TimeServiceClient : grpc::ClientBase<TimeServiceClient>
    {
      /// <summary>Creates a new client for TimeService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TimeServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TimeService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TimeServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TimeServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TimeServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns a stream of time updates.
      /// Always returns at least one response, where the first one is the current time.
      /// Subsequent responses are emitted whenever the ledger server's time is updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeResponse> GetTime(global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a stream of time updates.
      /// Always returns at least one response, where the first one is the current time.
      /// Subsequent responses are emitted whenever the ledger server's time is updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeResponse> GetTime(global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetTime, null, options, request);
      }
      /// <summary>
      /// Allows clients to change the ledger's clock in an atomic get-and-set operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetTime(global::Com.DigitalAsset.Ledger.Api.V1.Testing.SetTimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows clients to change the ledger's clock in an atomic get-and-set operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetTime(global::Com.DigitalAsset.Ledger.Api.V1.Testing.SetTimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTime, null, options, request);
      }
      /// <summary>
      /// Allows clients to change the ledger's clock in an atomic get-and-set operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetTimeAsync(global::Com.DigitalAsset.Ledger.Api.V1.Testing.SetTimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allows clients to change the ledger's clock in an atomic get-and-set operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetTimeAsync(global::Com.DigitalAsset.Ledger.Api.V1.Testing.SetTimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTime, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TimeServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TimeServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TimeServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTime, serviceImpl.GetTime)
          .AddMethod(__Method_SetTime, serviceImpl.SetTime).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TimeServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetTime, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeRequest, global::Com.DigitalAsset.Ledger.Api.V1.Testing.GetTimeResponse>(serviceImpl.GetTime));
      serviceBinder.AddMethod(__Method_SetTime, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.Testing.SetTimeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SetTime));
    }

  }
}
#endregion
