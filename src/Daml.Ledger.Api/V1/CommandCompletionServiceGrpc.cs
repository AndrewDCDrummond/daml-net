// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/digitalasset/ledger/api/v1/command_completion_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Com.DigitalAsset.Ledger.Api.V1 {
  /// <summary>
  /// Allows clients to observe the status of their submissions.
  /// Commands may be submitted via the Command Submission Service.
  /// The on-ledger effects of their submissions are disclosed by the Transaction Service.
  /// Commands may fail in 4 distinct manners:
  ///
  /// 1. ``INVALID_PARAMETER`` gRPC error on malformed payloads and missing required fields.
  /// 2. Failure communicated in the gRPC error.
  /// 3. Failure communicated in a Completion.
  /// 4. A Checkpoint with ``record_time`` > command ``mrt`` arrives through the Completion Stream, and the command's Completion was not visible before. In this case the command is lost.
  ///
  /// Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
  /// Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
  ///
  /// Interprocess tracing of command submissions may be achieved via Zipkin by filling out the ``trace_context`` field.
  /// The server will return a child context of the submitted one, (or a new one if the context was missing) on both the Completion and Transaction streams.
  /// </summary>
  public static partial class CommandCompletionService
  {
    static readonly string __ServiceName = "com.digitalasset.ledger.api.v1.CommandCompletionService";

    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamRequest> __Marshaller_com_digitalasset_ledger_api_v1_CompletionStreamRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamResponse> __Marshaller_com_digitalasset_ledger_api_v1_CompletionStreamResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndRequest> __Marshaller_com_digitalasset_ledger_api_v1_CompletionEndRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndResponse> __Marshaller_com_digitalasset_ledger_api_v1_CompletionEndResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamRequest, global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamResponse> __Method_CompletionStream = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamRequest, global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CompletionStream",
        __Marshaller_com_digitalasset_ledger_api_v1_CompletionStreamRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_CompletionStreamResponse);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndRequest, global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndResponse> __Method_CompletionEnd = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndRequest, global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CompletionEnd",
        __Marshaller_com_digitalasset_ledger_api_v1_CompletionEndRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_CompletionEndResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.CommandCompletionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CommandCompletionService</summary>
    [grpc::BindServiceMethod(typeof(CommandCompletionService), "BindService")]
    public abstract partial class CommandCompletionServiceBase
    {
      /// <summary>
      /// Subscribe to command completion events.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task CompletionStream(global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamRequest request, grpc::IServerStreamWriter<global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the offset after the latest completion.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndResponse> CompletionEnd(global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CommandCompletionService</summary>
    public partial class CommandCompletionServiceClient : grpc::ClientBase<CommandCompletionServiceClient>
    {
      /// <summary>Creates a new client for CommandCompletionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CommandCompletionServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CommandCompletionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CommandCompletionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CommandCompletionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CommandCompletionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Subscribe to command completion events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamResponse> CompletionStream(global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompletionStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to command completion events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamResponse> CompletionStream(global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CompletionStream, null, options, request);
      }
      /// <summary>
      /// Returns the offset after the latest completion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndResponse CompletionEnd(global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompletionEnd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the offset after the latest completion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndResponse CompletionEnd(global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CompletionEnd, null, options, request);
      }
      /// <summary>
      /// Returns the offset after the latest completion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndResponse> CompletionEndAsync(global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompletionEndAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the offset after the latest completion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndResponse> CompletionEndAsync(global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CompletionEnd, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CommandCompletionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CommandCompletionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CommandCompletionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CompletionStream, serviceImpl.CompletionStream)
          .AddMethod(__Method_CompletionEnd, serviceImpl.CompletionEnd).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CommandCompletionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CompletionStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamRequest, global::Com.DigitalAsset.Ledger.Api.V1.CompletionStreamResponse>(serviceImpl.CompletionStream));
      serviceBinder.AddMethod(__Method_CompletionEnd, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndRequest, global::Com.DigitalAsset.Ledger.Api.V1.CompletionEndResponse>(serviceImpl.CompletionEnd));
    }

  }
}
#endregion
