// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/digitalasset/ledger/api/v1/active_contracts_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2019 The DAML Authors. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Com.DigitalAsset.Ledger.Api.V1 {
  /// <summary>
  /// Allows clients to initialize themselves according to a fairly recent state of the ledger without reading through all transactions that were committed since the ledger's creation.
  /// </summary>
  public static partial class ActiveContractsService
  {
    static readonly string __ServiceName = "com.digitalasset.ledger.api.v1.ActiveContractsService";

    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsRequest> __Marshaller_com_digitalasset_ledger_api_v1_GetActiveContractsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsResponse> __Marshaller_com_digitalasset_ledger_api_v1_GetActiveContractsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsResponse> __Method_GetActiveContracts = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetActiveContracts",
        __Marshaller_com_digitalasset_ledger_api_v1_GetActiveContractsRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_GetActiveContractsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.ActiveContractsServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ActiveContractsService</summary>
    [grpc::BindServiceMethod(typeof(ActiveContractsService), "BindService")]
    public abstract partial class ActiveContractsServiceBase
    {
      /// <summary>
      /// Returns a stream of the latest snapshot of active contracts.
      /// If there are no active contracts, the stream returns a single GetActiveContractsResponse message with the offset at which the snapshot has been taken.
      /// Clients SHOULD use the offset in the last GetActiveContractsResponse message to continue streaming transactions with the transaction service.
      /// Clients SHOULD NOT assume that the set of active contracts they receive reflects the state at the ledger end.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetActiveContracts(global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsRequest request, grpc::IServerStreamWriter<global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ActiveContractsService</summary>
    public partial class ActiveContractsServiceClient : grpc::ClientBase<ActiveContractsServiceClient>
    {
      /// <summary>Creates a new client for ActiveContractsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ActiveContractsServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ActiveContractsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ActiveContractsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ActiveContractsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ActiveContractsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns a stream of the latest snapshot of active contracts.
      /// If there are no active contracts, the stream returns a single GetActiveContractsResponse message with the offset at which the snapshot has been taken.
      /// Clients SHOULD use the offset in the last GetActiveContractsResponse message to continue streaming transactions with the transaction service.
      /// Clients SHOULD NOT assume that the set of active contracts they receive reflects the state at the ledger end.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsResponse> GetActiveContracts(global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActiveContracts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a stream of the latest snapshot of active contracts.
      /// If there are no active contracts, the stream returns a single GetActiveContractsResponse message with the offset at which the snapshot has been taken.
      /// Clients SHOULD use the offset in the last GetActiveContractsResponse message to continue streaming transactions with the transaction service.
      /// Clients SHOULD NOT assume that the set of active contracts they receive reflects the state at the ledger end.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsResponse> GetActiveContracts(global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetActiveContracts, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ActiveContractsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ActiveContractsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ActiveContractsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetActiveContracts, serviceImpl.GetActiveContracts).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ActiveContractsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetActiveContracts, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetActiveContractsResponse>(serviceImpl.GetActiveContracts));
    }

  }
}
#endregion
