// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/digitalasset/ledger/api/v1/package_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.DigitalAsset.Ledger.Api.V1 {

  /// <summary>Holder for reflection information generated from com/digitalasset/ledger/api/v1/package_service.proto</summary>
  public static partial class PackageServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for com/digitalasset/ledger/api/v1/package_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PackageServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRjb20vZGlnaXRhbGFzc2V0L2xlZGdlci9hcGkvdjEvcGFja2FnZV9zZXJ2",
            "aWNlLnByb3RvEh5jb20uZGlnaXRhbGFzc2V0LmxlZGdlci5hcGkudjEaMmNv",
            "bS9kaWdpdGFsYXNzZXQvbGVkZ2VyL2FwaS92MS90cmFjZV9jb250ZXh0LnBy",
            "b3RvIm4KE0xpc3RQYWNrYWdlc1JlcXVlc3QSEQoJbGVkZ2VyX2lkGAEgASgJ",
            "EkQKDXRyYWNlX2NvbnRleHQY6AcgASgLMiwuY29tLmRpZ2l0YWxhc3NldC5s",
            "ZWRnZXIuYXBpLnYxLlRyYWNlQ29udGV4dCIrChRMaXN0UGFja2FnZXNSZXNw",
            "b25zZRITCgtwYWNrYWdlX2lkcxgBIAMoCSKAAQoRR2V0UGFja2FnZVJlcXVl",
            "c3QSEQoJbGVkZ2VyX2lkGAEgASgJEhIKCnBhY2thZ2VfaWQYAiABKAkSRAoN",
            "dHJhY2VfY29udGV4dBjoByABKAsyLC5jb20uZGlnaXRhbGFzc2V0LmxlZGdl",
            "ci5hcGkudjEuVHJhY2VDb250ZXh0IoABChJHZXRQYWNrYWdlUmVzcG9uc2US",
            "QwoNaGFzaF9mdW5jdGlvbhgBIAEoDjIsLmNvbS5kaWdpdGFsYXNzZXQubGVk",
            "Z2VyLmFwaS52MS5IYXNoRnVuY3Rpb24SFwoPYXJjaGl2ZV9wYXlsb2FkGAIg",
            "ASgMEgwKBGhhc2gYAyABKAkihgEKF0dldFBhY2thZ2VTdGF0dXNSZXF1ZXN0",
            "EhEKCWxlZGdlcl9pZBgBIAEoCRISCgpwYWNrYWdlX2lkGAIgASgJEkQKDXRy",
            "YWNlX2NvbnRleHQY6AcgASgLMiwuY29tLmRpZ2l0YWxhc3NldC5sZWRnZXIu",
            "YXBpLnYxLlRyYWNlQ29udGV4dCJhChhHZXRQYWNrYWdlU3RhdHVzUmVzcG9u",
            "c2USRQoOcGFja2FnZV9zdGF0dXMYASABKA4yLS5jb20uZGlnaXRhbGFzc2V0",
            "LmxlZGdlci5hcGkudjEuUGFja2FnZVN0YXR1cyosCg1QYWNrYWdlU3RhdHVz",
            "EgsKB1VOS05PV04QABIOCgpSRUdJU1RFUkVEEAEqGgoMSGFzaEZ1bmN0aW9u",
            "EgoKBlNIQTI1NhAAMogDCg5QYWNrYWdlU2VydmljZRJ5CgxMaXN0UGFja2Fn",
            "ZXMSMy5jb20uZGlnaXRhbGFzc2V0LmxlZGdlci5hcGkudjEuTGlzdFBhY2th",
            "Z2VzUmVxdWVzdBo0LmNvbS5kaWdpdGFsYXNzZXQubGVkZ2VyLmFwaS52MS5M",
            "aXN0UGFja2FnZXNSZXNwb25zZRJzCgpHZXRQYWNrYWdlEjEuY29tLmRpZ2l0",
            "YWxhc3NldC5sZWRnZXIuYXBpLnYxLkdldFBhY2thZ2VSZXF1ZXN0GjIuY29t",
            "LmRpZ2l0YWxhc3NldC5sZWRnZXIuYXBpLnYxLkdldFBhY2thZ2VSZXNwb25z",
            "ZRKFAQoQR2V0UGFja2FnZVN0YXR1cxI3LmNvbS5kaWdpdGFsYXNzZXQubGVk",
            "Z2VyLmFwaS52MS5HZXRQYWNrYWdlU3RhdHVzUmVxdWVzdBo4LmNvbS5kaWdp",
            "dGFsYXNzZXQubGVkZ2VyLmFwaS52MS5HZXRQYWNrYWdlU3RhdHVzUmVzcG9u",
            "c2VCWwoeY29tLmRpZ2l0YWxhc3NldC5sZWRnZXIuYXBpLnYxQhhQYWNrYWdl",
            "U2VydmljZU91dGVyQ2xhc3OqAh5Db20uRGlnaXRhbEFzc2V0LkxlZGdlci5B",
            "cGkuVjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.DigitalAsset.Ledger.Api.V1.TraceContextReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.DigitalAsset.Ledger.Api.V1.PackageStatus), typeof(global::Com.DigitalAsset.Ledger.Api.V1.HashFunction), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.ListPackagesRequest), global::Com.DigitalAsset.Ledger.Api.V1.ListPackagesRequest.Parser, new[]{ "LedgerId", "TraceContext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.ListPackagesResponse), global::Com.DigitalAsset.Ledger.Api.V1.ListPackagesResponse.Parser, new[]{ "PackageIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.GetPackageRequest), global::Com.DigitalAsset.Ledger.Api.V1.GetPackageRequest.Parser, new[]{ "LedgerId", "PackageId", "TraceContext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.GetPackageResponse), global::Com.DigitalAsset.Ledger.Api.V1.GetPackageResponse.Parser, new[]{ "HashFunction", "ArchivePayload", "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.GetPackageStatusRequest), global::Com.DigitalAsset.Ledger.Api.V1.GetPackageStatusRequest.Parser, new[]{ "LedgerId", "PackageId", "TraceContext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.GetPackageStatusResponse), global::Com.DigitalAsset.Ledger.Api.V1.GetPackageStatusResponse.Parser, new[]{ "PackageStatus" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PackageStatus {
    /// <summary>
    /// The server is not aware of such a package.
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    /// The server is able to execute DAML commands operating on this package.
    /// </summary>
    [pbr::OriginalName("REGISTERED")] Registered = 1,
  }

  public enum HashFunction {
    [pbr::OriginalName("SHA256")] Sha256 = 0,
  }

  #endregion

  #region Messages
  public sealed partial class ListPackagesRequest : pb::IMessage<ListPackagesRequest> {
    private static readonly pb::MessageParser<ListPackagesRequest> _parser = new pb::MessageParser<ListPackagesRequest>(() => new ListPackagesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPackagesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.PackageServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPackagesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPackagesRequest(ListPackagesRequest other) : this() {
      ledgerId_ = other.ledgerId_;
      traceContext_ = other.traceContext_ != null ? other.traceContext_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPackagesRequest Clone() {
      return new ListPackagesRequest(this);
    }

    /// <summary>Field number for the "ledger_id" field.</summary>
    public const int LedgerIdFieldNumber = 1;
    private string ledgerId_ = "";
    /// <summary>
    /// Must correspond to the ledger ID reported by the Ledger Identification Service.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LedgerId {
      get { return ledgerId_; }
      set {
        ledgerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trace_context" field.</summary>
    public const int TraceContextFieldNumber = 1000;
    private global::Com.DigitalAsset.Ledger.Api.V1.TraceContext traceContext_;
    /// <summary>
    /// Server side tracing will be registered as a child of the submitted context.
    /// This field is a future extension point and is currently not supported.
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.TraceContext TraceContext {
      get { return traceContext_; }
      set {
        traceContext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPackagesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPackagesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LedgerId != other.LedgerId) return false;
      if (!object.Equals(TraceContext, other.TraceContext)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LedgerId.Length != 0) hash ^= LedgerId.GetHashCode();
      if (traceContext_ != null) hash ^= TraceContext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LedgerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LedgerId);
      }
      if (traceContext_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(TraceContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LedgerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LedgerId);
      }
      if (traceContext_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraceContext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPackagesRequest other) {
      if (other == null) {
        return;
      }
      if (other.LedgerId.Length != 0) {
        LedgerId = other.LedgerId;
      }
      if (other.traceContext_ != null) {
        if (traceContext_ == null) {
          TraceContext = new global::Com.DigitalAsset.Ledger.Api.V1.TraceContext();
        }
        TraceContext.MergeFrom(other.TraceContext);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LedgerId = input.ReadString();
            break;
          }
          case 8002: {
            if (traceContext_ == null) {
              TraceContext = new global::Com.DigitalAsset.Ledger.Api.V1.TraceContext();
            }
            input.ReadMessage(TraceContext);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListPackagesResponse : pb::IMessage<ListPackagesResponse> {
    private static readonly pb::MessageParser<ListPackagesResponse> _parser = new pb::MessageParser<ListPackagesResponse>(() => new ListPackagesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPackagesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.PackageServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPackagesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPackagesResponse(ListPackagesResponse other) : this() {
      packageIds_ = other.packageIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPackagesResponse Clone() {
      return new ListPackagesResponse(this);
    }

    /// <summary>Field number for the "package_ids" field.</summary>
    public const int PackageIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_packageIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> packageIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The IDs of all DAML-LF packages supported by the server.
    /// Each element must be a valid PackageIdString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PackageIds {
      get { return packageIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPackagesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPackagesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!packageIds_.Equals(other.packageIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= packageIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      packageIds_.WriteTo(output, _repeated_packageIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += packageIds_.CalculateSize(_repeated_packageIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPackagesResponse other) {
      if (other == null) {
        return;
      }
      packageIds_.Add(other.packageIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            packageIds_.AddEntriesFrom(input, _repeated_packageIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPackageRequest : pb::IMessage<GetPackageRequest> {
    private static readonly pb::MessageParser<GetPackageRequest> _parser = new pb::MessageParser<GetPackageRequest>(() => new GetPackageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPackageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.PackageServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageRequest(GetPackageRequest other) : this() {
      ledgerId_ = other.ledgerId_;
      packageId_ = other.packageId_;
      traceContext_ = other.traceContext_ != null ? other.traceContext_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageRequest Clone() {
      return new GetPackageRequest(this);
    }

    /// <summary>Field number for the "ledger_id" field.</summary>
    public const int LedgerIdFieldNumber = 1;
    private string ledgerId_ = "";
    /// <summary>
    /// Must correspond to the ledger ID reported by the Ledger Identification Service.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LedgerId {
      get { return ledgerId_; }
      set {
        ledgerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 2;
    private string packageId_ = "";
    /// <summary>
    /// The ID of the requested package.
    /// Must be a valid PackageIdString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageId {
      get { return packageId_; }
      set {
        packageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trace_context" field.</summary>
    public const int TraceContextFieldNumber = 1000;
    private global::Com.DigitalAsset.Ledger.Api.V1.TraceContext traceContext_;
    /// <summary>
    /// Server side tracing will be registered as a child of the submitted context.
    /// This field is a future extension point and is currently not supported.
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.TraceContext TraceContext {
      get { return traceContext_; }
      set {
        traceContext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPackageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPackageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LedgerId != other.LedgerId) return false;
      if (PackageId != other.PackageId) return false;
      if (!object.Equals(TraceContext, other.TraceContext)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LedgerId.Length != 0) hash ^= LedgerId.GetHashCode();
      if (PackageId.Length != 0) hash ^= PackageId.GetHashCode();
      if (traceContext_ != null) hash ^= TraceContext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LedgerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LedgerId);
      }
      if (PackageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PackageId);
      }
      if (traceContext_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(TraceContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LedgerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LedgerId);
      }
      if (PackageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageId);
      }
      if (traceContext_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraceContext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPackageRequest other) {
      if (other == null) {
        return;
      }
      if (other.LedgerId.Length != 0) {
        LedgerId = other.LedgerId;
      }
      if (other.PackageId.Length != 0) {
        PackageId = other.PackageId;
      }
      if (other.traceContext_ != null) {
        if (traceContext_ == null) {
          TraceContext = new global::Com.DigitalAsset.Ledger.Api.V1.TraceContext();
        }
        TraceContext.MergeFrom(other.TraceContext);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LedgerId = input.ReadString();
            break;
          }
          case 18: {
            PackageId = input.ReadString();
            break;
          }
          case 8002: {
            if (traceContext_ == null) {
              TraceContext = new global::Com.DigitalAsset.Ledger.Api.V1.TraceContext();
            }
            input.ReadMessage(TraceContext);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPackageResponse : pb::IMessage<GetPackageResponse> {
    private static readonly pb::MessageParser<GetPackageResponse> _parser = new pb::MessageParser<GetPackageResponse>(() => new GetPackageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPackageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.PackageServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageResponse(GetPackageResponse other) : this() {
      hashFunction_ = other.hashFunction_;
      archivePayload_ = other.archivePayload_;
      hash_ = other.hash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageResponse Clone() {
      return new GetPackageResponse(this);
    }

    /// <summary>Field number for the "hash_function" field.</summary>
    public const int HashFunctionFieldNumber = 1;
    private global::Com.DigitalAsset.Ledger.Api.V1.HashFunction hashFunction_ = 0;
    /// <summary>
    /// The hash function we use to calculate the hash.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.HashFunction HashFunction {
      get { return hashFunction_; }
      set {
        hashFunction_ = value;
      }
    }

    /// <summary>Field number for the "archive_payload" field.</summary>
    public const int ArchivePayloadFieldNumber = 2;
    private pb::ByteString archivePayload_ = pb::ByteString.Empty;
    /// <summary>
    /// Contains a ``daml_lf`` ArchivePayload. See further details in ``daml_lf.proto``.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArchivePayload {
      get { return archivePayload_; }
      set {
        archivePayload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 3;
    private string hash_ = "";
    /// <summary>
    /// The hash of the archive payload, can also used as a ``package_id``.
    /// Must be a valid PackageIdString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPackageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPackageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HashFunction != other.HashFunction) return false;
      if (ArchivePayload != other.ArchivePayload) return false;
      if (Hash != other.Hash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HashFunction != 0) hash ^= HashFunction.GetHashCode();
      if (ArchivePayload.Length != 0) hash ^= ArchivePayload.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HashFunction != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) HashFunction);
      }
      if (ArchivePayload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ArchivePayload);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Hash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HashFunction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HashFunction);
      }
      if (ArchivePayload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ArchivePayload);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPackageResponse other) {
      if (other == null) {
        return;
      }
      if (other.HashFunction != 0) {
        HashFunction = other.HashFunction;
      }
      if (other.ArchivePayload.Length != 0) {
        ArchivePayload = other.ArchivePayload;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HashFunction = (global::Com.DigitalAsset.Ledger.Api.V1.HashFunction) input.ReadEnum();
            break;
          }
          case 18: {
            ArchivePayload = input.ReadBytes();
            break;
          }
          case 26: {
            Hash = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPackageStatusRequest : pb::IMessage<GetPackageStatusRequest> {
    private static readonly pb::MessageParser<GetPackageStatusRequest> _parser = new pb::MessageParser<GetPackageStatusRequest>(() => new GetPackageStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPackageStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.PackageServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageStatusRequest(GetPackageStatusRequest other) : this() {
      ledgerId_ = other.ledgerId_;
      packageId_ = other.packageId_;
      traceContext_ = other.traceContext_ != null ? other.traceContext_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageStatusRequest Clone() {
      return new GetPackageStatusRequest(this);
    }

    /// <summary>Field number for the "ledger_id" field.</summary>
    public const int LedgerIdFieldNumber = 1;
    private string ledgerId_ = "";
    /// <summary>
    /// Must correspond to the ledger ID reported by the Ledger Identification Service.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LedgerId {
      get { return ledgerId_; }
      set {
        ledgerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 2;
    private string packageId_ = "";
    /// <summary>
    /// The ID of the requested package.
    /// Must be a valid PackageIdString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageId {
      get { return packageId_; }
      set {
        packageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trace_context" field.</summary>
    public const int TraceContextFieldNumber = 1000;
    private global::Com.DigitalAsset.Ledger.Api.V1.TraceContext traceContext_;
    /// <summary>
    /// Server side tracing will be registered as a child of the submitted context.
    /// This field is a future extension point and is currently not supported.
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.TraceContext TraceContext {
      get { return traceContext_; }
      set {
        traceContext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPackageStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPackageStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LedgerId != other.LedgerId) return false;
      if (PackageId != other.PackageId) return false;
      if (!object.Equals(TraceContext, other.TraceContext)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LedgerId.Length != 0) hash ^= LedgerId.GetHashCode();
      if (PackageId.Length != 0) hash ^= PackageId.GetHashCode();
      if (traceContext_ != null) hash ^= TraceContext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LedgerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LedgerId);
      }
      if (PackageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PackageId);
      }
      if (traceContext_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(TraceContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LedgerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LedgerId);
      }
      if (PackageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageId);
      }
      if (traceContext_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraceContext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPackageStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.LedgerId.Length != 0) {
        LedgerId = other.LedgerId;
      }
      if (other.PackageId.Length != 0) {
        PackageId = other.PackageId;
      }
      if (other.traceContext_ != null) {
        if (traceContext_ == null) {
          TraceContext = new global::Com.DigitalAsset.Ledger.Api.V1.TraceContext();
        }
        TraceContext.MergeFrom(other.TraceContext);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LedgerId = input.ReadString();
            break;
          }
          case 18: {
            PackageId = input.ReadString();
            break;
          }
          case 8002: {
            if (traceContext_ == null) {
              TraceContext = new global::Com.DigitalAsset.Ledger.Api.V1.TraceContext();
            }
            input.ReadMessage(TraceContext);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPackageStatusResponse : pb::IMessage<GetPackageStatusResponse> {
    private static readonly pb::MessageParser<GetPackageStatusResponse> _parser = new pb::MessageParser<GetPackageStatusResponse>(() => new GetPackageStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPackageStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.PackageServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageStatusResponse(GetPackageStatusResponse other) : this() {
      packageStatus_ = other.packageStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageStatusResponse Clone() {
      return new GetPackageStatusResponse(this);
    }

    /// <summary>Field number for the "package_status" field.</summary>
    public const int PackageStatusFieldNumber = 1;
    private global::Com.DigitalAsset.Ledger.Api.V1.PackageStatus packageStatus_ = 0;
    /// <summary>
    /// The status of the package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.PackageStatus PackageStatus {
      get { return packageStatus_; }
      set {
        packageStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPackageStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPackageStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageStatus != other.PackageStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageStatus != 0) hash ^= PackageStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackageStatus != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PackageStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PackageStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPackageStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.PackageStatus != 0) {
        PackageStatus = other.PackageStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PackageStatus = (global::Com.DigitalAsset.Ledger.Api.V1.PackageStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
