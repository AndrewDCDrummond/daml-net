// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/digitalasset/ledger/api/v1/commands.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.DigitalAsset.Ledger.Api.V1 {

  /// <summary>Holder for reflection information generated from com/digitalasset/ledger/api/v1/commands.proto</summary>
  public static partial class CommandsReflection {

    #region Descriptor
    /// <summary>File descriptor for com/digitalasset/ledger/api/v1/commands.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommandsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1jb20vZGlnaXRhbGFzc2V0L2xlZGdlci9hcGkvdjEvY29tbWFuZHMucHJv",
            "dG8SHmNvbS5kaWdpdGFsYXNzZXQubGVkZ2VyLmFwaS52MRoqY29tL2RpZ2l0",
            "YWxhc3NldC9sZWRnZXIvYXBpL3YxL3ZhbHVlLnByb3RvGh9nb29nbGUvcHJv",
            "dG9idWYvdGltZXN0YW1wLnByb3RvIpwCCghDb21tYW5kcxIRCglsZWRnZXJf",
            "aWQYASABKAkSEwoLd29ya2Zsb3dfaWQYAiABKAkSFgoOYXBwbGljYXRpb25f",
            "aWQYAyABKAkSEgoKY29tbWFuZF9pZBgEIAEoCRINCgVwYXJ0eRgFIAEoCRI5",
            "ChVsZWRnZXJfZWZmZWN0aXZlX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEjcKE21heGltdW1fcmVjb3JkX3RpbWUYByABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wEjkKCGNvbW1hbmRzGAggAygLMicu",
            "Y29tLmRpZ2l0YWxhc3NldC5sZWRnZXIuYXBpLnYxLkNvbW1hbmQiwAIKB0Nv",
            "bW1hbmQSPwoGY3JlYXRlGAEgASgLMi0uY29tLmRpZ2l0YWxhc3NldC5sZWRn",
            "ZXIuYXBpLnYxLkNyZWF0ZUNvbW1hbmRIABJDCghleGVyY2lzZRgCIAEoCzIv",
            "LmNvbS5kaWdpdGFsYXNzZXQubGVkZ2VyLmFwaS52MS5FeGVyY2lzZUNvbW1h",
            "bmRIABJNCg1leGVyY2lzZUJ5S2V5GAQgASgLMjQuY29tLmRpZ2l0YWxhc3Nl",
            "dC5sZWRnZXIuYXBpLnYxLkV4ZXJjaXNlQnlLZXlDb21tYW5kSAASVQoRY3Jl",
            "YXRlQW5kRXhlcmNpc2UYAyABKAsyOC5jb20uZGlnaXRhbGFzc2V0LmxlZGdl",
            "ci5hcGkudjEuQ3JlYXRlQW5kRXhlcmNpc2VDb21tYW5kSABCCQoHY29tbWFu",
            "ZCKSAQoNQ3JlYXRlQ29tbWFuZBI/Cgt0ZW1wbGF0ZV9pZBgBIAEoCzIqLmNv",
            "bS5kaWdpdGFsYXNzZXQubGVkZ2VyLmFwaS52MS5JZGVudGlmaWVyEkAKEGNy",
            "ZWF0ZV9hcmd1bWVudHMYAiABKAsyJi5jb20uZGlnaXRhbGFzc2V0LmxlZGdl",
            "ci5hcGkudjEuUmVjb3JkIrcBCg9FeGVyY2lzZUNvbW1hbmQSPwoLdGVtcGxh",
            "dGVfaWQYASABKAsyKi5jb20uZGlnaXRhbGFzc2V0LmxlZGdlci5hcGkudjEu",
            "SWRlbnRpZmllchITCgtjb250cmFjdF9pZBgCIAEoCRIOCgZjaG9pY2UYAyAB",
            "KAkSPgoPY2hvaWNlX2FyZ3VtZW50GAQgASgLMiUuY29tLmRpZ2l0YWxhc3Nl",
            "dC5sZWRnZXIuYXBpLnYxLlZhbHVlIuQBChRFeGVyY2lzZUJ5S2V5Q29tbWFu",
            "ZBI/Cgt0ZW1wbGF0ZV9pZBgBIAEoCzIqLmNvbS5kaWdpdGFsYXNzZXQubGVk",
            "Z2VyLmFwaS52MS5JZGVudGlmaWVyEjsKDGNvbnRyYWN0X2tleRgCIAEoCzIl",
            "LmNvbS5kaWdpdGFsYXNzZXQubGVkZ2VyLmFwaS52MS5WYWx1ZRIOCgZjaG9p",
            "Y2UYAyABKAkSPgoPY2hvaWNlX2FyZ3VtZW50GAQgASgLMiUuY29tLmRpZ2l0",
            "YWxhc3NldC5sZWRnZXIuYXBpLnYxLlZhbHVlIu0BChhDcmVhdGVBbmRFeGVy",
            "Y2lzZUNvbW1hbmQSPwoLdGVtcGxhdGVfaWQYASABKAsyKi5jb20uZGlnaXRh",
            "bGFzc2V0LmxlZGdlci5hcGkudjEuSWRlbnRpZmllchJAChBjcmVhdGVfYXJn",
            "dW1lbnRzGAIgASgLMiYuY29tLmRpZ2l0YWxhc3NldC5sZWRnZXIuYXBpLnYx",
            "LlJlY29yZBIOCgZjaG9pY2UYAyABKAkSPgoPY2hvaWNlX2FyZ3VtZW50GAQg",
            "ASgLMiUuY29tLmRpZ2l0YWxhc3NldC5sZWRnZXIuYXBpLnYxLlZhbHVlQlUK",
            "HmNvbS5kaWdpdGFsYXNzZXQubGVkZ2VyLmFwaS52MUISQ29tbWFuZHNPdXRl",
            "ckNsYXNzqgIeQ29tLkRpZ2l0YWxBc3NldC5MZWRnZXIuQXBpLlYxYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.DigitalAsset.Ledger.Api.V1.ValueReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.Commands), global::Com.DigitalAsset.Ledger.Api.V1.Commands.Parser, new[]{ "LedgerId", "WorkflowId", "ApplicationId", "CommandId", "Party", "LedgerEffectiveTime", "MaximumRecordTime", "Commands_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.Command), global::Com.DigitalAsset.Ledger.Api.V1.Command.Parser, new[]{ "Create", "Exercise", "ExerciseByKey", "CreateAndExercise" }, new[]{ "Command" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.CreateCommand), global::Com.DigitalAsset.Ledger.Api.V1.CreateCommand.Parser, new[]{ "TemplateId", "CreateArguments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.ExerciseCommand), global::Com.DigitalAsset.Ledger.Api.V1.ExerciseCommand.Parser, new[]{ "TemplateId", "ContractId", "Choice", "ChoiceArgument" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.ExerciseByKeyCommand), global::Com.DigitalAsset.Ledger.Api.V1.ExerciseByKeyCommand.Parser, new[]{ "TemplateId", "ContractKey", "Choice", "ChoiceArgument" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.CreateAndExerciseCommand), global::Com.DigitalAsset.Ledger.Api.V1.CreateAndExerciseCommand.Parser, new[]{ "TemplateId", "CreateArguments", "Choice", "ChoiceArgument" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A composite command that groups multiple commands together.
  /// </summary>
  public sealed partial class Commands : pb::IMessage<Commands> {
    private static readonly pb::MessageParser<Commands> _parser = new pb::MessageParser<Commands>(() => new Commands());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Commands> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.CommandsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commands() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commands(Commands other) : this() {
      ledgerId_ = other.ledgerId_;
      workflowId_ = other.workflowId_;
      applicationId_ = other.applicationId_;
      commandId_ = other.commandId_;
      party_ = other.party_;
      ledgerEffectiveTime_ = other.ledgerEffectiveTime_ != null ? other.ledgerEffectiveTime_.Clone() : null;
      maximumRecordTime_ = other.maximumRecordTime_ != null ? other.maximumRecordTime_.Clone() : null;
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commands Clone() {
      return new Commands(this);
    }

    /// <summary>Field number for the "ledger_id" field.</summary>
    public const int LedgerIdFieldNumber = 1;
    private string ledgerId_ = "";
    /// <summary>
    /// Must correspond to the ledger ID reported by the Ledger Identification Service.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LedgerId {
      get { return ledgerId_; }
      set {
        ledgerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "workflow_id" field.</summary>
    public const int WorkflowIdFieldNumber = 2;
    private string workflowId_ = "";
    /// <summary>
    /// Identifier of the on-ledger workflow that this command is a part of.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkflowId {
      get { return workflowId_; }
      set {
        workflowId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "application_id" field.</summary>
    public const int ApplicationIdFieldNumber = 3;
    private string applicationId_ = "";
    /// <summary>
    /// Uniquely identifies the application (or its part) that issued the command. This is used in tracing
    /// across different components and to let applications subscribe to their own submissions only.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command_id" field.</summary>
    public const int CommandIdFieldNumber = 4;
    private string commandId_ = "";
    /// <summary>
    /// Uniquely identified the command. This identifier should be unique for each new command within an
    /// application domain, i.e., the triple (application_id, party, command_id) must be unique.
    /// It can be used for matching the requests with their respective completions.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommandId {
      get { return commandId_; }
      set {
        commandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "party" field.</summary>
    public const int PartyFieldNumber = 5;
    private string party_ = "";
    /// <summary>
    /// Party on whose behalf the command should be executed. It is up to the server to verify that the
    /// authorisation can be granted and that the connection has been authenticated for that party.
    /// Must be a valid PartyIdString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Party {
      get { return party_; }
      set {
        party_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ledger_effective_time" field.</summary>
    public const int LedgerEffectiveTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp ledgerEffectiveTime_;
    /// <summary>
    /// MUST be an approximation of the wall clock time on the ledger server.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LedgerEffectiveTime {
      get { return ledgerEffectiveTime_; }
      set {
        ledgerEffectiveTime_ = value;
      }
    }

    /// <summary>Field number for the "maximum_record_time" field.</summary>
    public const int MaximumRecordTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maximumRecordTime_;
    /// <summary>
    /// The deadline for observing this command in the completion stream before it can be considered to have timed out.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaximumRecordTime {
      get { return maximumRecordTime_; }
      set {
        maximumRecordTime_ = value;
      }
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int Commands_FieldNumber = 8;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Ledger.Api.V1.Command> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(66, global::Com.DigitalAsset.Ledger.Api.V1.Command.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Ledger.Api.V1.Command> commands_ = new pbc::RepeatedField<global::Com.DigitalAsset.Ledger.Api.V1.Command>();
    /// <summary>
    /// Individual elements of this atomic command. Must be non-empty.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Ledger.Api.V1.Command> Commands_ {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Commands);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Commands other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LedgerId != other.LedgerId) return false;
      if (WorkflowId != other.WorkflowId) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (CommandId != other.CommandId) return false;
      if (Party != other.Party) return false;
      if (!object.Equals(LedgerEffectiveTime, other.LedgerEffectiveTime)) return false;
      if (!object.Equals(MaximumRecordTime, other.MaximumRecordTime)) return false;
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LedgerId.Length != 0) hash ^= LedgerId.GetHashCode();
      if (WorkflowId.Length != 0) hash ^= WorkflowId.GetHashCode();
      if (ApplicationId.Length != 0) hash ^= ApplicationId.GetHashCode();
      if (CommandId.Length != 0) hash ^= CommandId.GetHashCode();
      if (Party.Length != 0) hash ^= Party.GetHashCode();
      if (ledgerEffectiveTime_ != null) hash ^= LedgerEffectiveTime.GetHashCode();
      if (maximumRecordTime_ != null) hash ^= MaximumRecordTime.GetHashCode();
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LedgerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LedgerId);
      }
      if (WorkflowId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WorkflowId);
      }
      if (ApplicationId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ApplicationId);
      }
      if (CommandId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CommandId);
      }
      if (Party.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Party);
      }
      if (ledgerEffectiveTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LedgerEffectiveTime);
      }
      if (maximumRecordTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(MaximumRecordTime);
      }
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LedgerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LedgerId);
      }
      if (WorkflowId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkflowId);
      }
      if (ApplicationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApplicationId);
      }
      if (CommandId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommandId);
      }
      if (Party.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Party);
      }
      if (ledgerEffectiveTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedgerEffectiveTime);
      }
      if (maximumRecordTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaximumRecordTime);
      }
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Commands other) {
      if (other == null) {
        return;
      }
      if (other.LedgerId.Length != 0) {
        LedgerId = other.LedgerId;
      }
      if (other.WorkflowId.Length != 0) {
        WorkflowId = other.WorkflowId;
      }
      if (other.ApplicationId.Length != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.CommandId.Length != 0) {
        CommandId = other.CommandId;
      }
      if (other.Party.Length != 0) {
        Party = other.Party;
      }
      if (other.ledgerEffectiveTime_ != null) {
        if (ledgerEffectiveTime_ == null) {
          LedgerEffectiveTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LedgerEffectiveTime.MergeFrom(other.LedgerEffectiveTime);
      }
      if (other.maximumRecordTime_ != null) {
        if (maximumRecordTime_ == null) {
          MaximumRecordTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaximumRecordTime.MergeFrom(other.MaximumRecordTime);
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LedgerId = input.ReadString();
            break;
          }
          case 18: {
            WorkflowId = input.ReadString();
            break;
          }
          case 26: {
            ApplicationId = input.ReadString();
            break;
          }
          case 34: {
            CommandId = input.ReadString();
            break;
          }
          case 42: {
            Party = input.ReadString();
            break;
          }
          case 50: {
            if (ledgerEffectiveTime_ == null) {
              LedgerEffectiveTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LedgerEffectiveTime);
            break;
          }
          case 58: {
            if (maximumRecordTime_ == null) {
              MaximumRecordTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaximumRecordTime);
            break;
          }
          case 66: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A command can either create a new contract or exercise a choice on an existing contract.
  /// </summary>
  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.CommandsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command(Command other) : this() {
      switch (other.CommandCase) {
        case CommandOneofCase.Create:
          Create = other.Create.Clone();
          break;
        case CommandOneofCase.Exercise:
          Exercise = other.Exercise.Clone();
          break;
        case CommandOneofCase.ExerciseByKey:
          ExerciseByKey = other.ExerciseByKey.Clone();
          break;
        case CommandOneofCase.CreateAndExercise:
          CreateAndExercise = other.CreateAndExercise.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.CreateCommand Create {
      get { return commandCase_ == CommandOneofCase.Create ? (global::Com.DigitalAsset.Ledger.Api.V1.CreateCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Create;
      }
    }

    /// <summary>Field number for the "exercise" field.</summary>
    public const int ExerciseFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.ExerciseCommand Exercise {
      get { return commandCase_ == CommandOneofCase.Exercise ? (global::Com.DigitalAsset.Ledger.Api.V1.ExerciseCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Exercise;
      }
    }

    /// <summary>Field number for the "exerciseByKey" field.</summary>
    public const int ExerciseByKeyFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.ExerciseByKeyCommand ExerciseByKey {
      get { return commandCase_ == CommandOneofCase.ExerciseByKey ? (global::Com.DigitalAsset.Ledger.Api.V1.ExerciseByKeyCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.ExerciseByKey;
      }
    }

    /// <summary>Field number for the "createAndExercise" field.</summary>
    public const int CreateAndExerciseFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.CreateAndExerciseCommand CreateAndExercise {
      get { return commandCase_ == CommandOneofCase.CreateAndExercise ? (global::Com.DigitalAsset.Ledger.Api.V1.CreateAndExerciseCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateAndExercise;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      Create = 1,
      Exercise = 2,
      ExerciseByKey = 4,
      CreateAndExercise = 3,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Create, other.Create)) return false;
      if (!object.Equals(Exercise, other.Exercise)) return false;
      if (!object.Equals(ExerciseByKey, other.ExerciseByKey)) return false;
      if (!object.Equals(CreateAndExercise, other.CreateAndExercise)) return false;
      if (CommandCase != other.CommandCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandCase_ == CommandOneofCase.Create) hash ^= Create.GetHashCode();
      if (commandCase_ == CommandOneofCase.Exercise) hash ^= Exercise.GetHashCode();
      if (commandCase_ == CommandOneofCase.ExerciseByKey) hash ^= ExerciseByKey.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateAndExercise) hash ^= CreateAndExercise.GetHashCode();
      hash ^= (int) commandCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commandCase_ == CommandOneofCase.Create) {
        output.WriteRawTag(10);
        output.WriteMessage(Create);
      }
      if (commandCase_ == CommandOneofCase.Exercise) {
        output.WriteRawTag(18);
        output.WriteMessage(Exercise);
      }
      if (commandCase_ == CommandOneofCase.CreateAndExercise) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateAndExercise);
      }
      if (commandCase_ == CommandOneofCase.ExerciseByKey) {
        output.WriteRawTag(34);
        output.WriteMessage(ExerciseByKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandCase_ == CommandOneofCase.Create) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Create);
      }
      if (commandCase_ == CommandOneofCase.Exercise) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exercise);
      }
      if (commandCase_ == CommandOneofCase.ExerciseByKey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExerciseByKey);
      }
      if (commandCase_ == CommandOneofCase.CreateAndExercise) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateAndExercise);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.Create:
          if (Create == null) {
            Create = new global::Com.DigitalAsset.Ledger.Api.V1.CreateCommand();
          }
          Create.MergeFrom(other.Create);
          break;
        case CommandOneofCase.Exercise:
          if (Exercise == null) {
            Exercise = new global::Com.DigitalAsset.Ledger.Api.V1.ExerciseCommand();
          }
          Exercise.MergeFrom(other.Exercise);
          break;
        case CommandOneofCase.ExerciseByKey:
          if (ExerciseByKey == null) {
            ExerciseByKey = new global::Com.DigitalAsset.Ledger.Api.V1.ExerciseByKeyCommand();
          }
          ExerciseByKey.MergeFrom(other.ExerciseByKey);
          break;
        case CommandOneofCase.CreateAndExercise:
          if (CreateAndExercise == null) {
            CreateAndExercise = new global::Com.DigitalAsset.Ledger.Api.V1.CreateAndExerciseCommand();
          }
          CreateAndExercise.MergeFrom(other.CreateAndExercise);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Ledger.Api.V1.CreateCommand subBuilder = new global::Com.DigitalAsset.Ledger.Api.V1.CreateCommand();
            if (commandCase_ == CommandOneofCase.Create) {
              subBuilder.MergeFrom(Create);
            }
            input.ReadMessage(subBuilder);
            Create = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Ledger.Api.V1.ExerciseCommand subBuilder = new global::Com.DigitalAsset.Ledger.Api.V1.ExerciseCommand();
            if (commandCase_ == CommandOneofCase.Exercise) {
              subBuilder.MergeFrom(Exercise);
            }
            input.ReadMessage(subBuilder);
            Exercise = subBuilder;
            break;
          }
          case 26: {
            global::Com.DigitalAsset.Ledger.Api.V1.CreateAndExerciseCommand subBuilder = new global::Com.DigitalAsset.Ledger.Api.V1.CreateAndExerciseCommand();
            if (commandCase_ == CommandOneofCase.CreateAndExercise) {
              subBuilder.MergeFrom(CreateAndExercise);
            }
            input.ReadMessage(subBuilder);
            CreateAndExercise = subBuilder;
            break;
          }
          case 34: {
            global::Com.DigitalAsset.Ledger.Api.V1.ExerciseByKeyCommand subBuilder = new global::Com.DigitalAsset.Ledger.Api.V1.ExerciseByKeyCommand();
            if (commandCase_ == CommandOneofCase.ExerciseByKey) {
              subBuilder.MergeFrom(ExerciseByKey);
            }
            input.ReadMessage(subBuilder);
            ExerciseByKey = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Create a new contract instance based on a template.
  /// </summary>
  public sealed partial class CreateCommand : pb::IMessage<CreateCommand> {
    private static readonly pb::MessageParser<CreateCommand> _parser = new pb::MessageParser<CreateCommand>(() => new CreateCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.CommandsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCommand(CreateCommand other) : this() {
      templateId_ = other.templateId_ != null ? other.templateId_.Clone() : null;
      createArguments_ = other.createArguments_ != null ? other.createArguments_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCommand Clone() {
      return new CreateCommand(this);
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 1;
    private global::Com.DigitalAsset.Ledger.Api.V1.Identifier templateId_;
    /// <summary>
    /// The template of contract the client wants to create.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.Identifier TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    /// <summary>Field number for the "create_arguments" field.</summary>
    public const int CreateArgumentsFieldNumber = 2;
    private global::Com.DigitalAsset.Ledger.Api.V1.Record createArguments_;
    /// <summary>
    /// The arguments required for creating a contract from this template.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.Record CreateArguments {
      get { return createArguments_; }
      set {
        createArguments_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TemplateId, other.TemplateId)) return false;
      if (!object.Equals(CreateArguments, other.CreateArguments)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (templateId_ != null) hash ^= TemplateId.GetHashCode();
      if (createArguments_ != null) hash ^= CreateArguments.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (templateId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TemplateId);
      }
      if (createArguments_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreateArguments);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (templateId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TemplateId);
      }
      if (createArguments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateArguments);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCommand other) {
      if (other == null) {
        return;
      }
      if (other.templateId_ != null) {
        if (templateId_ == null) {
          TemplateId = new global::Com.DigitalAsset.Ledger.Api.V1.Identifier();
        }
        TemplateId.MergeFrom(other.TemplateId);
      }
      if (other.createArguments_ != null) {
        if (createArguments_ == null) {
          CreateArguments = new global::Com.DigitalAsset.Ledger.Api.V1.Record();
        }
        CreateArguments.MergeFrom(other.CreateArguments);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (templateId_ == null) {
              TemplateId = new global::Com.DigitalAsset.Ledger.Api.V1.Identifier();
            }
            input.ReadMessage(TemplateId);
            break;
          }
          case 18: {
            if (createArguments_ == null) {
              CreateArguments = new global::Com.DigitalAsset.Ledger.Api.V1.Record();
            }
            input.ReadMessage(CreateArguments);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Exercise a choice on an existing contract.
  /// </summary>
  public sealed partial class ExerciseCommand : pb::IMessage<ExerciseCommand> {
    private static readonly pb::MessageParser<ExerciseCommand> _parser = new pb::MessageParser<ExerciseCommand>(() => new ExerciseCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExerciseCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.CommandsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExerciseCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExerciseCommand(ExerciseCommand other) : this() {
      templateId_ = other.templateId_ != null ? other.templateId_.Clone() : null;
      contractId_ = other.contractId_;
      choice_ = other.choice_;
      choiceArgument_ = other.choiceArgument_ != null ? other.choiceArgument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExerciseCommand Clone() {
      return new ExerciseCommand(this);
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 1;
    private global::Com.DigitalAsset.Ledger.Api.V1.Identifier templateId_;
    /// <summary>
    /// The template of contract the client wants to exercise.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.Identifier TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 2;
    private string contractId_ = "";
    /// <summary>
    /// The ID of the contract the client wants to exercise upon.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContractId {
      get { return contractId_; }
      set {
        contractId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "choice" field.</summary>
    public const int ChoiceFieldNumber = 3;
    private string choice_ = "";
    /// <summary>
    /// The name of the choice the client wants to exercise.
    /// Must be a valid NameString (as described in ``value.proto``)
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Choice {
      get { return choice_; }
      set {
        choice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "choice_argument" field.</summary>
    public const int ChoiceArgumentFieldNumber = 4;
    private global::Com.DigitalAsset.Ledger.Api.V1.Value choiceArgument_;
    /// <summary>
    /// The argument for this choice.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.Value ChoiceArgument {
      get { return choiceArgument_; }
      set {
        choiceArgument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExerciseCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExerciseCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TemplateId, other.TemplateId)) return false;
      if (ContractId != other.ContractId) return false;
      if (Choice != other.Choice) return false;
      if (!object.Equals(ChoiceArgument, other.ChoiceArgument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (templateId_ != null) hash ^= TemplateId.GetHashCode();
      if (ContractId.Length != 0) hash ^= ContractId.GetHashCode();
      if (Choice.Length != 0) hash ^= Choice.GetHashCode();
      if (choiceArgument_ != null) hash ^= ChoiceArgument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (templateId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TemplateId);
      }
      if (ContractId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContractId);
      }
      if (Choice.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Choice);
      }
      if (choiceArgument_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChoiceArgument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (templateId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TemplateId);
      }
      if (ContractId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractId);
      }
      if (Choice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Choice);
      }
      if (choiceArgument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChoiceArgument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExerciseCommand other) {
      if (other == null) {
        return;
      }
      if (other.templateId_ != null) {
        if (templateId_ == null) {
          TemplateId = new global::Com.DigitalAsset.Ledger.Api.V1.Identifier();
        }
        TemplateId.MergeFrom(other.TemplateId);
      }
      if (other.ContractId.Length != 0) {
        ContractId = other.ContractId;
      }
      if (other.Choice.Length != 0) {
        Choice = other.Choice;
      }
      if (other.choiceArgument_ != null) {
        if (choiceArgument_ == null) {
          ChoiceArgument = new global::Com.DigitalAsset.Ledger.Api.V1.Value();
        }
        ChoiceArgument.MergeFrom(other.ChoiceArgument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (templateId_ == null) {
              TemplateId = new global::Com.DigitalAsset.Ledger.Api.V1.Identifier();
            }
            input.ReadMessage(TemplateId);
            break;
          }
          case 18: {
            ContractId = input.ReadString();
            break;
          }
          case 26: {
            Choice = input.ReadString();
            break;
          }
          case 34: {
            if (choiceArgument_ == null) {
              ChoiceArgument = new global::Com.DigitalAsset.Ledger.Api.V1.Value();
            }
            input.ReadMessage(ChoiceArgument);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Exercise a choice on an existing contract specified by its key.
  /// </summary>
  public sealed partial class ExerciseByKeyCommand : pb::IMessage<ExerciseByKeyCommand> {
    private static readonly pb::MessageParser<ExerciseByKeyCommand> _parser = new pb::MessageParser<ExerciseByKeyCommand>(() => new ExerciseByKeyCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExerciseByKeyCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.CommandsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExerciseByKeyCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExerciseByKeyCommand(ExerciseByKeyCommand other) : this() {
      templateId_ = other.templateId_ != null ? other.templateId_.Clone() : null;
      contractKey_ = other.contractKey_ != null ? other.contractKey_.Clone() : null;
      choice_ = other.choice_;
      choiceArgument_ = other.choiceArgument_ != null ? other.choiceArgument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExerciseByKeyCommand Clone() {
      return new ExerciseByKeyCommand(this);
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 1;
    private global::Com.DigitalAsset.Ledger.Api.V1.Identifier templateId_;
    /// <summary>
    /// The template of contract the client wants to exercise.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.Identifier TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    /// <summary>Field number for the "contract_key" field.</summary>
    public const int ContractKeyFieldNumber = 2;
    private global::Com.DigitalAsset.Ledger.Api.V1.Value contractKey_;
    /// <summary>
    /// The key of the contract the client wants to exercise upon.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.Value ContractKey {
      get { return contractKey_; }
      set {
        contractKey_ = value;
      }
    }

    /// <summary>Field number for the "choice" field.</summary>
    public const int ChoiceFieldNumber = 3;
    private string choice_ = "";
    /// <summary>
    /// The name of the choice the client wants to exercise.
    /// Must be a valid NameString (as described in ``value.proto``)
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Choice {
      get { return choice_; }
      set {
        choice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "choice_argument" field.</summary>
    public const int ChoiceArgumentFieldNumber = 4;
    private global::Com.DigitalAsset.Ledger.Api.V1.Value choiceArgument_;
    /// <summary>
    /// The argument for this choice.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.Value ChoiceArgument {
      get { return choiceArgument_; }
      set {
        choiceArgument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExerciseByKeyCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExerciseByKeyCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TemplateId, other.TemplateId)) return false;
      if (!object.Equals(ContractKey, other.ContractKey)) return false;
      if (Choice != other.Choice) return false;
      if (!object.Equals(ChoiceArgument, other.ChoiceArgument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (templateId_ != null) hash ^= TemplateId.GetHashCode();
      if (contractKey_ != null) hash ^= ContractKey.GetHashCode();
      if (Choice.Length != 0) hash ^= Choice.GetHashCode();
      if (choiceArgument_ != null) hash ^= ChoiceArgument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (templateId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TemplateId);
      }
      if (contractKey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ContractKey);
      }
      if (Choice.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Choice);
      }
      if (choiceArgument_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChoiceArgument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (templateId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TemplateId);
      }
      if (contractKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractKey);
      }
      if (Choice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Choice);
      }
      if (choiceArgument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChoiceArgument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExerciseByKeyCommand other) {
      if (other == null) {
        return;
      }
      if (other.templateId_ != null) {
        if (templateId_ == null) {
          TemplateId = new global::Com.DigitalAsset.Ledger.Api.V1.Identifier();
        }
        TemplateId.MergeFrom(other.TemplateId);
      }
      if (other.contractKey_ != null) {
        if (contractKey_ == null) {
          ContractKey = new global::Com.DigitalAsset.Ledger.Api.V1.Value();
        }
        ContractKey.MergeFrom(other.ContractKey);
      }
      if (other.Choice.Length != 0) {
        Choice = other.Choice;
      }
      if (other.choiceArgument_ != null) {
        if (choiceArgument_ == null) {
          ChoiceArgument = new global::Com.DigitalAsset.Ledger.Api.V1.Value();
        }
        ChoiceArgument.MergeFrom(other.ChoiceArgument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (templateId_ == null) {
              TemplateId = new global::Com.DigitalAsset.Ledger.Api.V1.Identifier();
            }
            input.ReadMessage(TemplateId);
            break;
          }
          case 18: {
            if (contractKey_ == null) {
              ContractKey = new global::Com.DigitalAsset.Ledger.Api.V1.Value();
            }
            input.ReadMessage(ContractKey);
            break;
          }
          case 26: {
            Choice = input.ReadString();
            break;
          }
          case 34: {
            if (choiceArgument_ == null) {
              ChoiceArgument = new global::Com.DigitalAsset.Ledger.Api.V1.Value();
            }
            input.ReadMessage(ChoiceArgument);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Create a contract and exercise a choice on it in the same transaction.
  /// </summary>
  public sealed partial class CreateAndExerciseCommand : pb::IMessage<CreateAndExerciseCommand> {
    private static readonly pb::MessageParser<CreateAndExerciseCommand> _parser = new pb::MessageParser<CreateAndExerciseCommand>(() => new CreateAndExerciseCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateAndExerciseCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.CommandsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAndExerciseCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAndExerciseCommand(CreateAndExerciseCommand other) : this() {
      templateId_ = other.templateId_ != null ? other.templateId_.Clone() : null;
      createArguments_ = other.createArguments_ != null ? other.createArguments_.Clone() : null;
      choice_ = other.choice_;
      choiceArgument_ = other.choiceArgument_ != null ? other.choiceArgument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAndExerciseCommand Clone() {
      return new CreateAndExerciseCommand(this);
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 1;
    private global::Com.DigitalAsset.Ledger.Api.V1.Identifier templateId_;
    /// <summary>
    /// The template of the contract the client wants to create.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.Identifier TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    /// <summary>Field number for the "create_arguments" field.</summary>
    public const int CreateArgumentsFieldNumber = 2;
    private global::Com.DigitalAsset.Ledger.Api.V1.Record createArguments_;
    /// <summary>
    /// The arguments required for creating a contract from this template.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.Record CreateArguments {
      get { return createArguments_; }
      set {
        createArguments_ = value;
      }
    }

    /// <summary>Field number for the "choice" field.</summary>
    public const int ChoiceFieldNumber = 3;
    private string choice_ = "";
    /// <summary>
    /// The name of the choice the client wants to exercise.
    /// Must be a valid NameString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Choice {
      get { return choice_; }
      set {
        choice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "choice_argument" field.</summary>
    public const int ChoiceArgumentFieldNumber = 4;
    private global::Com.DigitalAsset.Ledger.Api.V1.Value choiceArgument_;
    /// <summary>
    /// The argument for this choice.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.Value ChoiceArgument {
      get { return choiceArgument_; }
      set {
        choiceArgument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateAndExerciseCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateAndExerciseCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TemplateId, other.TemplateId)) return false;
      if (!object.Equals(CreateArguments, other.CreateArguments)) return false;
      if (Choice != other.Choice) return false;
      if (!object.Equals(ChoiceArgument, other.ChoiceArgument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (templateId_ != null) hash ^= TemplateId.GetHashCode();
      if (createArguments_ != null) hash ^= CreateArguments.GetHashCode();
      if (Choice.Length != 0) hash ^= Choice.GetHashCode();
      if (choiceArgument_ != null) hash ^= ChoiceArgument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (templateId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TemplateId);
      }
      if (createArguments_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreateArguments);
      }
      if (Choice.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Choice);
      }
      if (choiceArgument_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChoiceArgument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (templateId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TemplateId);
      }
      if (createArguments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateArguments);
      }
      if (Choice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Choice);
      }
      if (choiceArgument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChoiceArgument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateAndExerciseCommand other) {
      if (other == null) {
        return;
      }
      if (other.templateId_ != null) {
        if (templateId_ == null) {
          TemplateId = new global::Com.DigitalAsset.Ledger.Api.V1.Identifier();
        }
        TemplateId.MergeFrom(other.TemplateId);
      }
      if (other.createArguments_ != null) {
        if (createArguments_ == null) {
          CreateArguments = new global::Com.DigitalAsset.Ledger.Api.V1.Record();
        }
        CreateArguments.MergeFrom(other.CreateArguments);
      }
      if (other.Choice.Length != 0) {
        Choice = other.Choice;
      }
      if (other.choiceArgument_ != null) {
        if (choiceArgument_ == null) {
          ChoiceArgument = new global::Com.DigitalAsset.Ledger.Api.V1.Value();
        }
        ChoiceArgument.MergeFrom(other.ChoiceArgument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (templateId_ == null) {
              TemplateId = new global::Com.DigitalAsset.Ledger.Api.V1.Identifier();
            }
            input.ReadMessage(TemplateId);
            break;
          }
          case 18: {
            if (createArguments_ == null) {
              CreateArguments = new global::Com.DigitalAsset.Ledger.Api.V1.Record();
            }
            input.ReadMessage(CreateArguments);
            break;
          }
          case 26: {
            Choice = input.ReadString();
            break;
          }
          case 34: {
            if (choiceArgument_ == null) {
              ChoiceArgument = new global::Com.DigitalAsset.Ledger.Api.V1.Value();
            }
            input.ReadMessage(ChoiceArgument);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
