// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/digitalasset/ledger/api/v1/transaction_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Com.DigitalAsset.Ledger.Api.V1 {
  /// <summary>
  /// Allows clients to read transactions from the ledger.
  /// </summary>
  public static partial class TransactionService
  {
    static readonly string __ServiceName = "com.digitalasset.ledger.api.v1.TransactionService";

    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest> __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsResponse> __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionTreesResponse> __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionTreesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionTreesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest> __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionByEventIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse> __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest> __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionByIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse> __Marshaller_com_digitalasset_ledger_api_v1_GetFlatTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndRequest> __Marshaller_com_digitalasset_ledger_api_v1_GetLedgerEndRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndResponse> __Marshaller_com_digitalasset_ledger_api_v1_GetLedgerEndResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsResponse> __Method_GetTransactions = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetTransactions",
        __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionsRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionsResponse);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionTreesResponse> __Method_GetTransactionTrees = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionTreesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetTransactionTrees",
        __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionsRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionTreesResponse);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse> __Method_GetTransactionByEventId = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionByEventId",
        __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionByEventIdRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionResponse);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse> __Method_GetTransactionById = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionById",
        __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionByIdRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionResponse);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse> __Method_GetFlatTransactionByEventId = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFlatTransactionByEventId",
        __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionByEventIdRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_GetFlatTransactionResponse);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse> __Method_GetFlatTransactionById = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFlatTransactionById",
        __Marshaller_com_digitalasset_ledger_api_v1_GetTransactionByIdRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_GetFlatTransactionResponse);

    static readonly grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndResponse> __Method_GetLedgerEnd = new grpc::Method<global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLedgerEnd",
        __Marshaller_com_digitalasset_ledger_api_v1_GetLedgerEndRequest,
        __Marshaller_com_digitalasset_ledger_api_v1_GetLedgerEndResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.TransactionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TransactionService</summary>
    [grpc::BindServiceMethod(typeof(TransactionService), "BindService")]
    public abstract partial class TransactionServiceBase
    {
      /// <summary>
      /// Read the ledger's filtered transaction stream for a set of parties.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetTransactions(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest request, grpc::IServerStreamWriter<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Read the ledger's complete transaction tree stream for a set of parties.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetTransactionTrees(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest request, grpc::IServerStreamWriter<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionTreesResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lookup a transaction tree by the ID of an event that appears within it.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionByEventId
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse> GetTransactionByEventId(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lookup a transaction tree by its ID.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionById
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse> GetTransactionById(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lookup a transaction by the ID of an event that appears within it.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse> GetFlatTransactionByEventId(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lookup a transaction by its ID.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse> GetFlatTransactionById(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the current ledger end.
      /// Subscriptions started with the returned offset will serve transactions created after this RPC was called.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndResponse> GetLedgerEnd(global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TransactionService</summary>
    public partial class TransactionServiceClient : grpc::ClientBase<TransactionServiceClient>
    {
      /// <summary>Creates a new client for TransactionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TransactionServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TransactionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TransactionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TransactionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TransactionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Read the ledger's filtered transaction stream for a set of parties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsResponse> GetTransactions(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Read the ledger's filtered transaction stream for a set of parties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsResponse> GetTransactions(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetTransactions, null, options, request);
      }
      /// <summary>
      /// Read the ledger's complete transaction tree stream for a set of parties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionTreesResponse> GetTransactionTrees(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionTrees(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Read the ledger's complete transaction tree stream for a set of parties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionTreesResponse> GetTransactionTrees(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetTransactionTrees, null, options, request);
      }
      /// <summary>
      /// Lookup a transaction tree by the ID of an event that appears within it.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionByEventId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse GetTransactionByEventId(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionByEventId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lookup a transaction tree by the ID of an event that appears within it.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionByEventId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse GetTransactionByEventId(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionByEventId, null, options, request);
      }
      /// <summary>
      /// Lookup a transaction tree by the ID of an event that appears within it.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionByEventId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse> GetTransactionByEventIdAsync(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionByEventIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lookup a transaction tree by the ID of an event that appears within it.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionByEventId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse> GetTransactionByEventIdAsync(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionByEventId, null, options, request);
      }
      /// <summary>
      /// Lookup a transaction tree by its ID.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionById
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse GetTransactionById(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lookup a transaction tree by its ID.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionById
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse GetTransactionById(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      /// <summary>
      /// Lookup a transaction tree by its ID.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionById
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse> GetTransactionByIdAsync(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lookup a transaction tree by its ID.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionById
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse> GetTransactionByIdAsync(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionById, null, options, request);
      }
      /// <summary>
      /// Lookup a transaction by the ID of an event that appears within it.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse GetFlatTransactionByEventId(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFlatTransactionByEventId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lookup a transaction by the ID of an event that appears within it.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse GetFlatTransactionByEventId(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFlatTransactionByEventId, null, options, request);
      }
      /// <summary>
      /// Lookup a transaction by the ID of an event that appears within it.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse> GetFlatTransactionByEventIdAsync(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFlatTransactionByEventIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lookup a transaction by the ID of an event that appears within it.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse> GetFlatTransactionByEventIdAsync(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFlatTransactionByEventId, null, options, request);
      }
      /// <summary>
      /// Lookup a transaction by its ID.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse GetFlatTransactionById(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFlatTransactionById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lookup a transaction by its ID.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse GetFlatTransactionById(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFlatTransactionById, null, options, request);
      }
      /// <summary>
      /// Lookup a transaction by its ID.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse> GetFlatTransactionByIdAsync(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFlatTransactionByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lookup a transaction by its ID.
      /// Returns ``NOT_FOUND`` if no such transaction exists.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse> GetFlatTransactionByIdAsync(global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFlatTransactionById, null, options, request);
      }
      /// <summary>
      /// Get the current ledger end.
      /// Subscriptions started with the returned offset will serve transactions created after this RPC was called.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndResponse GetLedgerEnd(global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLedgerEnd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the current ledger end.
      /// Subscriptions started with the returned offset will serve transactions created after this RPC was called.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndResponse GetLedgerEnd(global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLedgerEnd, null, options, request);
      }
      /// <summary>
      /// Get the current ledger end.
      /// Subscriptions started with the returned offset will serve transactions created after this RPC was called.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndResponse> GetLedgerEndAsync(global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLedgerEndAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the current ledger end.
      /// Subscriptions started with the returned offset will serve transactions created after this RPC was called.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndResponse> GetLedgerEndAsync(global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLedgerEnd, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TransactionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TransactionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TransactionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTransactions, serviceImpl.GetTransactions)
          .AddMethod(__Method_GetTransactionTrees, serviceImpl.GetTransactionTrees)
          .AddMethod(__Method_GetTransactionByEventId, serviceImpl.GetTransactionByEventId)
          .AddMethod(__Method_GetTransactionById, serviceImpl.GetTransactionById)
          .AddMethod(__Method_GetFlatTransactionByEventId, serviceImpl.GetFlatTransactionByEventId)
          .AddMethod(__Method_GetFlatTransactionById, serviceImpl.GetFlatTransactionById)
          .AddMethod(__Method_GetLedgerEnd, serviceImpl.GetLedgerEnd).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TransactionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetTransactions, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsResponse>(serviceImpl.GetTransactions));
      serviceBinder.AddMethod(__Method_GetTransactionTrees, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionsRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionTreesResponse>(serviceImpl.GetTransactionTrees));
      serviceBinder.AddMethod(__Method_GetTransactionByEventId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse>(serviceImpl.GetTransactionByEventId));
      serviceBinder.AddMethod(__Method_GetTransactionById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionResponse>(serviceImpl.GetTransactionById));
      serviceBinder.AddMethod(__Method_GetFlatTransactionByEventId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByEventIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse>(serviceImpl.GetFlatTransactionByEventId));
      serviceBinder.AddMethod(__Method_GetFlatTransactionById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.GetTransactionByIdRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetFlatTransactionResponse>(serviceImpl.GetFlatTransactionById));
      serviceBinder.AddMethod(__Method_GetLedgerEnd, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndRequest, global::Com.DigitalAsset.Ledger.Api.V1.GetLedgerEndResponse>(serviceImpl.GetLedgerEnd));
    }

  }
}
#endregion
