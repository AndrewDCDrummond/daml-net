// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/digitalasset/ledger/api/v1/transaction.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.DigitalAsset.Ledger.Api.V1 {

  /// <summary>Holder for reflection information generated from com/digitalasset/ledger/api/v1/transaction.proto</summary>
  public static partial class TransactionReflection {

    #region Descriptor
    /// <summary>File descriptor for com/digitalasset/ledger/api/v1/transaction.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TransactionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBjb20vZGlnaXRhbGFzc2V0L2xlZGdlci9hcGkvdjEvdHJhbnNhY3Rpb24u",
            "cHJvdG8SHmNvbS5kaWdpdGFsYXNzZXQubGVkZ2VyLmFwaS52MRoqY29tL2Rp",
            "Z2l0YWxhc3NldC9sZWRnZXIvYXBpL3YxL2V2ZW50LnByb3RvGjJjb20vZGln",
            "aXRhbGFzc2V0L2xlZGdlci9hcGkvdjEvdHJhY2VfY29udGV4dC5wcm90bxof",
            "Z29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKnAwoPVHJhbnNhY3Rp",
            "b25UcmVlEhYKDnRyYW5zYWN0aW9uX2lkGAEgASgJEhIKCmNvbW1hbmRfaWQY",
            "AiABKAkSEwoLd29ya2Zsb3dfaWQYAyABKAkSMAoMZWZmZWN0aXZlX2F0GAQg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIOCgZvZmZzZXQYBiAB",
            "KAkSVQoMZXZlbnRzX2J5X2lkGAcgAygLMj8uY29tLmRpZ2l0YWxhc3NldC5s",
            "ZWRnZXIuYXBpLnYxLlRyYW5zYWN0aW9uVHJlZS5FdmVudHNCeUlkRW50cnkS",
            "FgoOcm9vdF9ldmVudF9pZHMYCCADKAkSRAoNdHJhY2VfY29udGV4dBjoByAB",
            "KAsyLC5jb20uZGlnaXRhbGFzc2V0LmxlZGdlci5hcGkudjEuVHJhY2VDb250",
            "ZXh0GlwKD0V2ZW50c0J5SWRFbnRyeRILCgNrZXkYASABKAkSOAoFdmFsdWUY",
            "AiABKAsyKS5jb20uZGlnaXRhbGFzc2V0LmxlZGdlci5hcGkudjEuVHJlZUV2",
            "ZW50OgI4ASKZAQoJVHJlZUV2ZW50Ej8KB2NyZWF0ZWQYASABKAsyLC5jb20u",
            "ZGlnaXRhbGFzc2V0LmxlZGdlci5hcGkudjEuQ3JlYXRlZEV2ZW50SAASQwoJ",
            "ZXhlcmNpc2VkGAIgASgLMi4uY29tLmRpZ2l0YWxhc3NldC5sZWRnZXIuYXBp",
            "LnYxLkV4ZXJjaXNlZEV2ZW50SABCBgoEa2luZCKNAgoLVHJhbnNhY3Rpb24S",
            "FgoOdHJhbnNhY3Rpb25faWQYASABKAkSEgoKY29tbWFuZF9pZBgCIAEoCRIT",
            "Cgt3b3JrZmxvd19pZBgDIAEoCRIwCgxlZmZlY3RpdmVfYXQYBCABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wEjUKBmV2ZW50cxgFIAMoCzIlLmNv",
            "bS5kaWdpdGFsYXNzZXQubGVkZ2VyLmFwaS52MS5FdmVudBIOCgZvZmZzZXQY",
            "BiABKAkSRAoNdHJhY2VfY29udGV4dBjoByABKAsyLC5jb20uZGlnaXRhbGFz",
            "c2V0LmxlZGdlci5hcGkudjEuVHJhY2VDb250ZXh0QlgKHmNvbS5kaWdpdGFs",
            "YXNzZXQubGVkZ2VyLmFwaS52MUIVVHJhbnNhY3Rpb25PdXRlckNsYXNzqgIe",
            "Q29tLkRpZ2l0YWxBc3NldC5MZWRnZXIuQXBpLlYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.DigitalAsset.Ledger.Api.V1.EventReflection.Descriptor, global::Com.DigitalAsset.Ledger.Api.V1.TraceContextReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.TransactionTree), global::Com.DigitalAsset.Ledger.Api.V1.TransactionTree.Parser, new[]{ "TransactionId", "CommandId", "WorkflowId", "EffectiveAt", "Offset", "EventsById", "RootEventIds", "TraceContext" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.TreeEvent), global::Com.DigitalAsset.Ledger.Api.V1.TreeEvent.Parser, new[]{ "Created", "Exercised" }, new[]{ "Kind" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.DigitalAsset.Ledger.Api.V1.Transaction), global::Com.DigitalAsset.Ledger.Api.V1.Transaction.Parser, new[]{ "TransactionId", "CommandId", "WorkflowId", "EffectiveAt", "Events", "Offset", "TraceContext" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Complete view of an on-ledger transaction.
  /// </summary>
  public sealed partial class TransactionTree : pb::IMessage<TransactionTree> {
    private static readonly pb::MessageParser<TransactionTree> _parser = new pb::MessageParser<TransactionTree>(() => new TransactionTree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionTree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.TransactionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionTree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionTree(TransactionTree other) : this() {
      transactionId_ = other.transactionId_;
      commandId_ = other.commandId_;
      workflowId_ = other.workflowId_;
      effectiveAt_ = other.effectiveAt_ != null ? other.effectiveAt_.Clone() : null;
      offset_ = other.offset_;
      eventsById_ = other.eventsById_.Clone();
      rootEventIds_ = other.rootEventIds_.Clone();
      traceContext_ = other.traceContext_ != null ? other.traceContext_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionTree Clone() {
      return new TransactionTree(this);
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private string transactionId_ = "";
    /// <summary>
    /// Assigned by the server. Useful for correlating logs.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command_id" field.</summary>
    public const int CommandIdFieldNumber = 2;
    private string commandId_ = "";
    /// <summary>
    /// The ID of the command which resulted in this transaction. Missing for everyone except the submitting party.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommandId {
      get { return commandId_; }
      set {
        commandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "workflow_id" field.</summary>
    public const int WorkflowIdFieldNumber = 3;
    private string workflowId_ = "";
    /// <summary>
    /// The workflow ID used in command submission. Only set if the ``workflow_id`` for the command was set.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkflowId {
      get { return workflowId_; }
      set {
        workflowId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effective_at" field.</summary>
    public const int EffectiveAtFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp effectiveAt_;
    /// <summary>
    /// Ledger effective time.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EffectiveAt {
      get { return effectiveAt_; }
      set {
        effectiveAt_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 6;
    private string offset_ = "";
    /// <summary>
    /// The absolute offset. The format of this field is described in ``ledger_offset.proto``.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Offset {
      get { return offset_; }
      set {
        offset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "events_by_id" field.</summary>
    public const int EventsByIdFieldNumber = 7;
    private static readonly pbc::MapField<string, global::Com.DigitalAsset.Ledger.Api.V1.TreeEvent>.Codec _map_eventsById_codec
        = new pbc::MapField<string, global::Com.DigitalAsset.Ledger.Api.V1.TreeEvent>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Com.DigitalAsset.Ledger.Api.V1.TreeEvent.Parser), 58);
    private readonly pbc::MapField<string, global::Com.DigitalAsset.Ledger.Api.V1.TreeEvent> eventsById_ = new pbc::MapField<string, global::Com.DigitalAsset.Ledger.Api.V1.TreeEvent>();
    /// <summary>
    /// Changes to the ledger that were caused by this transaction. Nodes of the transaction tree.
    /// Each key be a valid LedgerString (as describe in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Com.DigitalAsset.Ledger.Api.V1.TreeEvent> EventsById {
      get { return eventsById_; }
    }

    /// <summary>Field number for the "root_event_ids" field.</summary>
    public const int RootEventIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_rootEventIds_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> rootEventIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Roots of the transaction tree.
    /// Each element must be a valid LedgerString (as describe in ``value.proto``).
    /// The elements are in the same order as the commands in the
    /// corresponding Commands object that triggerd this transaction.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RootEventIds {
      get { return rootEventIds_; }
    }

    /// <summary>Field number for the "trace_context" field.</summary>
    public const int TraceContextFieldNumber = 1000;
    private global::Com.DigitalAsset.Ledger.Api.V1.TraceContext traceContext_;
    /// <summary>
    /// Zipkin trace context.
    /// This field is a future extension point and is currently not supported.
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.TraceContext TraceContext {
      get { return traceContext_; }
      set {
        traceContext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionTree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionTree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      if (CommandId != other.CommandId) return false;
      if (WorkflowId != other.WorkflowId) return false;
      if (!object.Equals(EffectiveAt, other.EffectiveAt)) return false;
      if (Offset != other.Offset) return false;
      if (!EventsById.Equals(other.EventsById)) return false;
      if(!rootEventIds_.Equals(other.rootEventIds_)) return false;
      if (!object.Equals(TraceContext, other.TraceContext)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionId.Length != 0) hash ^= TransactionId.GetHashCode();
      if (CommandId.Length != 0) hash ^= CommandId.GetHashCode();
      if (WorkflowId.Length != 0) hash ^= WorkflowId.GetHashCode();
      if (effectiveAt_ != null) hash ^= EffectiveAt.GetHashCode();
      if (Offset.Length != 0) hash ^= Offset.GetHashCode();
      hash ^= EventsById.GetHashCode();
      hash ^= rootEventIds_.GetHashCode();
      if (traceContext_ != null) hash ^= TraceContext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TransactionId);
      }
      if (CommandId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CommandId);
      }
      if (WorkflowId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WorkflowId);
      }
      if (effectiveAt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EffectiveAt);
      }
      if (Offset.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Offset);
      }
      eventsById_.WriteTo(output, _map_eventsById_codec);
      rootEventIds_.WriteTo(output, _repeated_rootEventIds_codec);
      if (traceContext_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(TraceContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
      }
      if (CommandId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommandId);
      }
      if (WorkflowId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkflowId);
      }
      if (effectiveAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveAt);
      }
      if (Offset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Offset);
      }
      size += eventsById_.CalculateSize(_map_eventsById_codec);
      size += rootEventIds_.CalculateSize(_repeated_rootEventIds_codec);
      if (traceContext_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraceContext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionTree other) {
      if (other == null) {
        return;
      }
      if (other.TransactionId.Length != 0) {
        TransactionId = other.TransactionId;
      }
      if (other.CommandId.Length != 0) {
        CommandId = other.CommandId;
      }
      if (other.WorkflowId.Length != 0) {
        WorkflowId = other.WorkflowId;
      }
      if (other.effectiveAt_ != null) {
        if (effectiveAt_ == null) {
          EffectiveAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EffectiveAt.MergeFrom(other.EffectiveAt);
      }
      if (other.Offset.Length != 0) {
        Offset = other.Offset;
      }
      eventsById_.Add(other.eventsById_);
      rootEventIds_.Add(other.rootEventIds_);
      if (other.traceContext_ != null) {
        if (traceContext_ == null) {
          TraceContext = new global::Com.DigitalAsset.Ledger.Api.V1.TraceContext();
        }
        TraceContext.MergeFrom(other.TraceContext);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TransactionId = input.ReadString();
            break;
          }
          case 18: {
            CommandId = input.ReadString();
            break;
          }
          case 26: {
            WorkflowId = input.ReadString();
            break;
          }
          case 34: {
            if (effectiveAt_ == null) {
              EffectiveAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EffectiveAt);
            break;
          }
          case 50: {
            Offset = input.ReadString();
            break;
          }
          case 58: {
            eventsById_.AddEntriesFrom(input, _map_eventsById_codec);
            break;
          }
          case 66: {
            rootEventIds_.AddEntriesFrom(input, _repeated_rootEventIds_codec);
            break;
          }
          case 8002: {
            if (traceContext_ == null) {
              TraceContext = new global::Com.DigitalAsset.Ledger.Api.V1.TraceContext();
            }
            input.ReadMessage(TraceContext);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Each tree event message type below contains a ``witness_parties`` field which
  /// indicates the subset of the requested parties that can see the event
  /// in question.
  ///
  /// Note that transaction trees might contain events with
  /// _no_ witness parties, which were included simply because they were
  /// children of events which have witnesses.
  /// </summary>
  public sealed partial class TreeEvent : pb::IMessage<TreeEvent> {
    private static readonly pb::MessageParser<TreeEvent> _parser = new pb::MessageParser<TreeEvent>(() => new TreeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.TransactionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEvent(TreeEvent other) : this() {
      switch (other.KindCase) {
        case KindOneofCase.Created:
          Created = other.Created.Clone();
          break;
        case KindOneofCase.Exercised:
          Exercised = other.Exercised.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeEvent Clone() {
      return new TreeEvent(this);
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.CreatedEvent Created {
      get { return kindCase_ == KindOneofCase.Created ? (global::Com.DigitalAsset.Ledger.Api.V1.CreatedEvent) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Created;
      }
    }

    /// <summary>Field number for the "exercised" field.</summary>
    public const int ExercisedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.ExercisedEvent Exercised {
      get { return kindCase_ == KindOneofCase.Exercised ? (global::Com.DigitalAsset.Ledger.Api.V1.ExercisedEvent) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Exercised;
      }
    }

    private object kind_;
    /// <summary>Enum of possible cases for the "kind" oneof.</summary>
    public enum KindOneofCase {
      None = 0,
      Created = 1,
      Exercised = 2,
    }
    private KindOneofCase kindCase_ = KindOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindOneofCase KindCase {
      get { return kindCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kindCase_ = KindOneofCase.None;
      kind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TreeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TreeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Exercised, other.Exercised)) return false;
      if (KindCase != other.KindCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kindCase_ == KindOneofCase.Created) hash ^= Created.GetHashCode();
      if (kindCase_ == KindOneofCase.Exercised) hash ^= Exercised.GetHashCode();
      hash ^= (int) kindCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (kindCase_ == KindOneofCase.Created) {
        output.WriteRawTag(10);
        output.WriteMessage(Created);
      }
      if (kindCase_ == KindOneofCase.Exercised) {
        output.WriteRawTag(18);
        output.WriteMessage(Exercised);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kindCase_ == KindOneofCase.Created) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (kindCase_ == KindOneofCase.Exercised) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exercised);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TreeEvent other) {
      if (other == null) {
        return;
      }
      switch (other.KindCase) {
        case KindOneofCase.Created:
          if (Created == null) {
            Created = new global::Com.DigitalAsset.Ledger.Api.V1.CreatedEvent();
          }
          Created.MergeFrom(other.Created);
          break;
        case KindOneofCase.Exercised:
          if (Exercised == null) {
            Exercised = new global::Com.DigitalAsset.Ledger.Api.V1.ExercisedEvent();
          }
          Exercised.MergeFrom(other.Exercised);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.DigitalAsset.Ledger.Api.V1.CreatedEvent subBuilder = new global::Com.DigitalAsset.Ledger.Api.V1.CreatedEvent();
            if (kindCase_ == KindOneofCase.Created) {
              subBuilder.MergeFrom(Created);
            }
            input.ReadMessage(subBuilder);
            Created = subBuilder;
            break;
          }
          case 18: {
            global::Com.DigitalAsset.Ledger.Api.V1.ExercisedEvent subBuilder = new global::Com.DigitalAsset.Ledger.Api.V1.ExercisedEvent();
            if (kindCase_ == KindOneofCase.Exercised) {
              subBuilder.MergeFrom(Exercised);
            }
            input.ReadMessage(subBuilder);
            Exercised = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filtered view of an on-ledger transaction.
  /// </summary>
  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.DigitalAsset.Ledger.Api.V1.TransactionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      transactionId_ = other.transactionId_;
      commandId_ = other.commandId_;
      workflowId_ = other.workflowId_;
      effectiveAt_ = other.effectiveAt_ != null ? other.effectiveAt_.Clone() : null;
      events_ = other.events_.Clone();
      offset_ = other.offset_;
      traceContext_ = other.traceContext_ != null ? other.traceContext_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private string transactionId_ = "";
    /// <summary>
    /// Assigned by the server. Useful for correlating logs.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command_id" field.</summary>
    public const int CommandIdFieldNumber = 2;
    private string commandId_ = "";
    /// <summary>
    /// The ID of the command which resulted in this transaction. Missing for everyone except the submitting party.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommandId {
      get { return commandId_; }
      set {
        commandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "workflow_id" field.</summary>
    public const int WorkflowIdFieldNumber = 3;
    private string workflowId_ = "";
    /// <summary>
    /// The workflow ID used in command submission.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkflowId {
      get { return workflowId_; }
      set {
        workflowId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effective_at" field.</summary>
    public const int EffectiveAtFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp effectiveAt_;
    /// <summary>
    /// Ledger effective time.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EffectiveAt {
      get { return effectiveAt_; }
      set {
        effectiveAt_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.DigitalAsset.Ledger.Api.V1.Event> _repeated_events_codec
        = pb::FieldCodec.ForMessage(42, global::Com.DigitalAsset.Ledger.Api.V1.Event.Parser);
    private readonly pbc::RepeatedField<global::Com.DigitalAsset.Ledger.Api.V1.Event> events_ = new pbc::RepeatedField<global::Com.DigitalAsset.Ledger.Api.V1.Event>();
    /// <summary>
    /// The collection of events.
    /// Only contains ``CreatedEvent`` or ``ArchivedEvent``.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.DigitalAsset.Ledger.Api.V1.Event> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 6;
    private string offset_ = "";
    /// <summary>
    /// The absolute offset. The format of this field is described in ``ledger_offset.proto``.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Offset {
      get { return offset_; }
      set {
        offset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trace_context" field.</summary>
    public const int TraceContextFieldNumber = 1000;
    private global::Com.DigitalAsset.Ledger.Api.V1.TraceContext traceContext_;
    /// <summary>
    /// Zipkin trace context.
    /// This field is a future extension point and is currently not supported.
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.DigitalAsset.Ledger.Api.V1.TraceContext TraceContext {
      get { return traceContext_; }
      set {
        traceContext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      if (CommandId != other.CommandId) return false;
      if (WorkflowId != other.WorkflowId) return false;
      if (!object.Equals(EffectiveAt, other.EffectiveAt)) return false;
      if(!events_.Equals(other.events_)) return false;
      if (Offset != other.Offset) return false;
      if (!object.Equals(TraceContext, other.TraceContext)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionId.Length != 0) hash ^= TransactionId.GetHashCode();
      if (CommandId.Length != 0) hash ^= CommandId.GetHashCode();
      if (WorkflowId.Length != 0) hash ^= WorkflowId.GetHashCode();
      if (effectiveAt_ != null) hash ^= EffectiveAt.GetHashCode();
      hash ^= events_.GetHashCode();
      if (Offset.Length != 0) hash ^= Offset.GetHashCode();
      if (traceContext_ != null) hash ^= TraceContext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TransactionId);
      }
      if (CommandId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CommandId);
      }
      if (WorkflowId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WorkflowId);
      }
      if (effectiveAt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EffectiveAt);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (Offset.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Offset);
      }
      if (traceContext_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(TraceContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
      }
      if (CommandId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommandId);
      }
      if (WorkflowId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkflowId);
      }
      if (effectiveAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveAt);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (Offset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Offset);
      }
      if (traceContext_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraceContext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.TransactionId.Length != 0) {
        TransactionId = other.TransactionId;
      }
      if (other.CommandId.Length != 0) {
        CommandId = other.CommandId;
      }
      if (other.WorkflowId.Length != 0) {
        WorkflowId = other.WorkflowId;
      }
      if (other.effectiveAt_ != null) {
        if (effectiveAt_ == null) {
          EffectiveAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EffectiveAt.MergeFrom(other.EffectiveAt);
      }
      events_.Add(other.events_);
      if (other.Offset.Length != 0) {
        Offset = other.Offset;
      }
      if (other.traceContext_ != null) {
        if (traceContext_ == null) {
          TraceContext = new global::Com.DigitalAsset.Ledger.Api.V1.TraceContext();
        }
        TraceContext.MergeFrom(other.TraceContext);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TransactionId = input.ReadString();
            break;
          }
          case 18: {
            CommandId = input.ReadString();
            break;
          }
          case 26: {
            WorkflowId = input.ReadString();
            break;
          }
          case 34: {
            if (effectiveAt_ == null) {
              EffectiveAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EffectiveAt);
            break;
          }
          case 42: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 50: {
            Offset = input.ReadString();
            break;
          }
          case 8002: {
            if (traceContext_ == null) {
              TraceContext = new global::Com.DigitalAsset.Ledger.Api.V1.TraceContext();
            }
            input.ReadMessage(TraceContext);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
